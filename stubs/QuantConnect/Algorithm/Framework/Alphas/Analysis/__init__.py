# encoding: utf-8
# module QuantConnect.Algorithm.Framework.Alphas.Analysis calls itself Analysis
# from QuantConnect.Common, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null
# by generator 1.145
# no doc
# no imports

# no functions
# classes

class IInsightManager(IDisposable):
    """ Encapsulates the storage and on-line scoring of insights. """
    def AddExtension(self, extension):
        """
        AddExtension(self: IInsightManager, extension: IInsightManagerExtension)
            Add an extension to this manager
        
            extension: The extension to be added
        """
        pass

    def InitializeExtensionsForRange(self, start, end, current):
        """
        InitializeExtensionsForRange(self: IInsightManager, start: DateTime, end: DateTime, current: DateTime)
            Initializes any extensions for the specified 
             backtesting range
        
        
            start: The start date of the backtest (current time in 
             live mode)
        
            end: The end date of the backtest 
             (QuantConnect.Time.EndOfTime in live mode)
        
            current: The algorithm's current utc time
        """
        pass

    def RemoveInsights(self, insightIds):
        """ RemoveInsights(self: IInsightManager, insightIds: IEnumerable[Guid]) """
        pass

    def Step(self, frontierTimeUtc, securityValuesCollection, generatedInsights):
        """
        Step(self: IInsightManager, frontierTimeUtc: DateTime, securityValuesCollection: ReadOnlySecurityValuesCollection, generatedInsights: GeneratedInsightsCollection)
            Steps the manager forward in time, accepting new 
             state information and potentialy newly generated 
             insights
        
        
            frontierTimeUtc: The frontier time of the insight analysis
            securityValuesCollection: Snap shot of the securities at the frontier time
            generatedInsights: Any insight generated by the algorithm at the 
             frontier time
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AllInsights = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Enumerable of all internally maintained insights

Get: AllInsights(self: IInsightManager) -> IEnumerable[Insight]

"""

    ClosedInsights = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Enumerable of insights who's analysis has been completed

Get: ClosedInsights(self: IInsightManager) -> IEnumerable[Insight]

"""

    OpenInsights = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Enumerable of insights still under analysis

Get: OpenInsights(self: IInsightManager) -> IEnumerable[Insight]

"""



class IInsightScoreFunction:
    """
    Defines a function used to determine how correct a particular insight is.
                The result of calling QuantConnect.Algorithm.Framework.Alphas.Analysis.IInsightScoreFunction.Evaluate(QuantConnect.Algorithm.Framework.Alphas.Analysis.InsightAnalysisContext,QuantConnect.Algorithm.Framework.Alphas.InsightScoreType) is expected to be within the range [0, 1]
                where 0 is completely wrong and 1 is completely right
    """
    def Evaluate(self, context, scoreType):
        """
        Evaluate(self: IInsightScoreFunction, context: InsightAnalysisContext, scoreType: InsightScoreType) -> float
        
            Evaluates the score of the insight within the 
             context
        
        
            context: The insight's analysis context
            scoreType: The score type to be evaluated
            Returns: The insight's current score
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class IInsightScoreFunctionProvider:
    """ Retrieves the registered scoring function for the specified insight/score type """
    def GetScoreFunction(self, insightType, scoreType):
        """
        GetScoreFunction(self: IInsightScoreFunctionProvider, insightType: InsightType, scoreType: InsightScoreType) -> IInsightScoreFunction
        
            Gets the insight scoring function for the 
             specified insight type and score type
        
        
            insightType: The insight's type
            scoreType: The scoring type
            Returns: A function to be used to compute insight scores
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class InsightAnalysisContext(object):
    """
    Defines a context for performing analysis on a single insight
    
    InsightAnalysisContext(insight: Insight, initialValues: SecurityValues, analysisPeriod: TimeSpan)
    """
    def Equals(self, obj):
        """
        Equals(self: InsightAnalysisContext, obj: object) -> bool
        
            Determines whether the specified object is equal 
             to the current object.
        
        
            obj: The object to compare with the current object.
            Returns: true if the specified object  is equal to the 
             current object; otherwise, false.
        """
        pass

    def Get(self, key):
        """ Get[T](self: InsightAnalysisContext, key: str) -> T """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: InsightAnalysisContext) -> int
        
            Serves as the default hash function.
            Returns: A hash code for the current object.
        """
        pass

    def Set(self, key, value):
        """
        Set(self: InsightAnalysisContext, key: str, value: object)
            Sets the key/value in the context's generic 
             storage
        
        
            key: The value's key
            value: The value to be stored
        """
        pass

    def ShouldAnalyze(self, scoreType):
        """
        ShouldAnalyze(self: InsightAnalysisContext, scoreType: InsightScoreType) -> bool
        
            Determines whether or not this context/insight 
             can be analyzed for the specified score type
        
        
            scoreType: The type of insight score
            Returns: True to proceed with analyzing this insight for 
             the specified score type, false to skip analysis 
             of the score type
        """
        pass

    def ToString(self):
        """
        ToString(self: InsightAnalysisContext) -> str
        
            Returns a string that represents the current 
             object.
        
            Returns: A string that represents the current object.
        """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    @staticmethod # known case of __new__
    def __new__(self, insight, initialValues, analysisPeriod):
        """ __new__(cls: type, insight: Insight, initialValues: SecurityValues, analysisPeriod: TimeSpan) """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    AnalysisEndTimeUtc = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets ending time of the analysis period

Get: AnalysisEndTimeUtc(self: InsightAnalysisContext) -> DateTime

"""

    CurrentValues = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the current values. These are values of price/volatility as of the current algorithm time.
            NOTE: Once the scoring has been finalized these values will no longer be updated and will be the
            values as of the last scoring which may not be the same as the prediction end time

Get: CurrentValues(self: InsightAnalysisContext) -> SecurityValues

"""

    Id = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the id of this context which is the same as the insight's id

Get: Id(self: InsightAnalysisContext) -> Guid

"""

    InitialValues = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the initial values. These are values of price/volatility at the time the insight was generated

Get: InitialValues(self: InsightAnalysisContext) -> SecurityValues

"""

    Insight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the insight being analyzed

Get: Insight(self: InsightAnalysisContext) -> Insight

"""

    InsightPeriodClosed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets whether or not this insight's period has closed

Get: InsightPeriodClosed(self: InsightAnalysisContext) -> bool

"""

    NormalizedTime = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Percentage through the analysis period

Get: NormalizedTime(self: InsightAnalysisContext) -> float

"""

    NormalizedTimeStep = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Percentage of the current time step w.r.t analysis period

Get: NormalizedTimeStep(self: InsightAnalysisContext) -> float

"""

    Score = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the insight's current score

Get: Score(self: InsightAnalysisContext) -> InsightScore

"""

    Symbol = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the symbol the insight is for

Get: Symbol(self: InsightAnalysisContext) -> Symbol

"""



class InsightManager(object, IInsightManager, IDisposable):
    """
    Encapsulates the storage and on-line scoring of insights.
    
    InsightManager(scoreFunctionProvider: IInsightScoreFunctionProvider, extraAnalysisPeriodRatio: float, *extensions: Array[IInsightManagerExtension])
    """
    def AddExtension(self, extension):
        """
        AddExtension(self: InsightManager, extension: IInsightManagerExtension)
            Add an extension to this manager
        
            extension: The extension to be added
        """
        pass

    def ContextsOpenAt(self, frontierTimeUtc):
        """
        ContextsOpenAt(self: InsightManager, frontierTimeUtc: DateTime) -> IEnumerable[InsightAnalysisContext]
        
            Gets the unique set of symbols from analysis 
             contexts that will
        """
        pass

    def Dispose(self):
        """
        Dispose(self: InsightManager)
            Performs application-defined tasks associated 
             with freeing, releasing, or resetting unmanaged 
             resources.
        """
        pass

    def GetUpdatedContexts(self):
        """
        GetUpdatedContexts(self: InsightManager) -> IEnumerable[InsightAnalysisContext]
        
            Gets all insight analysis contexts that have been 
             updated since this method's last invocation.
            
                     Contexts are marked as not updated during 
             the enumeration, so in order to remove a context 
             from
                    the updated set, the enumerable 
             must be enumerated.
        """
        pass

    def InitializeExtensionsForRange(self, start, end, current):
        """
        InitializeExtensionsForRange(self: InsightManager, start: DateTime, end: DateTime, current: DateTime)
            Initializes any extensions for the specified 
             backtesting range
        
        
            start: The start date of the backtest (current time in 
             live mode)
        
            end: The end date of the backtest 
             (QuantConnect.Time.EndOfTime in live mode)
        
            current: The algorithm's current utc time
        """
        pass

    def RemoveInsights(self, insightIds):
        """ RemoveInsights(self: InsightManager, insightIds: IEnumerable[Guid]) """
        pass

    def Step(self, frontierTimeUtc, securityValuesCollection, generatedInsights):
        """
        Step(self: InsightManager, frontierTimeUtc: DateTime, securityValuesCollection: ReadOnlySecurityValuesCollection, generatedInsights: GeneratedInsightsCollection)
            Steps the manager forward in time, accepting new 
             state information and potentialy newly generated 
             insights
        
        
            frontierTimeUtc: The frontier time of the insight analysis
            securityValuesCollection: Snap shot of the securities at the frontier time
            generatedInsights: Any insight generated by the algorithm at the 
             frontier time
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, scoreFunctionProvider, extraAnalysisPeriodRatio, extensions):
        """ __new__(cls: type, scoreFunctionProvider: IInsightScoreFunctionProvider, extraAnalysisPeriodRatio: float, *extensions: Array[IInsightManagerExtension]) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    AllInsights = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Enumerable of all internally maintained insights

Get: AllInsights(self: InsightManager) -> IEnumerable[Insight]

"""

    ClosedInsights = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Enumerable of insights who's analysis has been completed

Get: ClosedInsights(self: InsightManager) -> IEnumerable[Insight]

"""

    OpenInsights = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Enumerable of insights still under analysis

Get: OpenInsights(self: InsightManager) -> IEnumerable[Insight]

"""


    ScoreTypes = None


class ISecurityValuesProvider:
    """
    Provides a simple abstraction that returns a security's current price and volatility.
                This facilitates testing by removing the dependency of IAlgorithm on the analysis components
    """
    def GetAllValues(self):
        """
        GetAllValues(self: ISecurityValuesProvider) -> ReadOnlySecurityValuesCollection
        
            Gets the current values for all the algorithm 
             securities (price/volatility)
        
            Returns: The insight target values for all the algorithm 
             securities
        """
        pass

    def GetValues(self, symbol):
        """
        GetValues(self: ISecurityValuesProvider, symbol: Symbol) -> SecurityValues
        
            Gets the current values for the specified symbol 
             (price/volatility)
        
        
            symbol: The symbol to get price/volatility for
            Returns: The insight target values for the specified symbol
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class ReadOnlySecurityValuesCollection(object):
    """
    Defines the security values at a given instant. This is analagous
                to TimeSlice/Slice, but decoupled from the algorithm thread and is
                intended to contain all of the information necessary to score all
                insight at this particular time step
    
    ReadOnlySecurityValuesCollection(securityValuesBySymbol: Dictionary[Symbol, SecurityValues])
    ReadOnlySecurityValuesCollection(securityValuesBySymbolFunc: Func[Symbol, SecurityValues])
    """
    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, securityValuesBySymbol: Dictionary[Symbol, SecurityValues])
        __new__(cls: type, securityValuesBySymbolFunc: Func[Symbol, SecurityValues])
        """
        pass


class SecurityValues(object):
    """
    Contains security values required by insight analysis components
    
    SecurityValues(symbol: Symbol, timeUtc: DateTime, exchangeHours: SecurityExchangeHours, price: Decimal, volatility: Decimal, volume: Decimal, quoteCurrencyConversionRate: Decimal)
    """
    def Get(self, type):
        """
        Get(self: SecurityValues, type: InsightType) -> Decimal
        
            Gets the security value corresponding to the 
             specified insight type
        
        
            type: The insight type
            Returns: The security value for the specified insight type
        """
        pass

    @staticmethod # known case of __new__
    def __new__(self, symbol, timeUtc, exchangeHours, price, volatility, volume, quoteCurrencyConversionRate):
        """ __new__(cls: type, symbol: Symbol, timeUtc: DateTime, exchangeHours: SecurityExchangeHours, price: Decimal, volatility: Decimal, volume: Decimal, quoteCurrencyConversionRate: Decimal) """
        pass

    ExchangeHours = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the exchange hours for the security

Get: ExchangeHours(self: SecurityValues) -> SecurityExchangeHours

"""

    Price = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the security price as of QuantConnect.Algorithm.Framework.Alphas.Analysis.SecurityValues.TimeUtc

Get: Price(self: SecurityValues) -> Decimal

"""

    QuoteCurrencyConversionRate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the conversion rate for the quote currency of the security

Get: QuoteCurrencyConversionRate(self: SecurityValues) -> Decimal

"""

    Symbol = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the symbol these values are for

Get: Symbol(self: SecurityValues) -> Symbol

"""

    TimeUtc = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the utc time these values were sampled

Get: TimeUtc(self: SecurityValues) -> DateTime

"""

    Volatility = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the security's volatility as of QuantConnect.Algorithm.Framework.Alphas.Analysis.SecurityValues.TimeUtc

Get: Volatility(self: SecurityValues) -> Decimal

"""

    Volume = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the volume traded in the security during this time step

Get: Volume(self: SecurityValues) -> Decimal

"""



class SecurityValuesProviderExtensions(object):
    """ Provides extension methods for QuantConnect.Algorithm.Framework.Alphas.Analysis.ISecurityValuesProvider """
    @staticmethod
    def GetValues(securityValuesProvider, symbols):
        """ GetValues(securityValuesProvider: ISecurityValuesProvider, symbols: ICollection[Symbol]) -> ReadOnlySecurityValuesCollection """
        pass

    __all__ = [
        'GetValues',
    ]


# variables with complex values

