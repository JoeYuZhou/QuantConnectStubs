# encoding: utf-8
# module QuantConnect.Algorithm.Framework.Alphas calls itself Alphas
# from QuantConnect.Common, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null
# by generator 1.145
# no doc
# no imports

# no functions
# classes

class GeneratedInsightsCollection(object):
    """
    Defines a collection of insights that were generated at the same time step

    

    GeneratedInsightsCollection(dateTimeUtc: DateTime, insights: IEnumerable[Insight], clone: bool)
    """
    @staticmethod # known case of __new__
    def __new__(self, dateTimeUtc, insights, clone):
        """ __new__(cls: type, dateTimeUtc: DateTime, insights: IEnumerable[Insight], clone: bool) """
        pass

    DateTimeUtc = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The utc date time the insights were generated



Get: DateTimeUtc(self: GeneratedInsightsCollection) -> DateTime



"""

    Insights = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The generated insights



Get: Insights(self: GeneratedInsightsCollection) -> List[Insight]



"""



class IInsightManagerExtension:
    """
    Abstraction point to handle the various concerns from a common api.

                At the time of writing, these concerns are charting, scoring, perisistence and messaging.
    """
    def InitializeForRange(self, algorithmStartDate, algorithmEndDate, algorithmUtcTime):
        """
        InitializeForRange(self: IInsightManagerExtension, algorithmStartDate: DateTime, algorithmEndDate: DateTime, algorithmUtcTime: DateTime)

            Allows the extension to initialize itself over 

             the expected range

        

        

            algorithmStartDate: The start date of the algorithm

            algorithmEndDate: The end date of the algorithm

            algorithmUtcTime: The algorithm's current utc time
        """
        pass

    def OnInsightAnalysisCompleted(self, context):
        """
        OnInsightAnalysisCompleted(self: IInsightManagerExtension, context: InsightAnalysisContext)

            Invoked when the insight manager has completed 

             analysis on an insight

        

        

            context: Context whose insight has just completed analysis
        """
        pass

    def OnInsightClosed(self, context):
        """
        OnInsightClosed(self: IInsightManagerExtension, context: InsightAnalysisContext)

            Invoked when the insight manager detects that an 

             insight has closed (frontier has passed insight 

             period)

        

        

            context: Context whose insight has just closed
        """
        pass

    def OnInsightGenerated(self, context):
        """
        OnInsightGenerated(self: IInsightManagerExtension, context: InsightAnalysisContext)

            Invoked when the insight manager first received a 

             generated insight from the algorithm

        

        

            context: Context whose insight has just generated
        """
        pass

    def Step(self, frontierTimeUtc):
        """
        Step(self: IInsightManagerExtension, frontierTimeUtc: DateTime)

            Invokes the manager at the end of the time step.

        

            frontierTimeUtc: The current frontier time utc
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class Insight(object):
    """
    Defines a alpha prediction for a single symbol generated by the algorithm

    

    Insight(symbol: Symbol, period: TimeSpan, type: InsightType, direction: InsightDirection)

    Insight(symbol: Symbol, period: TimeSpan, type: InsightType, direction: InsightDirection, magnitude: Nullable[float], confidence: Nullable[float], sourceModel: str, weight: Nullable[float])

    Insight(symbol: Symbol, expiryFunc: Func[DateTime, DateTime], type: InsightType, direction: InsightDirection)

    Insight(symbol: Symbol, expiryFunc: Func[DateTime, DateTime], type: InsightType, direction: InsightDirection, magnitude: Nullable[float], confidence: Nullable[float], sourceModel: str, weight: Nullable[float])

    Insight(generatedTimeUtc: DateTime, symbol: Symbol, period: TimeSpan, type: InsightType, direction: InsightDirection, magnitude: Nullable[float], confidence: Nullable[float], sourceModel: str, weight: Nullable[float])
    """
    def Clone(self):
        """
        Clone(self: Insight) -> Insight

        

            Creates a deep clone of this insight instance

            Returns: A new insight with identical values, but new 

             instances
        """
        pass

    @staticmethod
    def ComputeCloseTime(exchangeHours, generatedTimeUtc, *__args):
        """
        ComputeCloseTime(exchangeHours: SecurityExchangeHours, generatedTimeUtc: DateTime, resolution: Resolution, barCount: int) -> DateTime

        

            Computes the insight closing time from the given 

             generated time, resolution and bar count.

               

                  This will step through market hours using 

             the given resolution, respecting holidays, early 

             closes, weekends, etc..

        

        

            exchangeHours: The exchange hours of the insight's security

            generatedTimeUtc: The insight's generated time in utc

            resolution: The resolution used to 'step-through' market 

             hours to compute a reasonable close time

        

            barCount: The number of resolution steps to take

            Returns: The insight's closing time in utc

        ComputeCloseTime(exchangeHours: SecurityExchangeHours, generatedTimeUtc: DateTime, period: TimeSpan) -> DateTime

        

            computs the insight closing time from the given 

             generated time and period

        

        

            exchangeHours: The exchange hours of the insight's security

            generatedTimeUtc: The insight's generated time in utc

            period: The insight's period

            Returns: The insight's closing time in utc
        """
        pass

    @staticmethod
    def ComputePeriod(exchangeHours, generatedTimeUtc, closeTimeUtc):
        """
        ComputePeriod(exchangeHours: SecurityExchangeHours, generatedTimeUtc: DateTime, closeTimeUtc: DateTime) -> TimeSpan

        

            Computes the insight period from the given 

             generated and close times

        

        

            exchangeHours: The exchange hours of the insight's security

            generatedTimeUtc: The insight's generated time in utc

            closeTimeUtc: The insight's close time in utc

            Returns: The insight's period
        """
        pass

    @staticmethod
    def FromSerializedInsight(serializedInsight):
        """
        FromSerializedInsight(serializedInsight: SerializedInsight) -> Insight

        

            Creates a new 

             QuantConnect.Algorithm.Framework.Alphas.Insight 

             object from the specified serialized form

        

        

            serializedInsight: The insight DTO

            Returns: A new insight containing the information specified
        """
        pass

    @staticmethod
    def Group(*__args):
        """
        Group(*insights: Array[Insight]) -> IEnumerable[Insight]

        

            Creates a new, unique group id and sets it on 

             each insight

        

        

            insights: The insights to be grouped

        Group(insight: Insight) -> IEnumerable[Insight]

        

            Creates a new, unique group id and sets it on 

             each insight

        

        

            insight: The insight to be grouped
        """
        pass

    def IsActive(self, utcTime):
        """
        IsActive(self: Insight, utcTime: DateTime) -> bool

        

            Determines whether or not this insight is 

             considered active at the specified utcTime

        

        

            utcTime: The algorithm's current time in UTC. See 

             QuantConnect.Interfaces.IAlgorithm.UtcTime

        

            Returns: True if this insight is active, false otherwise
        """
        pass

    def IsExpired(self, utcTime):
        """
        IsExpired(self: Insight, utcTime: DateTime) -> bool

        

            Determines whether or not this insight is 

             considered expired at the specified utcTime

        

        

            utcTime: The algorithm's current time in UTC. See 

             QuantConnect.Interfaces.IAlgorithm.UtcTime

        

            Returns: True if this insight is expired, false otherwise
        """
        pass

    @staticmethod
    def Price(symbol, *__args):
        """
        Price(symbol: Symbol, resolution: Resolution, barCount: int, direction: InsightDirection, magnitude: Nullable[float], confidence: Nullable[float], sourceModel: str, weight: Nullable[float]) -> Insight

        Price(symbol: Symbol, closeTimeLocal: DateTime, direction: InsightDirection, magnitude: Nullable[float], confidence: Nullable[float], sourceModel: str, weight: Nullable[float]) -> Insight

        Price(symbol: Symbol, period: TimeSpan, direction: InsightDirection, magnitude: Nullable[float], confidence: Nullable[float], sourceModel: str, weight: Nullable[float]) -> Insight

        Price(symbol: Symbol, expiryFunc: Func[DateTime, DateTime], direction: InsightDirection, magnitude: Nullable[float], confidence: Nullable[float], sourceModel: str, weight: Nullable[float]) -> Insight
        """
        pass

    def SetPeriodAndCloseTime(self, exchangeHours):
        """
        SetPeriodAndCloseTime(self: Insight, exchangeHours: SecurityExchangeHours)

            Sets the insight period and close times if they 

             have not already been set.

        

        

            exchangeHours: The insight's security exchange hours
        """
        pass

    def ToString(self):
        """
        ToString(self: Insight) -> str

        

            Returns a string that represents the current 

             object.

        

            Returns: A string that represents the current object.
        """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, symbol: Symbol, period: TimeSpan, type: InsightType, direction: InsightDirection)

        __new__(cls: type, symbol: Symbol, period: TimeSpan, type: InsightType, direction: InsightDirection, magnitude: Nullable[float], confidence: Nullable[float], sourceModel: str, weight: Nullable[float])

        __new__(cls: type, symbol: Symbol, expiryFunc: Func[DateTime, DateTime], type: InsightType, direction: InsightDirection)

        __new__(cls: type, symbol: Symbol, expiryFunc: Func[DateTime, DateTime], type: InsightType, direction: InsightDirection, magnitude: Nullable[float], confidence: Nullable[float], sourceModel: str, weight: Nullable[float])

        __new__(cls: type, generatedTimeUtc: DateTime, symbol: Symbol, period: TimeSpan, type: InsightType, direction: InsightDirection, magnitude: Nullable[float], confidence: Nullable[float], sourceModel: str, weight: Nullable[float])
        """
        pass

    CloseTimeUtc = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the insight's prediction end time. This is the time when this

            insight prediction is expected to be fulfilled. This time takes into

            account market hours, weekends, as well as the symbol's data resolution



Get: CloseTimeUtc(self: Insight) -> DateTime



Set: CloseTimeUtc(self: Insight) = value

"""

    Confidence = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the confidence in this insight



Get: Confidence(self: Insight) -> Nullable[float]



"""

    Direction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the predicted direction, down, flat or up



Get: Direction(self: Insight) -> InsightDirection



"""

    EstimatedValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the estimated value of this insight in the account currency



Get: EstimatedValue(self: Insight) -> Decimal



"""

    GeneratedTimeUtc = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the utc time this insight was generated



Get: GeneratedTimeUtc(self: Insight) -> DateTime



Set: GeneratedTimeUtc(self: Insight) = value

"""

    GroupId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the group id this insight belongs to, null if not in a group



Get: GroupId(self: Insight) -> Nullable[Guid]



"""

    Id = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the unique identifier for this insight



Get: Id(self: Insight) -> Guid



"""

    Magnitude = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the predicted percent change in the insight type (price/volatility)



Get: Magnitude(self: Insight) -> Nullable[float]



"""

    Period = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the period over which this insight is expected to come to fruition



Get: Period(self: Insight) -> TimeSpan



"""

    ReferenceValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the initial reference value this insight is predicting against. The value is dependent on the specified QuantConnect.Algorithm.Framework.Alphas.InsightType



Get: ReferenceValue(self: Insight) -> Decimal



Set: ReferenceValue(self: Insight) = value

"""

    ReferenceValueFinal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the final reference value, used for scoring, this insight is predicting against. The value is dependent on the specified QuantConnect.Algorithm.Framework.Alphas.InsightType



Get: ReferenceValueFinal(self: Insight) -> Decimal



Set: ReferenceValueFinal(self: Insight) = value

"""

    Score = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the most recent scores for this insight



Get: Score(self: Insight) -> InsightScore



"""

    SourceModel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets an identifier for the source model that generated this insight.



Get: SourceModel(self: Insight) -> str



Set: SourceModel(self: Insight) = value

"""

    Symbol = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the symbol this insight is for



Get: Symbol(self: Insight) -> Symbol



"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the type of insight, for example, price insight or volatility insight



Get: Type(self: Insight) -> InsightType



"""

    Weight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the portfolio weight of this insight



Get: Weight(self: Insight) -> Nullable[float]



"""



class InsightCollection(object, ICollection[Insight], IEnumerable[Insight], IEnumerable):
    """
    Provides a collection for managing insights. This type provides collection access semantics

                as well as dictionary access semantics through TryGetValue, ContainsKey, and this[symbol]

    

    InsightCollection()
    """
    def Add(self, item):
        """
        Add(self: InsightCollection, item: Insight)

            Adds an item to the 

             System.Collections.Generic.ICollection.

        

        

            item: The object to add to the 

             System.Collections.Generic.ICollection.
        """
        pass

    def AddRange(self, insights):
        """ AddRange(self: InsightCollection, insights: IEnumerable[Insight]) """
        pass

    def Clear(self, symbols=None):
        """
        Clear(self: InsightCollection)

            Removes all items from the 

             System.Collections.Generic.ICollection.

        

        Clear(self: InsightCollection, symbols: Array[Symbol])

            Removes the symbol and its insights

        

            symbols: List of symbols that will be removed
        """
        pass

    def Contains(self, item):
        """
        Contains(self: InsightCollection, item: Insight) -> bool

        

            Determines whether the 

             System.Collections.Generic.ICollection contains a 

             specific value.

        

        

            item: The object to locate in the 

             System.Collections.Generic.ICollection.

        

            Returns: true if item is found in the 

             System.Collections.Generic.ICollection; 

             otherwise, false.
        """
        pass

    def ContainsKey(self, symbol):
        """
        ContainsKey(self: InsightCollection, symbol: Symbol) -> bool

        

            Determines whether insights exist in this 

             collection for the specified symbol

        

        

            symbol: The symbol key

            Returns: True if there are insights for the symbol in this 

             collection
        """
        pass

    def CopyTo(self, array, arrayIndex):
        """
        CopyTo(self: InsightCollection, array: Array[Insight], arrayIndex: int)

            Copies the elements of the 

             System.Collections.Generic.ICollection to an 

             System.Array, starting at a particular 

             System.Array index.

        

        

            array: The one-dimensional System.Array that is the 

             destination of the elements copied from 

             System.Collections.Generic.ICollection. The 

             System.Array must have zero-based indexing.

        

            arrayIndex: The zero-based index in array at which copying 

             begins.
        """
        pass

    def GetActiveInsights(self, utcTime):
        """
        GetActiveInsights(self: InsightCollection, utcTime: DateTime) -> ICollection[Insight]

        

            Gets the last generated active insight

            Returns: Collection of insights that are active
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: InsightCollection) -> IEnumerator[Insight]

        

            Returns an enumerator that iterates through the 

             collection.

        

            Returns: A System.Collections.Generic.IEnumerator that can 

             be used to iterate through the collection.
        """
        pass

    def GetNextExpiryTime(self):
        """
        GetNextExpiryTime(self: InsightCollection) -> Nullable[DateTime]

        

            Gets the next expiry time UTC
        """
        pass

    def HasActiveInsights(self, symbol, utcTime):
        """
        HasActiveInsights(self: InsightCollection, symbol: Symbol, utcTime: DateTime) -> bool

        

            Returns true if there are active insights for a 

             given symbol and time

        

        

            symbol: The symbol key

            utcTime: Time that determines whether the insight has 

             expired
        """
        pass

    def Remove(self, item):
        """
        Remove(self: InsightCollection, item: Insight) -> bool

        

            Removes the first occurrence of a specific object 

             from the System.Collections.Generic.ICollection.

        

        

            item: The object to remove from the 

             System.Collections.Generic.ICollection.

        

            Returns: true if item was successfully removed from the 

             System.Collections.Generic.ICollection; 

             otherwise, false. This method also returns false 

             if item is not found in the original 

             System.Collections.Generic.ICollection.
        """
        pass

    def RemoveExpiredInsights(self, utcTime):
        """
        RemoveExpiredInsights(self: InsightCollection, utcTime: DateTime) -> ICollection[Insight]

        

            Remove all expired insights from the collection 

             and retuns them

        

        

            utcTime: Time that determines whether the insight has 

             expired

        

            Returns: Expired insights that were removed
        """
        pass

    def TryGetValue(self, symbol, insights):
        """ TryGetValue(self: InsightCollection, symbol: Symbol) -> (bool, List[Insight]) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__(self: ICollection[Insight], item: Insight) -> bool """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __len__(self, *args): #cannot find CLR method
        """ x.__len__() <==> len(x) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the number of elements contained in the System.Collections.Generic.ICollection.



Get: Count(self: InsightCollection) -> int



"""

    IsReadOnly = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value indicating whether the System.Collections.Generic.ICollection is read-only.



Get: IsReadOnly(self: InsightCollection) -> bool



"""



class InsightDirection(Enum, IComparable, IFormattable, IConvertible):
    """
    Specifies the predicted direction for a insight (price/volatility)

    

    enum InsightDirection, values: Down (-1), Flat (0), Up (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Down = None
    Flat = None
    Up = None
    value__ = None


class InsightScore(object):
    """
    Defines the scores given to a particular insight

    

    InsightScore()

    InsightScore(direction: float, magnitude: float, updatedTimeUtc: DateTime)
    """
    def GetScore(self, type):
        """
        GetScore(self: InsightScore, type: InsightScoreType) -> float

        

            Gets the specified score

        

            type: The type of score to get, Direction/Magnitude

            Returns: The requested score
        """
        pass

    def ToString(self):
        """
        ToString(self: InsightScore) -> str

        

            Returns a string that represents the current 

             object.

        

            Returns: A string that represents the current object.
        """
        pass

    @staticmethod # known case of __new__
    def __new__(self, direction=None, magnitude=None, updatedTimeUtc=None):
        """
        __new__(cls: type)

        __new__(cls: type, direction: float, magnitude: float, updatedTimeUtc: DateTime)
        """
        pass

    Direction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the direction score



Get: Direction(self: InsightScore) -> float



"""

    IsFinalScore = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets whether or not this is the insight's final score



Get: IsFinalScore(self: InsightScore) -> bool



"""

    Magnitude = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the magnitude score



Get: Magnitude(self: InsightScore) -> float



"""

    UpdatedTimeUtc = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the time these scores were last updated



Get: UpdatedTimeUtc(self: InsightScore) -> DateTime



"""



class InsightScoreType(Enum, IComparable, IFormattable, IConvertible):
    """
    Defines a specific type of score for a insight

    

    enum InsightScoreType, values: Direction (0), Magnitude (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Direction = None
    Magnitude = None
    value__ = None


class InsightType(Enum, IComparable, IFormattable, IConvertible):
    """
    Specifies the type of insight

    

    enum InsightType, values: Price (0), Volatility (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Price = None
    value__ = None
    Volatility = None


# variables with complex values


# append from common
# encoding: utf-8
# module QuantConnect.Algorithm.Framework.Alphas calls itself Alphas
# from QuantConnect.Algorithm, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null
# by generator 1.145
# no doc
# no imports

# no functions
# classes

class AlphaModel(object, IAlphaModel, INotifiedSecurityChanges, INamedModel):
    """
    Provides a base class for alpha models.

    

    AlphaModel()
    """
    def OnSecuritiesChanged(self, algorithm, changes):
        """
        OnSecuritiesChanged(self: AlphaModel, algorithm: QCAlgorithm, changes: SecurityChanges)

            Event fired each time the we add/remove 

             securities from the data feed

        

        

            algorithm: The algorithm instance that experienced the 

             change in securities

        

            changes: The security additions and removals from the 

             algorithm
        """
        pass

    def Update(self, algorithm, data):
        """
        Update(self: AlphaModel, algorithm: QCAlgorithm, data: Slice) -> IEnumerable[Insight]

        

            Updates this alpha model with the latest data 

             from the algorithm.

                    This is called 

             each time the algorithm receives data for 

             subscribed securities

        

        

            algorithm: The algorithm instance

            data: The new data available

            Returns: The new insights generated
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Defines a name for a framework model



Get: Name(self: AlphaModel) -> str



Set: Name(self: AlphaModel) = value

"""



class AlphaModelExtensions(object):
    """ Provides extension methods for alpha models """
    @staticmethod
    def GetModelName(model):
        """
        GetModelName(model: IAlphaModel) -> str

        

            Gets the name of the alpha model
        """
        pass

    __all__ = [
        'GetModelName',
    ]


class AlphaModelPythonWrapper(AlphaModel, IAlphaModel, INotifiedSecurityChanges, INamedModel):
    """
    Provides an implementation of QuantConnect.Algorithm.Framework.Alphas.IAlphaModel that wraps a Python.Runtime.PyObject object

    

    AlphaModelPythonWrapper(model: PyObject)
    """
    def OnSecuritiesChanged(self, algorithm, changes):
        """
        OnSecuritiesChanged(self: AlphaModelPythonWrapper, algorithm: QCAlgorithm, changes: SecurityChanges)

            Event fired each time the we add/remove 

             securities from the data feed

        

        

            algorithm: The algorithm instance that experienced the 

             change in securities

        

            changes: The security additions and removals from the 

             algorithm
        """
        pass

    def Update(self, algorithm, data):
        """
        Update(self: AlphaModelPythonWrapper, algorithm: QCAlgorithm, data: Slice) -> IEnumerable[Insight]

        

            Updates this alpha model with the latest data 

             from the algorithm.

                    This is called 

             each time the algorithm receives data for 

             subscribed securities

        

        

            algorithm: The algorithm instance

            data: The new data available

            Returns: The new insights generated
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, model):
        """ __new__(cls: type, model: PyObject) """
        pass

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Defines a name for a framework model



Get: Name(self: AlphaModelPythonWrapper) -> str



"""



class CompositeAlphaModel(AlphaModel, IAlphaModel, INotifiedSecurityChanges, INamedModel):
    """
    Provides an implementation of QuantConnect.Algorithm.Framework.Alphas.IAlphaModel that combines multiple alpha

                models into a single alpha model and properly sets each insights 'SourceModel' property.

    

    CompositeAlphaModel(*alphaModels: Array[IAlphaModel])

    CompositeAlphaModel(*alphaModels: Array[PyObject])

    CompositeAlphaModel(alphaModel: PyObject)
    """
    def AddAlpha(self, *__args):
        """
        AddAlpha(self: CompositeAlphaModel, alphaModel: IAlphaModel)

            Adds a new 

             QuantConnect.Algorithm.Framework.Alphas.AlphaModel

        

        

            alphaModel: The alpha model to add

        AddAlpha(self: CompositeAlphaModel, pyAlphaModel: PyObject)

            Adds a new 

             QuantConnect.Algorithm.Framework.Alphas.AlphaModel

        

        

            pyAlphaModel: The alpha model to add
        """
        pass

    def OnSecuritiesChanged(self, algorithm, changes):
        """
        OnSecuritiesChanged(self: CompositeAlphaModel, algorithm: QCAlgorithm, changes: SecurityChanges)

            Event fired each time the we add/remove 

             securities from the data feed.

                    This 

             method patches this call through the each of the 

             wrapped models.

        

        

            algorithm: The algorithm instance that experienced the 

             change in securities

        

            changes: The security additions and removals from the 

             algorithm
        """
        pass

    def Update(self, algorithm, data):
        """
        Update(self: CompositeAlphaModel, algorithm: QCAlgorithm, data: Slice) -> IEnumerable[Insight]

        

            Updates this alpha model with the latest data 

             from the algorithm.

                    This is called 

             each time the algorithm receives data for 

             subscribed securities.

                    This method 

             patches this call through the each of the wrapped 

             models.

        

        

            algorithm: The algorithm instance

            data: The new data available

            Returns: The new insights generated
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, *alphaModels: Array[IAlphaModel])

        __new__(cls: type, *alphaModels: Array[PyObject])

        __new__(cls: type, alphaModel: PyObject)
        """
        pass


class IAlphaModel(INotifiedSecurityChanges):
    """ Algorithm framework model that produces insights """
    def Update(self, algorithm, data):
        """
        Update(self: IAlphaModel, algorithm: QCAlgorithm, data: Slice) -> IEnumerable[Insight]

        

            Updates this alpha model with the latest data 

             from the algorithm.

                    This is called 

             each time the algorithm receives data for 

             subscribed securities

        

        

            algorithm: The algorithm instance

            data: The new data available

            Returns: The new insights generated
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class INamedModel:
    """
    Provides a marker interface allowing models to define their own names.

                If not specified, the framework will use the model's type name.

                Implementation of this is not required unless you plan on running multiple models

                of the same type w/ different parameters.
    """
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Defines a name for a framework model



Get: Name(self: INamedModel) -> str



"""



class NullAlphaModel(AlphaModel, IAlphaModel, INotifiedSecurityChanges, INamedModel):
    """
    Provides a null implementation of an alpha model

    

    NullAlphaModel()
    """
    def Update(self, algorithm, data):
        """
        Update(self: NullAlphaModel, algorithm: QCAlgorithm, data: Slice) -> IEnumerable[Insight]

        

            Updates this alpha model with the latest data 

             from the algorithm.

                    This is called 

             each time the algorithm receives data for 

             subscribed securities

        

        

            algorithm: The algorithm instance

            data: The new data available

            Returns: The new insights generated
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

# encoding: utf-8
# module QuantConnect.Algorithm.Framework.Alphas calls itself Alphas
# from QuantConnect.Algorithm.Framework, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null
# by generator 1.145
# no doc
# no imports

# no functions
# classes

class BasePairsTradingAlphaModel(AlphaModel, IAlphaModel, INotifiedSecurityChanges, INamedModel):
    """
    This alpha model is designed to accept every possible pair combination

                from securities selected by the universe selection model

                This model generates alternating long ratio/short ratio insights emitted as a group

    

    BasePairsTradingAlphaModel(lookback: int, resolution: Resolution, threshold: Decimal)
    """
    def HasPassedTest(self, algorithm, asset1, asset2):
        """
        HasPassedTest(self: BasePairsTradingAlphaModel, algorithm: QCAlgorithm, asset1: Symbol, asset2: Symbol) -> bool

        

            Check whether the assets pass a pairs trading test

        

            algorithm: The algorithm instance that experienced the 

             change in securities

        

            asset1: The first asset's symbol in the pair

            asset2: The second asset's symbol in the pair

            Returns: True if the statistical test for the pair is 

             successful
        """
        pass

    def OnSecuritiesChanged(self, algorithm, changes):
        """
        OnSecuritiesChanged(self: BasePairsTradingAlphaModel, algorithm: QCAlgorithm, changes: SecurityChanges)

            Event fired each time the we add/remove 

             securities from the data feed

        

        

            algorithm: The algorithm instance that experienced the 

             change in securities

        

            changes: The security additions and removals from the 

             algorithm
        """
        pass

    def Update(self, algorithm, data):
        """
        Update(self: BasePairsTradingAlphaModel, algorithm: QCAlgorithm, data: Slice) -> IEnumerable[Insight]

        

            Updates this alpha model with the latest data 

             from the algorithm.

                    This is called 

             each time the algorithm receives data for 

             subscribed securities

        

        

            algorithm: The algorithm instance

            data: The new data available

            Returns: The new insights generated
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, lookback, resolution, threshold):
        """ __new__(cls: type, lookback: int, resolution: Resolution, threshold: Decimal) """
        pass

    Securities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """List of security objects present in the universe



Get: Securities(self: BasePairsTradingAlphaModel) -> HashSet[Security]



"""



class ConstantAlphaModel(AlphaModel, IAlphaModel, INotifiedSecurityChanges, INamedModel):
    """
    Provides an implementation of QuantConnect.Algorithm.Framework.Alphas.IAlphaModel that always returns the same insight for each security

    

    ConstantAlphaModel(type: InsightType, direction: InsightDirection, period: TimeSpan)

    ConstantAlphaModel(type: InsightType, direction: InsightDirection, period: TimeSpan, magnitude: Nullable[float], confidence: Nullable[float], weight: Nullable[float])
    """
    def OnSecuritiesChanged(self, algorithm, changes):
        """
        OnSecuritiesChanged(self: ConstantAlphaModel, algorithm: QCAlgorithm, changes: SecurityChanges)

            Event fired each time the we add/remove 

             securities from the data feed

        

        

            algorithm: The algorithm instance that experienced the 

             change in securities

        

            changes: The security additions and removals from the 

             algorithm
        """
        pass

    def ShouldEmitInsight(self, *args): #cannot find CLR method
        """ ShouldEmitInsight(self: ConstantAlphaModel, utcTime: DateTime, symbol: Symbol) -> bool """
        pass

    def Update(self, algorithm, data):
        """
        Update(self: ConstantAlphaModel, algorithm: QCAlgorithm, data: Slice) -> IEnumerable[Insight]

        

            Creates a constant insight for each security as 

             specified via the constructor

        

        

            algorithm: The algorithm instance

            data: The new data available

            Returns: The new insights generated
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, type, direction, period, magnitude=None, confidence=None, weight=None):
        """
        __new__(cls: type, type: InsightType, direction: InsightDirection, period: TimeSpan)

        __new__(cls: type, type: InsightType, direction: InsightDirection, period: TimeSpan, magnitude: Nullable[float], confidence: Nullable[float], weight: Nullable[float])
        """
        pass


class EmaCrossAlphaModel(AlphaModel, IAlphaModel, INotifiedSecurityChanges, INamedModel):
    """
    Alpha model that uses an EMA cross to create insights

    

    EmaCrossAlphaModel(fastPeriod: int, slowPeriod: int, resolution: Resolution)
    """
    def OnSecuritiesChanged(self, algorithm, changes):
        """
        OnSecuritiesChanged(self: EmaCrossAlphaModel, algorithm: QCAlgorithm, changes: SecurityChanges)

            Event fired each time the we add/remove 

             securities from the data feed

        

        

            algorithm: The algorithm instance that experienced the 

             change in securities

        

            changes: The security additions and removals from the 

             algorithm
        """
        pass

    def Update(self, algorithm, data):
        """
        Update(self: EmaCrossAlphaModel, algorithm: QCAlgorithm, data: Slice) -> IEnumerable[Insight]

        

            Updates this alpha model with the latest data 

             from the algorithm.

                    This is called 

             each time the algorithm receives data for 

             subscribed securities

        

        

            algorithm: The algorithm instance

            data: The new data available

            Returns: The new insights generated
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, fastPeriod, slowPeriod, resolution):
        """ __new__(cls: type, fastPeriod: int, slowPeriod: int, resolution: Resolution) """
        pass


class HistoricalReturnsAlphaModel(AlphaModel, IAlphaModel, INotifiedSecurityChanges, INamedModel):
    """
    Alpha model that uses historical returns to create insights

    

    HistoricalReturnsAlphaModel(lookback: int, resolution: Resolution)
    """
    def OnSecuritiesChanged(self, algorithm, changes):
        """
        OnSecuritiesChanged(self: HistoricalReturnsAlphaModel, algorithm: QCAlgorithm, changes: SecurityChanges)

            Event fired each time the we add/remove 

             securities from the data feed

        

        

            algorithm: The algorithm instance that experienced the 

             change in securities

        

            changes: The security additions and removals from the 

             algorithm
        """
        pass

    def Update(self, algorithm, data):
        """
        Update(self: HistoricalReturnsAlphaModel, algorithm: QCAlgorithm, data: Slice) -> IEnumerable[Insight]

        

            Updates this alpha model with the latest data 

             from the algorithm.

                    This is called 

             each time the algorithm receives data for 

             subscribed securities

        

        

            algorithm: The algorithm instance

            data: The new data available

            Returns: The new insights generated
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, lookback, resolution):
        """ __new__(cls: type, lookback: int, resolution: Resolution) """
        pass


class MacdAlphaModel(AlphaModel, IAlphaModel, INotifiedSecurityChanges, INamedModel):
    """
    Defines a custom alpha model that uses MACD crossovers. The MACD signal line is

                used to generate up/down insights if it's stronger than the bounce threshold.

                If the MACD signal is within the bounce threshold then a flat price insight is returned.

    

    MacdAlphaModel(fastPeriod: int, slowPeriod: int, signalPeriod: int, movingAverageType: MovingAverageType, resolution: Resolution)
    """
    def OnSecuritiesChanged(self, algorithm, changes):
        """
        OnSecuritiesChanged(self: MacdAlphaModel, algorithm: QCAlgorithm, changes: SecurityChanges)

            Event fired each time the we add/remove 

             securities from the data feed.

                    This 

             initializes the MACD for each added security and 

             cleans up the indicator for each removed 

             security.

        

        

            algorithm: The algorithm instance that experienced the 

             change in securities

        

            changes: The security additions and removals from the 

             algorithm
        """
        pass

    def Update(self, algorithm, data):
        """
        Update(self: MacdAlphaModel, algorithm: QCAlgorithm, data: Slice) -> IEnumerable[Insight]

        

            Determines an insight for each security based on 

             it's current MACD signal

        

        

            algorithm: The algorithm instance

            data: The new data available

            Returns: The new insights generated
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, fastPeriod, slowPeriod, signalPeriod, movingAverageType, resolution):
        """ __new__(cls: type, fastPeriod: int, slowPeriod: int, signalPeriod: int, movingAverageType: MovingAverageType, resolution: Resolution) """
        pass


class PearsonCorrelationPairsTradingAlphaModel(BasePairsTradingAlphaModel, IAlphaModel, INotifiedSecurityChanges, INamedModel):
    """
    This alpha model is designed to rank every pair combination by its pearson correlation

                and trade the pair with the hightest correlation

                This model generates alternating long ratio/short ratio insights emitted as a group

    

    PearsonCorrelationPairsTradingAlphaModel(lookback: int, resolution: Resolution, threshold: Decimal, minimumCorrelation: float)
    """
    def HasPassedTest(self, algorithm, asset1, asset2):
        """
        HasPassedTest(self: PearsonCorrelationPairsTradingAlphaModel, algorithm: QCAlgorithm, asset1: Symbol, asset2: Symbol) -> bool

        

            Check whether the assets pass a pairs trading test

        

            algorithm: The algorithm instance that experienced the 

             change in securities

        

            asset1: The first asset's symbol in the pair

            asset2: The second asset's symbol in the pair

            Returns: True if the statistical test for the pair is 

             successful
        """
        pass

    def OnSecuritiesChanged(self, algorithm, changes):
        """
        OnSecuritiesChanged(self: PearsonCorrelationPairsTradingAlphaModel, algorithm: QCAlgorithm, changes: SecurityChanges)

            Event fired each time the we add/remove 

             securities from the data feed

        

        

            algorithm: The algorithm instance that experienced the 

             change in securities

        

            changes: The security additions and removals from the 

             algorithm
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, lookback, resolution, threshold, minimumCorrelation):
        """ __new__(cls: type, lookback: int, resolution: Resolution, threshold: Decimal, minimumCorrelation: float) """
        pass


class RsiAlphaModel(AlphaModel, IAlphaModel, INotifiedSecurityChanges, INamedModel):
    """
    Uses Wilder's RSI to create insights. Using default settings, a cross over below 30 or above 70 will

                trigger a new insight.

    

    RsiAlphaModel(period: int, resolution: Resolution)
    """
    def OnSecuritiesChanged(self, algorithm, changes):
        """
        OnSecuritiesChanged(self: RsiAlphaModel, algorithm: QCAlgorithm, changes: SecurityChanges)

            Cleans out old security data and initializes the 

             RSI for any newly added securities.

                    

             This functional also seeds any new indicators 

             using a history request.

        

        

            algorithm: The algorithm instance that experienced the 

             change in securities

        

            changes: The security additions and removals from the 

             algorithm
        """
        pass

    def Update(self, algorithm, data):
        """
        Update(self: RsiAlphaModel, algorithm: QCAlgorithm, data: Slice) -> IEnumerable[Insight]

        

            Updates this alpha model with the latest data 

             from the algorithm.

                    This is called 

             each time the algorithm receives data for 

             subscribed securities

        

        

            algorithm: The algorithm instance

            data: The new data available

            Returns: The new insights generated
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, period, resolution):
        """ __new__(cls: type, period: int, resolution: Resolution) """
        pass





