# encoding: utf-8
# module QuantConnect.Data.UniverseSelection calls itself UniverseSelection
# from QuantConnect.Common, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null
# by generator 1.145
# no doc
# no imports

# no functions
# classes

class BaseDataCollection(BaseData, IBaseData):
    """
    This type exists for transport of data as a single packet
    
    BaseDataCollection()
    BaseDataCollection(time: DateTime, symbol: Symbol, data: IEnumerable[BaseData])
    BaseDataCollection(time: DateTime, endTime: DateTime, symbol: Symbol, data: IEnumerable[BaseData])
    BaseDataCollection(time: DateTime, endTime: DateTime, symbol: Symbol, data: List[BaseData])
    """
    def Clone(self, fillForward=None):
        """
        Clone(self: BaseDataCollection) -> BaseData
        
            Return a new instance clone of this object, used 
             in fill forward
        
            Returns: A clone of the current object
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, time=None, *__args):
        """
        __new__(cls: type)
        __new__(cls: type, time: DateTime, symbol: Symbol, data: IEnumerable[BaseData])
        __new__(cls: type, time: DateTime, endTime: DateTime, symbol: Symbol, data: IEnumerable[BaseData])
        __new__(cls: type, time: DateTime, endTime: DateTime, symbol: Symbol, data: List[BaseData])
        """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Data = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the data list

Get: Data(self: BaseDataCollection) -> List[BaseData]

Set: Data(self: BaseDataCollection) = value
"""

    EndTime = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the end time of this data

Get: EndTime(self: BaseDataCollection) -> DateTime

Set: EndTime(self: BaseDataCollection) = value
"""



class CoarseFundamental(BaseData, IBaseData):
    """
    Defines summary information about a single symbol for a given date
    
    CoarseFundamental()
    """
    def Clone(self, fillForward=None):
        """
        Clone(self: CoarseFundamental) -> BaseData
        
            Return a new instance clone of this object, used 
             in fill forward
        
            Returns: A clone of the current object
        """
        pass

    @staticmethod
    def CreateUniverseSymbol(market, addGuid):
        """
        CreateUniverseSymbol(market: str, addGuid: bool) -> Symbol
        
            Creates the symbol used for coarse fundamental 
             data
        
        
            market: The market
            addGuid: True, will add a random GUID to allow uniqueness
            Returns: A coarse universe symbol for the specified market
        """
        pass

    def GetSource(self, config, date, *__args):
        """
        GetSource(self: CoarseFundamental, config: SubscriptionDataConfig, date: DateTime, isLiveMode: bool) -> SubscriptionDataSource
        
            Return the URL string source of the file. This 
             will be converted to a stream
        
        
            config: Configuration object
            date: Date of this source file
            isLiveMode: true if we're in live mode, false for backtesting 
             mode
        
            Returns: String URL of source file.
        """
        pass

    def Reader(self, config, *__args):
        """
        Reader(self: CoarseFundamental, config: SubscriptionDataConfig, line: str, date: DateTime, isLiveMode: bool) -> BaseData
        
            Reader converts each line of the data source into 
             BaseData objects. Each data type creates its own 
             factory method, and returns a new instance of the 
             object
                    each time it is called.
        
        
            config: Subscription data config setup object
            line: Line of the source document
            date: Date of the requested data
            isLiveMode: true if we're in live mode, false for backtesting 
             mode
        
            Returns: Instance of the T:BaseData object generated by 
             this line of the CSV
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    AdjustedPrice = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the split and dividend adjusted price

Get: AdjustedPrice(self: CoarseFundamental) -> Decimal

"""

    DollarVolume = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the day's dollar volume for this symbol

Get: DollarVolume(self: CoarseFundamental) -> Decimal

Set: DollarVolume(self: CoarseFundamental) = value
"""

    EndTime = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The end time of this data.

Get: EndTime(self: CoarseFundamental) -> DateTime

Set: EndTime(self: CoarseFundamental) = value
"""

    HasFundamentalData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns whether the symbol has fundamental data for the given date

Get: HasFundamentalData(self: CoarseFundamental) -> bool

Set: HasFundamentalData(self: CoarseFundamental) = value
"""

    Market = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the market for this symbol

Get: Market(self: CoarseFundamental) -> str

Set: Market(self: CoarseFundamental) = value
"""

    PriceFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the price factor for the given date

Get: PriceFactor(self: CoarseFundamental) -> Decimal

Set: PriceFactor(self: CoarseFundamental) = value
"""

    PriceScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the combined factor used to create adjusted prices from raw prices

Get: PriceScaleFactor(self: CoarseFundamental) -> Decimal

"""

    SplitFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the split factor for the given date

Get: SplitFactor(self: CoarseFundamental) -> Decimal

Set: SplitFactor(self: CoarseFundamental) = value
"""

    Volume = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the day's total volume

Get: Volume(self: CoarseFundamental) -> Int64

Set: Volume(self: CoarseFundamental) = value
"""



class Universe(object, IDisposable):
    """ Provides a base class for all universes to derive from. """
    def CanRemoveMember(self, utcTime, security):
        """
        CanRemoveMember(self: Universe, utcTime: DateTime, security: Security) -> bool
        
            Determines whether or not the specified security 
             can be removed from
                    this universe. 
             This is useful to prevent securities from being 
             taken
                    out of a universe before the 
             algorithm has had enough time to make
                   
              decisions on the security
        
        
            utcTime: The current utc time
            security: The security to check if its ok to remove
            Returns: True if we can remove the security, false 
             otherwise
        """
        pass

    def ContainsMember(self, symbol):
        """
        ContainsMember(self: Universe, symbol: Symbol) -> bool
        
            Determines whether or not the specified symbol is 
             currently a member of this universe
        
        
            symbol: The symbol whose membership is to be checked
            Returns: True if the specified symbol is part of this 
             universe, false otherwise
        """
        pass

    def CreateSecurity(self, symbol, algorithm, marketHoursDatabase, symbolPropertiesDatabase):
        """
        CreateSecurity(self: Universe, symbol: Symbol, algorithm: IAlgorithm, marketHoursDatabase: MarketHoursDatabase, symbolPropertiesDatabase: SymbolPropertiesDatabase) -> Security
        
            Creates and configures a security for the 
             specified symbol
        
        
            symbol: The symbol of the security to be created
            algorithm: The algorithm instance
            marketHoursDatabase: The market hours database
            symbolPropertiesDatabase: The symbol properties database
            Returns: The newly initialized security object
        """
        pass

    def Dispose(self):
        """
        Dispose(self: Universe)
            Marks this universe as disposed and ready to 
             remove all child subscriptions
        """
        pass

    def GetSubscriptionRequests(self, security, currentTimeUtc, maximumEndTimeUtc, subscriptionService=None):
        """
        GetSubscriptionRequests(self: Universe, security: Security, currentTimeUtc: DateTime, maximumEndTimeUtc: DateTime) -> IEnumerable[SubscriptionRequest]
        
            Gets the subscription requests to be added for 
             the specified security
        
        
            security: The security to get subscriptions for
            currentTimeUtc: The current time in utc. This is the frontier 
             time of the algorithm
        
            maximumEndTimeUtc: The max end time
            Returns: All subscriptions required by this security
        GetSubscriptionRequests(self: Universe, security: Security, currentTimeUtc: DateTime, maximumEndTimeUtc: DateTime, subscriptionService: ISubscriptionDataConfigService) -> IEnumerable[SubscriptionRequest]
        
            Gets the subscription requests to be added for 
             the specified security
        
        
            security: The security to get subscriptions for
            currentTimeUtc: The current time in utc. This is the frontier 
             time of the algorithm
        
            maximumEndTimeUtc: The max end time
            subscriptionService: Instance which implements 
             QuantConnect.Interfaces.ISubscriptionDataConfigSer
             vice interface
        
            Returns: All subscriptions required by this security
        """
        pass

    def PerformSelection(self, utcTime, data):
        """
        PerformSelection(self: Universe, utcTime: DateTime, data: BaseDataCollection) -> IEnumerable[Symbol]
        
            Performs universe selection using the data 
             specified
        
        
            utcTime: The current utc time
            data: The symbols to remain in the universe
            Returns: The data that passes the filter
        """
        pass

    def SelectSymbols(self, utcTime, data):
        """
        SelectSymbols(self: Universe, utcTime: DateTime, data: BaseDataCollection) -> IEnumerable[Symbol]
        
            Performs universe selection using the data 
             specified
        
        
            utcTime: The current utc time
            data: The symbols to remain in the universe
            Returns: The data that passes the filter
        """
        pass

    def SetSecurityInitializer(self, securityInitializer):
        """
        SetSecurityInitializer(self: Universe, securityInitializer: ISecurityInitializer)
            Sets the security initializer, used to 
             initialize/configure securities after creation
        
        
            securityInitializer: The security initializer
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *args): #cannot find CLR constructor
        """
        __new__(cls: type, config: SubscriptionDataConfig)
        __new__(cls: type, config: SubscriptionDataConfig, securityInitializer: ISecurityInitializer)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Configuration = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the configuration used to get universe data

Get: Configuration(self: Universe) -> SubscriptionDataConfig

"""

    DisposeRequested = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Flag indicating if disposal of this universe has been requested

Get: DisposeRequested(self: Universe) -> bool

"""

    Market = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the market of this universe

Get: Market(self: Universe) -> str

"""

    Members = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the current listing of members in this universe. Modifications
            to this dictionary do not change universe membership.

Get: Members(self: Universe) -> Dictionary[Symbol, Security]

"""

    Securities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the internal security collection used to define membership in this universe

Get: Securities(self: Universe) -> ConcurrentDictionary[Symbol, Member]

"""

    SecurityInitializer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the instance responsible for initializing newly added securities

Get: SecurityInitializer(self: Universe) -> ISecurityInitializer

"""

    SecurityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the security type of this universe

Get: SecurityType(self: Universe) -> SecurityType

"""

    UniverseSettings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the settings used for subscriptions added for this universe

Get: UniverseSettings(self: Universe) -> UniverseSettings

"""


    Member = None
    Unchanged = None
    UnchangedUniverse = None


class CoarseFundamentalUniverse(Universe, IDisposable):
    """
    Defines a universe that reads coarse us equity data
    
    CoarseFundamentalUniverse(universeSettings: UniverseSettings, securityInitializer: ISecurityInitializer, selector: Func[IEnumerable[CoarseFundamental], IEnumerable[Symbol]])
    CoarseFundamentalUniverse(universeSettings: UniverseSettings, securityInitializer: ISecurityInitializer, selector: PyObject)
    CoarseFundamentalUniverse(symbol: Symbol, universeSettings: UniverseSettings, securityInitializer: ISecurityInitializer, selector: Func[IEnumerable[CoarseFundamental], IEnumerable[Symbol]])
    CoarseFundamentalUniverse(symbol: Symbol, universeSettings: UniverseSettings, securityInitializer: ISecurityInitializer, selector: PyObject)
    """
    @staticmethod
    def CreateConfiguration(symbol):
        """
        CreateConfiguration(symbol: Symbol) -> SubscriptionDataConfig
        
            Creates a 
             QuantConnect.Data.UniverseSelection.CoarseFundamen
             tal subscription configuration for the US-equity 
             market
        
        
            symbol: The symbol used in the returned configuration
            Returns: A coarse fundamental subscription configuration 
             with the specified symbol
        """
        pass

    def SelectSymbols(self, utcTime, data):
        """
        SelectSymbols(self: CoarseFundamentalUniverse, utcTime: DateTime, data: BaseDataCollection) -> IEnumerable[Symbol]
        
            Performs universe selection using the data 
             specified
        
        
            utcTime: The current utc time
            data: The symbols to remain in the universe
            Returns: The data that passes the filter
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, universeSettings: UniverseSettings, securityInitializer: ISecurityInitializer, selector: Func[IEnumerable[CoarseFundamental], IEnumerable[Symbol]])
        __new__(cls: type, universeSettings: UniverseSettings, securityInitializer: ISecurityInitializer, selector: PyObject)
        __new__(cls: type, symbol: Symbol, universeSettings: UniverseSettings, securityInitializer: ISecurityInitializer, selector: Func[IEnumerable[CoarseFundamental], IEnumerable[Symbol]])
        __new__(cls: type, symbol: Symbol, universeSettings: UniverseSettings, securityInitializer: ISecurityInitializer, selector: PyObject)
        """
        pass

    UniverseSettings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the settings used for subscriptons added for this universe

Get: UniverseSettings(self: CoarseFundamentalUniverse) -> UniverseSettings

"""



class FuncUniverse(Universe, IDisposable):
    """
    Provides a functional implementation of QuantConnect.Data.UniverseSelection.Universe
    
    FuncUniverse(configuration: SubscriptionDataConfig, universeSettings: UniverseSettings, securityInitializer: ISecurityInitializer, universeSelector: Func[IEnumerable[BaseData], IEnumerable[Symbol]])
    FuncUniverse(configuration: SubscriptionDataConfig, universeSettings: UniverseSettings, universeSelector: Func[IEnumerable[BaseData], IEnumerable[Symbol]])
    """
    def SelectSymbols(self, utcTime, data):
        """
        SelectSymbols(self: FuncUniverse, utcTime: DateTime, data: BaseDataCollection) -> IEnumerable[Symbol]
        
            Performs an initial, coarse filter
        
            utcTime: The current utc time
            data: The coarse fundamental data
            Returns: The data that passes the filter
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, configuration, universeSettings, *__args):
        """
        __new__(cls: type, configuration: SubscriptionDataConfig, universeSettings: UniverseSettings, securityInitializer: ISecurityInitializer, universeSelector: Func[IEnumerable[BaseData], IEnumerable[Symbol]])
        __new__(cls: type, configuration: SubscriptionDataConfig, universeSettings: UniverseSettings, universeSelector: Func[IEnumerable[BaseData], IEnumerable[Symbol]])
        """
        pass

    UniverseSettings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the settings used for subscriptons added for this universe

Get: UniverseSettings(self: FuncUniverse) -> UniverseSettings

"""



class ConstituentsUniverse(FuncUniverse, IDisposable):
    """
    ConstituentsUniverse allows to perform universe selection based on an
                already preselected set of QuantConnect.Symbol.
    
    ConstituentsUniverse(symbol: Symbol, universeSettings: UniverseSettings, type: Type)
    ConstituentsUniverse(subscriptionDataConfig: SubscriptionDataConfig, universeSettings: UniverseSettings)
    """
    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, symbol: Symbol, universeSettings: UniverseSettings, type: Type)
        __new__(cls: type, subscriptionDataConfig: SubscriptionDataConfig, universeSettings: UniverseSettings)
        """
        pass


class ConstituentsUniverseData(BaseData, IBaseData):
    """
    Custom base data class used for QuantConnect.Data.UniverseSelection.ConstituentsUniverse
    
    ConstituentsUniverseData()
    """
    def DefaultResolution(self):
        """
        DefaultResolution(self: ConstituentsUniverseData) -> Resolution
        
            Gets the default resolution for this data and 
             security type
        """
        pass

    def GetSource(self, config, date, *__args):
        """
        GetSource(self: ConstituentsUniverseData, config: SubscriptionDataConfig, date: DateTime, isLiveMode: bool) -> SubscriptionDataSource
        
            Return the URL string source of the file. This 
             will be converted to a stream
        
        
            config: Configuration object
            date: Date of this source file
            isLiveMode: true if we're in live mode, false for backtesting 
             mode
        
            Returns: String URL of source file.
        """
        pass

    def IsSparseData(self):
        """
        IsSparseData(self: ConstituentsUniverseData) -> bool
        
            Indicates that the data set is expected to be 
             sparse
        
            Returns: True if the data set represented by this type is 
             expected to be sparse
        """
        pass

    def Reader(self, config, *__args):
        """
        Reader(self: ConstituentsUniverseData, config: SubscriptionDataConfig, line: str, date: DateTime, isLiveMode: bool) -> BaseData
        
            Reader converts each line of the data source into 
             BaseData objects. Each data type creates its own 
             factory method, and returns a new instance of the 
             object
                    each time it is called.
        
        
            config: Subscription data config setup object
            line: Line of the source document
            date: Date of the requested data
            isLiveMode: true if we're in live mode, false for backtesting 
             mode
        
            Returns: Instance of the T:BaseData object generated by 
             this line of the CSV
        """
        pass

    def RequiresMapping(self):
        """
        RequiresMapping(self: ConstituentsUniverseData) -> bool
        
            Indicates if there is support for mapping
            Returns: True indicates mapping should be used
        """
        pass

    def SupportedResolutions(self):
        """
        SupportedResolutions(self: ConstituentsUniverseData) -> List[Resolution]
        
            Gets the supported resolution for this data and 
             security type
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    EndTime = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The end time of this data.

Get: EndTime(self: ConstituentsUniverseData) -> DateTime

Set: EndTime(self: ConstituentsUniverseData) = value
"""



class UniverseDecorator(Universe, IDisposable):
    """
    Provides an implementation of QuantConnect.Data.UniverseSelection.Universe that redirects all calls to a
                wrapped (or decorated) universe. This provides scaffolding for other decorators who
                only need to override one or two methods.
    """
    def CanRemoveMember(self, utcTime, security):
        """
        CanRemoveMember(self: UniverseDecorator, utcTime: DateTime, security: Security) -> bool
        
            Determines whether or not the specified security 
             can be removed from
                    this universe. 
             This is useful to prevent securities from being 
             taken
                    out of a universe before the 
             algorithm has had enough time to make
                   
              decisions on the security
        
        
            utcTime: The current utc time
            security: The security to check if its ok to remove
            Returns: True if we can remove the security, false 
             otherwise
        """
        pass

    def CreateSecurity(self, symbol, algorithm, marketHoursDatabase, symbolPropertiesDatabase):
        """
        CreateSecurity(self: UniverseDecorator, symbol: Symbol, algorithm: IAlgorithm, marketHoursDatabase: MarketHoursDatabase, symbolPropertiesDatabase: SymbolPropertiesDatabase) -> Security
        
            Creates and configures a security for the 
             specified symbol
        
        
            symbol: The symbol of the security to be created
            algorithm: The algorithm instance
            marketHoursDatabase: The market hours database
            symbolPropertiesDatabase: The symbol properties database
            Returns: The newly initialized security object
        """
        pass

    def GetSubscriptionRequests(self, security, currentTimeUtc, maximumEndTimeUtc, subscriptionService=None):
        """
        GetSubscriptionRequests(self: UniverseDecorator, security: Security, currentTimeUtc: DateTime, maximumEndTimeUtc: DateTime) -> IEnumerable[SubscriptionRequest]
        
            Gets the subscription requests to be added for 
             the specified security
        
        
            security: The security to get subscriptions for
            currentTimeUtc: The current time in utc. This is the frontier 
             time of the algorithm
        
            maximumEndTimeUtc: The max end time
            Returns: All subscriptions required by this security
        GetSubscriptionRequests(self: UniverseDecorator, security: Security, currentTimeUtc: DateTime, maximumEndTimeUtc: DateTime, subscriptionService: ISubscriptionDataConfigService) -> IEnumerable[SubscriptionRequest]
        
            Gets the subscription requests to be added for 
             the specified security
        
        
            security: The security to get subscriptions for
            currentTimeUtc: The current time in utc. This is the frontier 
             time of the algorithm
        
            maximumEndTimeUtc: The max end time
            subscriptionService: Instance which implements 
             QuantConnect.Interfaces.ISubscriptionDataConfigSer
             vice interface
        
            Returns: All subscriptions required by this security
        """
        pass

    def SelectSymbols(self, utcTime, data):
        """
        SelectSymbols(self: UniverseDecorator, utcTime: DateTime, data: BaseDataCollection) -> IEnumerable[Symbol]
        
            Performs universe selection using the data 
             specified
        
        
            utcTime: The current utc time
            data: The symbols to remain in the universe
            Returns: The data that passes the filter
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *args): #cannot find CLR constructor
        """ __new__(cls: type, universe: Universe) """
        pass

    Securities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the internal security collection used to define membership in this universe

Get: Securities(self: UniverseDecorator) -> ConcurrentDictionary[Symbol, Member]

"""

    UniverseSettings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the settings used for subscriptions added for this universe

Get: UniverseSettings(self: UniverseDecorator) -> UniverseSettings

"""


    Universe = None


class SelectSymbolsUniverseDecorator(UniverseDecorator, IDisposable):
    """
    Provides a univese decoration that replaces the implementation of QuantConnect.Data.UniverseSelection.SelectSymbolsUniverseDecorator.SelectSymbols(System.DateTime,QuantConnect.Data.UniverseSelection.BaseDataCollection)
    
    SelectSymbolsUniverseDecorator(universe: Universe, selectSymbols: SelectSymbolsDelegate)
    """
    def SelectSymbols(self, utcTime, data):
        """
        SelectSymbols(self: SelectSymbolsUniverseDecorator, utcTime: DateTime, data: BaseDataCollection) -> IEnumerable[Symbol]
        
            Performs universe selection using the data 
             specified
        
        
            utcTime: The current utc time
            data: The symbols to remain in the universe
            Returns: The data that passes the filter
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, universe, selectSymbols):
        """ __new__(cls: type, universe: Universe, selectSymbols: SelectSymbolsDelegate) """
        pass

    SelectSymbolsDelegate = None
    Universe = None


class FineFundamentalFilteredUniverse(SelectSymbolsUniverseDecorator, IDisposable):
    """
    Provides a universe that can be filtered with a QuantConnect.Data.Fundamental.FineFundamental selection function
    
    FineFundamentalFilteredUniverse(universe: Universe, fineSelector: Func[IEnumerable[FineFundamental], IEnumerable[Symbol]])
    FineFundamentalFilteredUniverse(universe: Universe, fineSelector: PyObject)
    """
    def SetSecurityInitializer(self, securityInitializer):
        """
        SetSecurityInitializer(self: FineFundamentalFilteredUniverse, securityInitializer: ISecurityInitializer)
            Sets the security initializer, used to 
             initialize/configure securities after creation
        
        
            securityInitializer: The security initializer
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, universe, fineSelector):
        """
        __new__(cls: type, universe: Universe, fineSelector: Func[IEnumerable[FineFundamental], IEnumerable[Symbol]])
        __new__(cls: type, universe: Universe, fineSelector: PyObject)
        """
        pass

    FineFundamentalUniverse = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The universe that will be used for fine universe selection

Get: FineFundamentalUniverse(self: FineFundamentalFilteredUniverse) -> FineFundamentalUniverse

"""


    Universe = None


class FineFundamentalUniverse(Universe, IDisposable):
    """
    Defines a universe that reads fine us equity data
    
    FineFundamentalUniverse(universeSettings: UniverseSettings, securityInitializer: ISecurityInitializer, selector: Func[IEnumerable[FineFundamental], IEnumerable[Symbol]])
    FineFundamentalUniverse(symbol: Symbol, universeSettings: UniverseSettings, securityInitializer: ISecurityInitializer, selector: Func[IEnumerable[FineFundamental], IEnumerable[Symbol]])
    """
    @staticmethod
    def CreateConfiguration(symbol):
        """
        CreateConfiguration(symbol: Symbol) -> SubscriptionDataConfig
        
            Creates a 
             QuantConnect.Data.Fundamental.FineFundamental 
             subscription configuration for the US-equity 
             market
        
        
            symbol: The symbol used in the returned configuration
            Returns: A fine fundamental subscription configuration 
             with the specified symbol
        """
        pass

    def SelectSymbols(self, utcTime, data):
        """
        SelectSymbols(self: FineFundamentalUniverse, utcTime: DateTime, data: BaseDataCollection) -> IEnumerable[Symbol]
        
            Performs universe selection using the data 
             specified
        
        
            utcTime: The current utc time
            data: The symbols to remain in the universe
            Returns: The data that passes the filter
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, universeSettings: UniverseSettings, securityInitializer: ISecurityInitializer, selector: Func[IEnumerable[FineFundamental], IEnumerable[Symbol]])
        __new__(cls: type, symbol: Symbol, universeSettings: UniverseSettings, securityInitializer: ISecurityInitializer, selector: Func[IEnumerable[FineFundamental], IEnumerable[Symbol]])
        """
        pass

    UniverseSettings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the settings used for subscriptons added for this universe

Get: UniverseSettings(self: FineFundamentalUniverse) -> UniverseSettings

"""



class FuturesChainUniverse(Universe, IDisposable):
    """
    Defines a universe for a single futures chain
    
    FuturesChainUniverse(future: Future, universeSettings: UniverseSettings)
    FuturesChainUniverse(future: Future, universeSettings: UniverseSettings, subscriptionManager: SubscriptionManager, securityInitializer: ISecurityInitializer)
    """
    def CanRemoveMember(self, utcTime, security):
        """
        CanRemoveMember(self: FuturesChainUniverse, utcTime: DateTime, security: Security) -> bool
        
            Determines whether or not the specified security 
             can be removed from
                    this universe. 
             This is useful to prevent securities from being 
             taken
                    out of a universe before the 
             algorithm has had enough time to make
                   
              decisions on the security
        
        
            utcTime: The current utc time
            security: The security to check if its ok to remove
            Returns: True if we can remove the security, false 
             otherwise
        """
        pass

    def SelectSymbols(self, utcTime, data):
        """
        SelectSymbols(self: FuturesChainUniverse, utcTime: DateTime, data: BaseDataCollection) -> IEnumerable[Symbol]
        
            Performs universe selection using the data 
             specified
        
        
            utcTime: The current utc time
            data: The symbols to remain in the universe
            Returns: The data that passes the filter
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, future, universeSettings, subscriptionManager=None, securityInitializer=None):
        """
        __new__(cls: type, future: Future, universeSettings: UniverseSettings)
        __new__(cls: type, future: Future, universeSettings: UniverseSettings, subscriptionManager: SubscriptionManager, securityInitializer: ISecurityInitializer)
        """
        pass

    Future = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The canonical future chain security

Get: Future(self: FuturesChainUniverse) -> Future

"""

    UniverseSettings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the settings used for subscriptons added for this universe

Get: UniverseSettings(self: FuturesChainUniverse) -> UniverseSettings

"""



class FuturesChainUniverseDataCollection(BaseDataCollection, IBaseData):
    """
    Defines the universe selection data type for QuantConnect.Data.UniverseSelection.FuturesChainUniverse
    
    FuturesChainUniverseDataCollection()
    FuturesChainUniverseDataCollection(time: DateTime, symbol: Symbol, data: List[BaseData])
    FuturesChainUniverseDataCollection(time: DateTime, endTime: DateTime, symbol: Symbol, data: List[BaseData])
    """
    def Clone(self, fillForward=None):
        """
        Clone(self: FuturesChainUniverseDataCollection) -> BaseData
        
            Return a new instance clone of this object, used 
             in fill forward
        
            Returns: A clone of the current object
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, time=None, *__args):
        """
        __new__(cls: type)
        __new__(cls: type, time: DateTime, symbol: Symbol, data: List[BaseData])
        __new__(cls: type, time: DateTime, endTime: DateTime, symbol: Symbol, data: List[BaseData])
        """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    FilteredContracts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the contracts selected by the universe

Get: FilteredContracts(self: FuturesChainUniverseDataCollection) -> HashSet[Symbol]

Set: FilteredContracts(self: FuturesChainUniverseDataCollection) = value
"""



class GetSubscriptionRequestsUniverseDecorator(UniverseDecorator, IDisposable):
    """
    Provides a universe decoration that replaces the implementation of QuantConnect.Data.UniverseSelection.GetSubscriptionRequestsUniverseDecorator.GetSubscriptionRequests(QuantConnect.Securities.Security,System.DateTime,System.DateTime)
    
    GetSubscriptionRequestsUniverseDecorator(universe: Universe, getRequests: GetSubscriptionRequestsDelegate)
    """
    def GetSubscriptionRequests(self, security, currentTimeUtc, maximumEndTimeUtc, subscriptionService=None):
        """
        GetSubscriptionRequests(self: GetSubscriptionRequestsUniverseDecorator, security: Security, currentTimeUtc: DateTime, maximumEndTimeUtc: DateTime) -> IEnumerable[SubscriptionRequest]
        
            Gets the subscription requests to be added for 
             the specified security
        
        
            security: The security to get subscriptions for
            currentTimeUtc: The current time in utc. This is the frontier 
             time of the algorithm
        
            maximumEndTimeUtc: The max end time
            Returns: All subscriptions required by this security
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, universe, getRequests):
        """ __new__(cls: type, universe: Universe, getRequests: GetSubscriptionRequestsDelegate) """
        pass

    GetSubscriptionRequestsDelegate = None
    Universe = None


class ITimeTriggeredUniverse:
    """
    A universe implementing this interface will NOT use it's SubscriptionDataConfig to generate data
                that is used to 'pulse' the universe selection function -- instead, the times output by
                GetTriggerTimes are used to 'pulse' the universe selection function WITHOUT data.
    """
    def GetTriggerTimes(self, startTimeUtc, endTimeUtc, marketHoursDatabase):
        """
        GetTriggerTimes(self: ITimeTriggeredUniverse, startTimeUtc: DateTime, endTimeUtc: DateTime, marketHoursDatabase: MarketHoursDatabase) -> IEnumerable[DateTime]
        
            Returns an enumerator that defines when this user 
             defined universe will be invoked
        
            Returns: An enumerator of DateTime that defines when this 
             universe will be invoked
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class OptionChainUniverse(Universe, IDisposable):
    """
    Defines a universe for a single option chain
    
    OptionChainUniverse(option: Option, universeSettings: UniverseSettings, liveMode: bool)
    OptionChainUniverse(option: Option, universeSettings: UniverseSettings, securityInitializer: ISecurityInitializer, liveMode: bool)
    """
    def CanRemoveMember(self, utcTime, security):
        """
        CanRemoveMember(self: OptionChainUniverse, utcTime: DateTime, security: Security) -> bool
        
            Determines whether or not the specified security 
             can be removed from
                    this universe. 
             This is useful to prevent securities from being 
             taken
                    out of a universe before the 
             algorithm has had enough time to make
                   
              decisions on the security
        
        
            utcTime: The current utc time
            security: The security to check if its ok to remove
            Returns: True if we can remove the security, false 
             otherwise
        """
        pass

    def GetSubscriptionRequests(self, security, currentTimeUtc, maximumEndTimeUtc, subscriptionService=None):
        """
        GetSubscriptionRequests(self: OptionChainUniverse, security: Security, currentTimeUtc: DateTime, maximumEndTimeUtc: DateTime, subscriptionService: ISubscriptionDataConfigService) -> IEnumerable[SubscriptionRequest]
        
            Gets the subscription requests to be added for 
             the specified security
        
        
            security: The security to get subscriptions for
            currentTimeUtc: The current time in utc. This is the frontier 
             time of the algorithm
        
            maximumEndTimeUtc: The max end time
            subscriptionService: Instance which implements 
             QuantConnect.Interfaces.ISubscriptionDataConfigSer
             vice interface
        
            Returns: All subscriptions required by this security
        """
        pass

    def SelectSymbols(self, utcTime, data):
        """
        SelectSymbols(self: OptionChainUniverse, utcTime: DateTime, data: BaseDataCollection) -> IEnumerable[Symbol]
        
            Performs universe selection using the data 
             specified
        
        
            utcTime: The current utc time
            data: The symbols to remain in the universe
            Returns: The data that passes the filter
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, option, universeSettings, *__args):
        """
        __new__(cls: type, option: Option, universeSettings: UniverseSettings, liveMode: bool)
        __new__(cls: type, option: Option, universeSettings: UniverseSettings, securityInitializer: ISecurityInitializer, liveMode: bool)
        """
        pass

    Option = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The canonical option chain security

Get: Option(self: OptionChainUniverse) -> Option

"""

    UniverseSettings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the settings used for subscriptons added for this universe

Get: UniverseSettings(self: OptionChainUniverse) -> UniverseSettings

"""



class OptionChainUniverseDataCollection(BaseDataCollection, IBaseData):
    """
    Defines the universe selection data type for QuantConnect.Data.UniverseSelection.OptionChainUniverse
    
    OptionChainUniverseDataCollection()
    OptionChainUniverseDataCollection(time: DateTime, symbol: Symbol, data: List[BaseData], underlying: BaseData)
    OptionChainUniverseDataCollection(time: DateTime, endTime: DateTime, symbol: Symbol, data: List[BaseData], underlying: BaseData)
    """
    def Clone(self, fillForward=None):
        """
        Clone(self: OptionChainUniverseDataCollection) -> BaseData
        
            Return a new instance clone of this object, used 
             in fill forward
        
            Returns: A clone of the current object
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, time=None, *__args):
        """
        __new__(cls: type)
        __new__(cls: type, time: DateTime, symbol: Symbol, data: List[BaseData], underlying: BaseData)
        __new__(cls: type, time: DateTime, endTime: DateTime, symbol: Symbol, data: List[BaseData], underlying: BaseData)
        """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    FilteredContracts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the contracts selected by the universe

Get: FilteredContracts(self: OptionChainUniverseDataCollection) -> HashSet[Symbol]

Set: FilteredContracts(self: OptionChainUniverseDataCollection) = value
"""

    Underlying = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The option chain's underlying price data

Get: Underlying(self: OptionChainUniverseDataCollection) -> BaseData

Set: Underlying(self: OptionChainUniverseDataCollection) = value
"""



class ScheduledUniverse(Universe, IDisposable, ITimeTriggeredUniverse):
    """
    Defines a user that is fired based on a specified QuantConnect.Scheduling.IDateRule and QuantConnect.Scheduling.ITimeRule
    
    ScheduledUniverse(timeZone: DateTimeZone, dateRule: IDateRule, timeRule: ITimeRule, selector: Func[DateTime, IEnumerable[Symbol]], settings: UniverseSettings, securityInitializer: ISecurityInitializer)
    ScheduledUniverse(dateRule: IDateRule, timeRule: ITimeRule, selector: Func[DateTime, IEnumerable[Symbol]], settings: UniverseSettings, securityInitializer: ISecurityInitializer)
    ScheduledUniverse(timeZone: DateTimeZone, dateRule: IDateRule, timeRule: ITimeRule, selector: PyObject, settings: UniverseSettings, securityInitializer: ISecurityInitializer)
    ScheduledUniverse(dateRule: IDateRule, timeRule: ITimeRule, selector: PyObject, settings: UniverseSettings, securityInitializer: ISecurityInitializer)
    """
    def GetTriggerTimes(self, startTimeUtc, endTimeUtc, marketHoursDatabase):
        """
        GetTriggerTimes(self: ScheduledUniverse, startTimeUtc: DateTime, endTimeUtc: DateTime, marketHoursDatabase: MarketHoursDatabase) -> IEnumerable[DateTime]
        
            Returns an enumerator that defines when this user 
             defined universe will be invoked
        
            Returns: An enumerator of DateTime that defines when this 
             universe will be invoked
        """
        pass

    def SelectSymbols(self, utcTime, data):
        """
        SelectSymbols(self: ScheduledUniverse, utcTime: DateTime, data: BaseDataCollection) -> IEnumerable[Symbol]
        
            Performs universe selection using the data 
             specified
        
        
            utcTime: The current utc time
            data: The symbols to remain in the universe
            Returns: The data that passes the filter
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, timeZone: DateTimeZone, dateRule: IDateRule, timeRule: ITimeRule, selector: Func[DateTime, IEnumerable[Symbol]], settings: UniverseSettings, securityInitializer: ISecurityInitializer)
        __new__(cls: type, dateRule: IDateRule, timeRule: ITimeRule, selector: Func[DateTime, IEnumerable[Symbol]], settings: UniverseSettings, securityInitializer: ISecurityInitializer)
        __new__(cls: type, timeZone: DateTimeZone, dateRule: IDateRule, timeRule: ITimeRule, selector: PyObject, settings: UniverseSettings, securityInitializer: ISecurityInitializer)
        __new__(cls: type, dateRule: IDateRule, timeRule: ITimeRule, selector: PyObject, settings: UniverseSettings, securityInitializer: ISecurityInitializer)
        """
        pass

    UniverseSettings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the settings used for subscriptons added for this universe

Get: UniverseSettings(self: ScheduledUniverse) -> UniverseSettings

"""



class SecurityChanges(object):
    """
    Defines the additions and subtractions to the algorithm's security subscriptions
    
    SecurityChanges(addedSecurities: IEnumerable[Security], removedSecurities: IEnumerable[Security])
    SecurityChanges(changes: SecurityChanges)
    """
    @staticmethod
    def Added(securities):
        """
        Added(*securities: Array[Security]) -> SecurityChanges
        
            Returns a new instance of 
             QuantConnect.Data.UniverseSelection.SecurityChange
             s with the specified securities marked as added
        
        
            securities: The added securities
            Returns: A new security changes instance with the 
             specified securities marked as added
        """
        pass

    @staticmethod
    def Removed(securities):
        """
        Removed(*securities: Array[Security]) -> SecurityChanges
        
            Returns a new instance of 
             QuantConnect.Data.UniverseSelection.SecurityChange
             s with the specified securities marked as removed
        
        
            securities: The removed securities
            Returns: A new security changes instance with the 
             specified securities marked as removed
        """
        pass

    def ToString(self):
        """
        ToString(self: SecurityChanges) -> str
        
            Returns a string that represents the current 
             object.
        
            Returns: A string that represents the current object.
        """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, addedSecurities: IEnumerable[Security], removedSecurities: IEnumerable[Security])
        __new__(cls: type, changes: SecurityChanges)
        """
        pass

    def __radd__(self, *args): #cannot find CLR method
        """
        __radd__(left: SecurityChanges, right: SecurityChanges) -> SecurityChanges
        
            Combines the results of two 
             QuantConnect.Data.UniverseSelection.SecurityChange
             s
        
        
            left: The left side of the operand
            right: The right side of the operand
            Returns: Adds the additions together and removes any 
             removals found in the additions, that is, 
             additions take precendence
        """
        pass

    AddedSecurities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the symbols that were added by universe selection

Get: AddedSecurities(self: SecurityChanges) -> IReadOnlyList[Security]

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the total count of added and removed securities

Get: Count(self: SecurityChanges) -> int

"""

    FilterCustomSecurities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True will filter out custom securities from the
            QuantConnect.Data.UniverseSelection.SecurityChanges.AddedSecurities and QuantConnect.Data.UniverseSelection.SecurityChanges.RemovedSecurities properties

Get: FilterCustomSecurities(self: SecurityChanges) -> bool

Set: FilterCustomSecurities(self: SecurityChanges) = value
"""

    RemovedSecurities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the symbols that were removed by universe selection. This list may
            include symbols that were removed, but are still receiving data due to
            existing holdings or open orders

Get: RemovedSecurities(self: SecurityChanges) -> IReadOnlyList[Security]

"""


    None = None


class SubscriptionRequest(object):
    """
    Defines the parameters required to add a subscription to a data feed.
    
    SubscriptionRequest(isUniverseSubscription: bool, universe: Universe, security: Security, configuration: SubscriptionDataConfig, startTimeUtc: DateTime, endTimeUtc: DateTime)
    SubscriptionRequest(template: SubscriptionRequest, isUniverseSubscription: Nullable[bool], universe: Universe, security: Security, configuration: SubscriptionDataConfig, startTimeUtc: Nullable[DateTime], endTimeUtc: Nullable[DateTime])
    """
    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, isUniverseSubscription: bool, universe: Universe, security: Security, configuration: SubscriptionDataConfig, startTimeUtc: DateTime, endTimeUtc: DateTime)
        __new__(cls: type, template: SubscriptionRequest, isUniverseSubscription: Nullable[bool], universe: Universe, security: Security, configuration: SubscriptionDataConfig, startTimeUtc: Nullable[DateTime], endTimeUtc: Nullable[DateTime])
        """
        pass

    Configuration = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the subscription configuration. This defines how/where to read the data.

Get: Configuration(self: SubscriptionRequest) -> SubscriptionDataConfig

"""

    EndTimeLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the QuantConnect.Data.UniverseSelection.SubscriptionRequest.EndTimeUtc in the security's exchange time zone

Get: EndTimeLocal(self: SubscriptionRequest) -> DateTime

"""

    EndTimeUtc = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the end of the requested time interval in UTC

Get: EndTimeUtc(self: SubscriptionRequest) -> DateTime

"""

    IsUniverseSubscription = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets true if the subscription is a universe

Get: IsUniverseSubscription(self: SubscriptionRequest) -> bool

"""

    Security = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the security. This is the destination of data for non-internal subscriptions.

Get: Security(self: SubscriptionRequest) -> Security

"""

    StartTimeLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the QuantConnect.Data.UniverseSelection.SubscriptionRequest.StartTimeUtc in the security's exchange time zone

Get: StartTimeLocal(self: SubscriptionRequest) -> DateTime

"""

    StartTimeUtc = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the beginning of the requested time interval in UTC

Get: StartTimeUtc(self: SubscriptionRequest) -> DateTime

"""

    TradableDays = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the tradable days specified by this request, in the security's data time zone

Get: TradableDays(self: SubscriptionRequest) -> IEnumerable[DateTime]

"""

    Universe = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the universe this subscription resides in

Get: Universe(self: SubscriptionRequest) -> Universe

"""



class UniverseExtensions(object):
    """ Provides extension methods for the QuantConnect.Data.UniverseSelection.Universe class """
    @staticmethod
    def ChainedTo(first, second, configurationPerSymbol):
        """
        ChainedTo(first: Universe, second: Universe, configurationPerSymbol: bool) -> Universe
        
            Creates a new universe that logically is the 
             result of wiring the two universes together such 
             that
                    the first will produce 
             subscriptions for the second and the second will 
             only select on data that has
                    passed 
             the first.
                    
                    NOTE: The 
             first and second universe instances provided
            
                     to this method should not be manually 
             added to the algorithm.
        
        
            first: The first universe in this 'chain'
            second: The second universe in this 'chain'
            configurationPerSymbol: True if each symbol as its own configuration, 
             false otherwise
        
            Returns: A new universe that can be added to the algorithm 
             that represents invoking the first universe
             
                    and then the second universe using the 
             outputs of the first.
        """
        pass

    @staticmethod
    def PrefilterUsing(second, first):
        """
        PrefilterUsing(second: Universe, first: Universe) -> Universe
        
            Creates a new universe that restricts the 
             universe selection data to symbols that passed 
             the
                    first universe's selection 
             critera
                    
                    NOTE: The 
             second universe instance provided to this method 
             should not be manually
                    added to the 
             algorithm. The first should still be manually 
             (assuming no other changes).
        
        
            second: The universe to be filtere
            first: The universe providing the set of symbols used 
             for filtered
        
            Returns: A new universe that can be added to the algorithm 
             that represents invoking the second
                    
             using the selections from the first as a filter.
        """
        pass

    __all__ = [
        'ChainedTo',
        'PrefilterUsing',
    ]


class UniversePythonWrapper(Universe, IDisposable):
    """
    Provides an implementation of QuantConnect.Data.UniverseSelection.Universe that wraps a Python.Runtime.PyObject object
    
    UniversePythonWrapper(universe: PyObject)
    """
    def GetSubscriptionRequests(self, security, currentTimeUtc, maximumEndTimeUtc, subscriptionService=None):
        """
        GetSubscriptionRequests(self: UniversePythonWrapper, security: Security, currentTimeUtc: DateTime, maximumEndTimeUtc: DateTime, subscriptionService: ISubscriptionDataConfigService) -> IEnumerable[SubscriptionRequest]
        
            Gets the subscription requests to be added for 
             the specified security
        
        
            security: The security to get subscriptions for
            currentTimeUtc: The current time in utc. This is the frontier 
             time of the algorithm
        
            maximumEndTimeUtc: The max end time
            subscriptionService: Instance which implements 
             QuantConnect.Interfaces.ISubscriptionDataConfigSer
             vice interface
        
            Returns: All subscriptions required by this security
        """
        pass

    def SelectSymbols(self, utcTime, data):
        """
        SelectSymbols(self: UniversePythonWrapper, utcTime: DateTime, data: BaseDataCollection) -> IEnumerable[Symbol]
        
            Performs universe selection using the data 
             specified
        
        
            utcTime: The current utc time
            data: The symbols to remain in the universe
            Returns: The data that passes the filter
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, universe):
        """ __new__(cls: type, universe: PyObject) """
        pass

    Configuration = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the configuration used to get universe data

Get: Configuration(self: UniversePythonWrapper) -> SubscriptionDataConfig

"""

    DisposeRequested = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Flag indicating if disposal of this universe has been requested

Get: DisposeRequested(self: UniversePythonWrapper) -> bool

"""

    Securities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the internal security collection used to define membership in this universe

Get: Securities(self: UniversePythonWrapper) -> ConcurrentDictionary[Symbol, Member]

"""

    UniverseSettings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the settings used for subscriptions added for this universe

Get: UniverseSettings(self: UniversePythonWrapper) -> UniverseSettings

"""



class UniverseSettings(object):
    """
    Defines settings required when adding a subscription
    
    UniverseSettings(resolution: Resolution, leverage: Decimal, fillForward: bool, extendedMarketHours: bool, minimumTimeInUniverse: TimeSpan, dataNormalizationMode: DataNormalizationMode)
    """
    @staticmethod # known case of __new__
    def __new__(self, resolution, leverage, fillForward, extendedMarketHours, minimumTimeInUniverse, dataNormalizationMode):
        """ __new__(cls: type, resolution: Resolution, leverage: Decimal, fillForward: bool, extendedMarketHours: bool, minimumTimeInUniverse: TimeSpan, dataNormalizationMode: DataNormalizationMode) """
        pass

    DataNormalizationMode = None
    ExtendedMarketHours = None
    FillForward = None
    Leverage = None
    MinimumTimeInUniverse = None
    Resolution = None


class UserDefinedUniverse(Universe, IDisposable, INotifyCollectionChanged, ITimeTriggeredUniverse):
    """
    Represents the universe defined by the user's algorithm. This is
                the default universe where manually added securities live by
                market/security type. They can also be manually generated and
                can be configured to fire on certain interval and will always
                return the internal list of symbols.
    
    UserDefinedUniverse(configuration: SubscriptionDataConfig, universeSettings: UniverseSettings, securityInitializer: ISecurityInitializer, interval: TimeSpan, symbols: IEnumerable[Symbol])
    UserDefinedUniverse(configuration: SubscriptionDataConfig, universeSettings: UniverseSettings, securityInitializer: ISecurityInitializer, interval: TimeSpan, selector: Func[DateTime, IEnumerable[str]])
    UserDefinedUniverse(configuration: SubscriptionDataConfig, universeSettings: UniverseSettings, interval: TimeSpan, symbols: IEnumerable[Symbol])
    UserDefinedUniverse(configuration: SubscriptionDataConfig, universeSettings: UniverseSettings, interval: TimeSpan, selector: Func[DateTime, IEnumerable[str]])
    """
    def Add(self, *__args):
        """
        Add(self: UserDefinedUniverse, symbol: Symbol) -> bool
        
            Adds the specified QuantConnect.Symbol to this 
             universe
        
        
            symbol: The symbol to be added to this universe
            Returns: True if the symbol was added, false if it was 
             already present
        
        Add(self: UserDefinedUniverse, subscriptionDataConfig: SubscriptionDataConfig) -> bool
        
            Adds the specified 
             QuantConnect.Data.SubscriptionDataConfig to this 
             universe
        
        
            subscriptionDataConfig: The subscription data configuration to be added 
             to this universe
        
            Returns: True if the subscriptionDataConfig was added, 
             false if it was already present
        """
        pass

    @staticmethod
    def CreateSymbol(securityType, market):
        """
        CreateSymbol(securityType: SecurityType, market: str) -> Symbol
        
            Creates a user defined universe symbol
        
            securityType: The security
            market: The market
            Returns: A symbol for user defined universe of the 
             specified security type and market
        """
        pass

    def GetSubscriptionRequests(self, security, currentTimeUtc, maximumEndTimeUtc, subscriptionService=None):
        """
        GetSubscriptionRequests(self: UserDefinedUniverse, security: Security, currentTimeUtc: DateTime, maximumEndTimeUtc: DateTime, subscriptionService: ISubscriptionDataConfigService) -> IEnumerable[SubscriptionRequest]
        
            Gets the subscription requests to be added for 
             the specified security
        
        
            security: The security to get subscriptions for
            currentTimeUtc: The current time in utc. This is the frontier 
             time of the algorithm
        
            maximumEndTimeUtc: The max end time
            subscriptionService: Instance which implements 
             QuantConnect.Interfaces.ISubscriptionDataConfigSer
             vice interface
        
            Returns: All subscriptions required by this security
        """
        pass

    def GetTriggerTimes(self, startTimeUtc, endTimeUtc, marketHoursDatabase):
        """
        GetTriggerTimes(self: UserDefinedUniverse, startTimeUtc: DateTime, endTimeUtc: DateTime, marketHoursDatabase: MarketHoursDatabase) -> IEnumerable[DateTime]
        
            Returns an enumerator that defines when this user 
             defined universe will be invoked
        
            Returns: An enumerator of DateTime that defines when this 
             universe will be invoked
        """
        pass

    def OnCollectionChanged(self, *args): #cannot find CLR method
        """
        OnCollectionChanged(self: UserDefinedUniverse, e: NotifyCollectionChangedEventArgs)
            Event invocator for the 
             QuantConnect.Data.UniverseSelection.UserDefinedUni
             verse.CollectionChanged event
        
        
            e: The notify collection changed event arguments
        """
        pass

    def Remove(self, symbol):
        """
        Remove(self: UserDefinedUniverse, symbol: Symbol) -> bool
        
            Removes the specified QuantConnect.Symbol from 
             this universe
        
        
            symbol: The symbol to be removed
            Returns: True if the symbol was removed, false if the 
             symbol was not present
        """
        pass

    def SelectSymbols(self, utcTime, data):
        """
        SelectSymbols(self: UserDefinedUniverse, utcTime: DateTime, data: BaseDataCollection) -> IEnumerable[Symbol]
        
            Returns the symbols defined by the user for this 
             universe
        
        
            utcTime: The curren utc time
            data: The symbols to remain in the universe
            Returns: The data that passes the filter
        """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+yx.__add__(y) <==> x+y """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, configuration, universeSettings, *__args):
        """
        __new__(cls: type, configuration: SubscriptionDataConfig, universeSettings: UniverseSettings, securityInitializer: ISecurityInitializer, interval: TimeSpan, symbols: IEnumerable[Symbol])
        __new__(cls: type, configuration: SubscriptionDataConfig, universeSettings: UniverseSettings, securityInitializer: ISecurityInitializer, interval: TimeSpan, selector: Func[DateTime, IEnumerable[str]])
        __new__(cls: type, configuration: SubscriptionDataConfig, universeSettings: UniverseSettings, interval: TimeSpan, symbols: IEnumerable[Symbol])
        __new__(cls: type, configuration: SubscriptionDataConfig, universeSettings: UniverseSettings, interval: TimeSpan, selector: Func[DateTime, IEnumerable[str]])
        """
        pass

    Interval = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the interval of this user defined universe

Get: Interval(self: UserDefinedUniverse) -> TimeSpan

"""

    UniverseSettings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the settings used for subscriptons added for this universe

Get: UniverseSettings(self: UserDefinedUniverse) -> UniverseSettings

"""


    CollectionChanged = None


