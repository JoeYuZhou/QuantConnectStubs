# encoding: utf-8
# module QuantConnect.Data.Custom.Intrinio calls itself Intrinio
# from QuantConnect.Common, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null
# by generator 1.145
# no doc
# no imports

# no functions
# classes

class IntrinioConfig(object):
    """ Auxiliary class to access all Intrinio API data. """
    @staticmethod
    def SetTimeIntervalBetweenCalls(timeSpan):
        """
        SetTimeIntervalBetweenCalls(timeSpan: TimeSpan)
            Sets the time interval between calls.
                   
              For more information, please refer to: 
             https://intrinio.com/documentation/api#limits
        
        
            timeSpan: Time interval between to consecutive calls.
        """
        pass

    @staticmethod
    def SetUserAndPassword(user, password):
        """
        SetUserAndPassword(user: str, password: str)
            Set the Intrinio API user and password.
        """
        pass

    IsInitialized = False
    Password = ''
    RateGate = None
    User = ''
    __all__ = [
        'SetTimeIntervalBetweenCalls',
        'SetUserAndPassword',
    ]


class IntrinioDataTransformation(Enum, IComparable, IFormattable, IConvertible):
    """
    TRanformation available for the Economic data.
    
    enum IntrinioDataTransformation, values: AnnualyCCRoc (3), AnnualyPc (8), AnnualyRoc (1), CCRoc (4), CompoundedAnnualRoc (2), Level (5), Ln (6), Pc (7), Roc (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    AnnualyCCRoc = None
    AnnualyPc = None
    AnnualyRoc = None
    CCRoc = None
    CompoundedAnnualRoc = None
    Level = None
    Ln = None
    Pc = None
    Roc = None
    value__ = None


class IntrinioEconomicData(BaseData, IBaseData):
    """
    Access the massive repository of economic data from the Federal Reserve Economic Data system via the Intrinio API.
    
    IntrinioEconomicData()
    IntrinioEconomicData(dataTransformation: IntrinioDataTransformation)
    """
    def GetSource(self, config, date, *__args):
        """
        GetSource(self: IntrinioEconomicData, config: SubscriptionDataConfig, date: DateTime, isLiveMode: bool) -> SubscriptionDataSource
        
            Return the URL string source of the file. This 
             will be converted to a stream
        
        
            config: Configuration object
            date: Date of this source file
            isLiveMode: true if we're in live mode, false for backtesting 
             mode
        
            Returns: String URL of source file.
        """
        pass

    def Reader(self, config, *__args):
        """
        Reader(self: IntrinioEconomicData, config: SubscriptionDataConfig, line: str, date: DateTime, isLiveMode: bool) -> BaseData
        
            Reader converts each line of the data source into 
             BaseData objects. Each data type creates its own 
             factory method,
                        and returns a 
             new instance of the object
                        each 
             time it is called. The returned object is assumed 
             to be time stamped in the 
             config.ExchangeTimeZone.
        
        
            config: Subscription data config setup object
            line: Line of the source document
            date: Date of the requested data
            isLiveMode: true if we're in live mode, false for backtesting 
             mode
        
            Returns: Instance of the T:BaseData object generated by 
             this line of the CSV
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, dataTransformation=None):
        """
        __new__(cls: type)
        __new__(cls: type, dataTransformation: IntrinioDataTransformation)
        """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass


class IntrinioEconomicDataSources(object):
    # no doc
    BofAMerrillLynch = None
    CBOE = None
    Commodities = None
    ExchangeRates = None
    Moodys = None
    TradeWeightedUsDollaIndex = None
    __all__ = [
        'BofAMerrillLynch',
        'CBOE',
        'Commodities',
        'ExchangeRates',
        'Moodys',
        'TradeWeightedUsDollaIndex',
    ]


