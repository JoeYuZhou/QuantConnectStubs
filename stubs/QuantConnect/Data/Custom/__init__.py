# encoding: utf-8
# module QuantConnect.Data.Custom calls itself Custom
# from QuantConnect.Common, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null
# by generator 1.145
# no doc
# no imports

# no functions
# classes

class FxcmVolume(BaseData, IBaseData):
    """
    FXCM Real FOREX Volume and Transaction data from its clients base, available for the following pairs:
                    - EURUSD, USDJPY, GBPUSD, USDCHF, EURCHF, AUDUSD, USDCAD,
                      NZDUSD, EURGBP, EURJPY, GBPJPY, EURAUD, EURCAD, AUDJPY
                    FXCM only provides support for FX symbols which produced over 110 million average daily volume (ADV) during 2013.
                    This limit is imposed to ensure we do not highlight low volume/low ticket symbols in addition to other financial
                    reporting concerns.
    
    FxcmVolume()
    """
    def GetSource(self, config, date, *__args):
        """
        GetSource(self: FxcmVolume, config: SubscriptionDataConfig, date: DateTime, isLiveMode: bool) -> SubscriptionDataSource
        
            Return the URL string source of the file. This 
             will be converted to a stream
        
        
            config: Configuration object
            date: Date of this source file
            isLiveMode: true if we're in live mode, false for backtesting 
             mode
        
            Returns: String URL of source file.
        """
        pass

    def Reader(self, config, *__args):
        """
        Reader(self: FxcmVolume, config: SubscriptionDataConfig, line: str, date: DateTime, isLiveMode: bool) -> BaseData
        
            Reader converts each line of the data source into 
             BaseData objects. Each data type creates its own 
             factory method,
                        and returns a 
             new instance of the object
                        each 
             time it is called. The returned object is assumed 
             to be time stamped in the 
             config.ExchangeTimeZone.
        
        
            config: Subscription data config setup object
            line: Line of the source document
            date: Date of the requested data
            isLiveMode: true if we're in live mode, false for backtesting 
             mode
        
            Returns: Instance of the T:BaseData object generated by 
             this line of the CSV
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Transactions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Sum of opening and closing Transactions for the entire time interval.

Get: Transactions(self: FxcmVolume) -> int

Set: Transactions(self: FxcmVolume) = value
"""

    Volume = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Sum of opening and closing Volume for the entire time interval.
                The volume measured in the QUOTE CURRENCY.

Get: Volume(self: FxcmVolume) -> Int64

Set: Volume(self: FxcmVolume) = value
"""



class NullData(BaseData, IBaseData):
    """
    Represents a custom data type that works as a heartbeat of data in live mode
    
    NullData()
    """
    def GetSource(self, config, date, *__args):
        """
        GetSource(self: NullData, config: SubscriptionDataConfig, date: DateTime, isLiveMode: bool) -> SubscriptionDataSource
        
            Return the URL string source of localhost as 
             placeholder,
                    since this custom data 
             class does not use any data.
        
        
            config: Configuration object
            date: Date of this source file
            isLiveMode: True if we're in live mode
            Returns: String URL of localhost
        """
        pass

    def Reader(self, config, *__args):
        """
        Reader(self: NullData, config: SubscriptionDataConfig, line: str, date: DateTime, isLiveMode: bool) -> BaseData
        
            Returns a new instance of the 
             QuantConnect.Data.Custom.NullData. Its Value 
             property is always 1
                    and the Time 
             property is the current date/time of the 
             exchange.
        
        
            config: Subscription data config setup object
            line: Line of the source document.
            date: Date of the requested data
            isLiveMode: True if we're in live mode
            Returns: Instance of QuantConnect.Data.Custom.NullData
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    EndTime = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The end time of this data. Some data covers spans (trade bars)
            and as such we want to know the entire time span covered

Get: EndTime(self: NullData) -> DateTime

Set: EndTime(self: NullData) = value
"""



class Quandl(DynamicData, IBaseData, IDynamicMetaObjectProvider):
    """
    Quandl Data Type - Import generic data from quandl, without needing to define Reader methods.
                This reads the headers of the data imported, and dynamically creates properties for the imported data.
    
    Quandl()
    """
    def GetSource(self, config, date, *__args):
        """
        GetSource(self: Quandl, config: SubscriptionDataConfig, date: DateTime, isLiveMode: bool) -> SubscriptionDataSource
        
            Quandl Source Locator: Using the Quandl V1 API 
             automatically set the URL for the dataset.
        
        
            config: Subscription configuration object
            date: Date of the data file we're looking for
            isLiveMode: true if we're in live mode, false for backtesting 
             mode
        
            Returns: STRING API Url for Quandl.
        """
        pass

    def Reader(self, config, *__args):
        """
        Reader(self: Quandl, config: SubscriptionDataConfig, line: str, date: DateTime, isLiveMode: bool) -> BaseData
        
            Generic Reader Implementation for Quandl Data.
        
            config: Subscription configuration
            line: CSV line of data from the souce
            date: Date of the requested line
            isLiveMode: true if we're in live mode, false for backtesting 
             mode
        """
        pass

    @staticmethod
    def SetAuthCode(authCode):
        """
        SetAuthCode(authCode: str)
            Set the auth code for the quandl set to the 
             QuantConnect auth code.
        """
        pass

    def __dir__(self, *args): #cannot find CLR method
        """ __dir__(self: IDynamicMetaObjectProvider) -> list """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self):
        """
        __new__(cls: type)
        __new__(cls: type, valueColumnName: str)
        """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    EndTime = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The end time of this data. Some data covers spans (trade bars) and as such we want
            to know the entire time span covered

Get: EndTime(self: Quandl) -> DateTime

Set: EndTime(self: Quandl) = value
"""

    Period = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a time span of one day

Get: Period(self: Quandl) -> TimeSpan

"""


    IsAuthCodeSet = False


class USEnergyAPI(BaseData, IBaseData):
    """
    US Energy Information Administration provides extensive data on energy usage, import, export,
                and forecasting across all US energy sectors.
                https://www.eia.gov/opendata/
    
    USEnergyAPI()
    """
    def DefaultResolution(self):
        """
        DefaultResolution(self: USEnergyAPI) -> Resolution
        
            Gets the default resolution for this data and 
             security type
        """
        pass

    def GetSource(self, config, date, *__args):
        """
        GetSource(self: USEnergyAPI, config: SubscriptionDataConfig, date: DateTime, isLiveMode: bool) -> SubscriptionDataSource
        
            Return the Subscription Data Source gained from 
             the URL
        
        
            config: Configuration object
            date: Date of this source file
            isLiveMode: true if we're in live mode, false for backtesting 
             mode
        
            Returns: Subscription Data Source.
        """
        pass

    def Reader(self, config, *__args):
        """
        Reader(self: USEnergyAPI, config: SubscriptionDataConfig, content: str, date: DateTime, isLiveMode: bool) -> BaseData
        
            Reader converts each line of the data source into 
             BaseData objects.
        
        
            config: Subscription data config setup object
            content: Content of the source document
            date: Date of the requested data
            isLiveMode: true if we're in live mode, false for backtesting 
             mode
        
            Returns: Collection of USEnergyAPI objects
        """
        pass

    @staticmethod
    def SetAuthCode(authCode):
        """
        SetAuthCode(authCode: str)
            Sets the EIA API token.
        
            authCode: The EIA API token
        """
        pass

    def SupportedResolutions(self):
        """
        SupportedResolutions(self: USEnergyAPI) -> List[Resolution]
        
            Gets the supported resolution for this data and 
             security type
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    EndTime = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Analysis period (see QuantConnect.Data.Custom.USEnergyAPI.EnergyDataPointCloseTime) plus a delay to make the data lag emit times realistic

Get: EndTime(self: USEnergyAPI) -> DateTime

Set: EndTime(self: USEnergyAPI) = value
"""

    EnergyDataPointCloseTime = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Represents the date/time when the analysis period stops

Get: EnergyDataPointCloseTime(self: USEnergyAPI) -> DateTime

Set: EnergyDataPointCloseTime(self: USEnergyAPI) = value
"""


    AuthCode = ''
    IsAuthCodeSet = False


# variables with complex values

