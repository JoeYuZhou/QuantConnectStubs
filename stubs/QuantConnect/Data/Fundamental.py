# encoding: utf-8
# module QuantConnect.Data.Fundamental calls itself Fundamental
# from QuantConnect.Common, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null
# by generator 1.145
# no doc
# no imports

# no functions
# classes
class BaseData(object):
    pass


class IBaseData(object):
    pass


class MultiPeriodField(object):
    """ Abstract base class for multi-period fields """

    def GetPeriodNames(self):
        """
        GetPeriodNames(self: MultiPeriodField) -> IEnumerable[str]



            Gets the list of available period names for the

             field



            Returns: The list of periods
        """
        pass

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: str) -> Decimal



            Gets the value of the field for the requested

             period





            period: The requested period

            Returns: The value for the period
        """
        pass

    def GetPeriodValues(self):
        """
        GetPeriodValues(self: MultiPeriodField) -> IReadOnlyDictionary[str, Decimal]



            Gets a dictionary of period names and values for

             the field



            Returns: The dictionary of period names and values
        """
        pass

    def HasPeriodValue(self, period):
        """
        HasPeriodValue(self: MultiPeriodField, period: str) -> bool



            Returns true if the field contains a value for

             the requested period





            period: The requested period
        """
        pass

    def HasValues(self):
        """
        HasValues(self: MultiPeriodField) -> bool



            Returns true if the field has at least one value

             for one period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: str, value: Decimal)

            Sets the value of the field for the specified

             period





            period: The period

            value: The value to be set
        """
        pass

    def ToString(self):
        """
        ToString(self: MultiPeriodField) -> str



            Returns a string that represents the current

             object.



            Returns: A string that represents the current object.
        """
        pass

    def UpdateValues(self, update):
        """
        UpdateValues(self: MultiPeriodField, update: MultiPeriodField)

            Applies updated values from update to this

             instance





            update: The next data update for this instance
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, *args):  # cannot find CLR constructor
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    HasValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns true if the field contains a value for the default period



Get: HasValue(self: MultiPeriodField) -> bool



"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the default value for the field



Get: Value(self: MultiPeriodField) -> Decimal



"""

    PeriodField = None
    Store = None


class AccountsPayableBalanceSheet(MultiPeriodField):
    """
    Any money that a company owes its suppliers for goods and services purchased on credit and is expected to pay within the next

                year or operating cycle.



    AccountsPayableBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: AccountsPayableBalanceSheet) -> Decimal



Set: NineMonths(self: AccountsPayableBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: AccountsPayableBalanceSheet) -> Decimal



Set: OneMonth(self: AccountsPayableBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: AccountsPayableBalanceSheet) -> Decimal



Set: SixMonths(self: AccountsPayableBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AccountsPayableBalanceSheet) -> Decimal



Set: ThreeMonths(self: AccountsPayableBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: AccountsPayableBalanceSheet) -> Decimal



Set: TwelveMonths(self: AccountsPayableBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: AccountsPayableBalanceSheet) -> Decimal



Set: TwoMonths(self: AccountsPayableBalanceSheet) = value

"""

    Store = None


class AccountsReceivableBalanceSheet(MultiPeriodField):
    """
    Accounts owed to a company by customers within a year as a result of exchanging goods or services on credit.



    AccountsReceivableBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: AccountsReceivableBalanceSheet) -> Decimal



Set: NineMonths(self: AccountsReceivableBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: AccountsReceivableBalanceSheet) -> Decimal



Set: OneMonth(self: AccountsReceivableBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: AccountsReceivableBalanceSheet) -> Decimal



Set: SixMonths(self: AccountsReceivableBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AccountsReceivableBalanceSheet) -> Decimal



Set: ThreeMonths(self: AccountsReceivableBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: AccountsReceivableBalanceSheet) -> Decimal



Set: TwelveMonths(self: AccountsReceivableBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: AccountsReceivableBalanceSheet) -> Decimal



Set: TwoMonths(self: AccountsReceivableBalanceSheet) = value

"""

    Store = None


class AccruedandDeferredIncomeBalanceSheet(MultiPeriodField):
    """
    Sum of accrued liabilities and deferred income (amount received in advance but the services are not provided in respect of

                amount).



    AccruedandDeferredIncomeBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AccruedandDeferredIncomeBalanceSheet) -> Decimal



Set: ThreeMonths(self: AccruedandDeferredIncomeBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: AccruedandDeferredIncomeBalanceSheet) -> Decimal



Set: TwelveMonths(self: AccruedandDeferredIncomeBalanceSheet) = value

"""

    Store = None


class AccruedandDeferredIncomeCurrentBalanceSheet(MultiPeriodField):
    """
    Sum of Accrued Liabilities and Deferred Income (amount received in advance but the services are not provided in respect of

                amount) due within 1 year.



    AccruedandDeferredIncomeCurrentBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AccruedandDeferredIncomeCurrentBalanceSheet) -> Decimal



Set: ThreeMonths(self: AccruedandDeferredIncomeCurrentBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: AccruedandDeferredIncomeCurrentBalanceSheet) -> Decimal



Set: TwelveMonths(self: AccruedandDeferredIncomeCurrentBalanceSheet) = value

"""

    Store = None


class AccruedandDeferredIncomeNonCurrentBalanceSheet(MultiPeriodField):
    """
    Sum of Accrued Liabilities and Deferred Income (amount received in advance but the services are not provided in respect of

                amount) due after 1 year.



    AccruedandDeferredIncomeNonCurrentBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AccruedandDeferredIncomeNonCurrentBalanceSheet) -> Decimal



Set: ThreeMonths(self: AccruedandDeferredIncomeNonCurrentBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: AccruedandDeferredIncomeNonCurrentBalanceSheet) -> Decimal



Set: TwelveMonths(self: AccruedandDeferredIncomeNonCurrentBalanceSheet) = value

"""

    Store = None


class AccruedInterestReceivableBalanceSheet(MultiPeriodField):
    """
    This account shows the amount of unpaid interest accrued to the date of purchase and included in the purchase price of securities

                purchased between interest dates.



    AccruedInterestReceivableBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: AccruedInterestReceivableBalanceSheet) -> Decimal



Set: NineMonths(self: AccruedInterestReceivableBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: AccruedInterestReceivableBalanceSheet) -> Decimal



Set: SixMonths(self: AccruedInterestReceivableBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AccruedInterestReceivableBalanceSheet) -> Decimal



Set: ThreeMonths(self: AccruedInterestReceivableBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: AccruedInterestReceivableBalanceSheet) -> Decimal



Set: TwelveMonths(self: AccruedInterestReceivableBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: AccruedInterestReceivableBalanceSheet) -> Decimal



Set: TwoMonths(self: AccruedInterestReceivableBalanceSheet) = value

"""

    Store = None


class AccruedInvestmentIncomeBalanceSheet(MultiPeriodField):
    """
    Interest, dividends, rents, ancillary and other revenues earned but not yet received by the entity on its investments.



    AccruedInvestmentIncomeBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: AccruedInvestmentIncomeBalanceSheet) -> Decimal



Set: NineMonths(self: AccruedInvestmentIncomeBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AccruedInvestmentIncomeBalanceSheet) -> Decimal



Set: ThreeMonths(self: AccruedInvestmentIncomeBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: AccruedInvestmentIncomeBalanceSheet) -> Decimal



Set: TwelveMonths(self: AccruedInvestmentIncomeBalanceSheet) = value

"""

    Store = None


class AccruedLiabilitiesTotalBalanceSheet(MultiPeriodField):
    """
    Liabilities which have occurred, but have not been paid or logged under accounts payable during an accounting PeriodAsByte. In other

                words, obligations for goods and services provided to a company for which invoices have not yet been received; on a Non-

                Differentiated Balance Sheet.



    AccruedLiabilitiesTotalBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AccruedLiabilitiesTotalBalanceSheet) -> Decimal



Set: ThreeMonths(self: AccruedLiabilitiesTotalBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: AccruedLiabilitiesTotalBalanceSheet) -> Decimal



Set: TwelveMonths(self: AccruedLiabilitiesTotalBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: AccruedLiabilitiesTotalBalanceSheet) -> Decimal



Set: TwoMonths(self: AccruedLiabilitiesTotalBalanceSheet) = value

"""

    Store = None


class AccumulatedDepreciationBalanceSheet(MultiPeriodField):
    """
    The cumulative amount of wear and tear or obsolescence charged against the fixed assets of a company.



    AccumulatedDepreciationBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: AccumulatedDepreciationBalanceSheet) -> Decimal



Set: NineMonths(self: AccumulatedDepreciationBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: AccumulatedDepreciationBalanceSheet) -> Decimal



Set: OneMonth(self: AccumulatedDepreciationBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: AccumulatedDepreciationBalanceSheet) -> Decimal



Set: SixMonths(self: AccumulatedDepreciationBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AccumulatedDepreciationBalanceSheet) -> Decimal



Set: ThreeMonths(self: AccumulatedDepreciationBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: AccumulatedDepreciationBalanceSheet) -> Decimal



Set: TwelveMonths(self: AccumulatedDepreciationBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: AccumulatedDepreciationBalanceSheet) -> Decimal



Set: TwoMonths(self: AccumulatedDepreciationBalanceSheet) = value

"""

    Store = None


class AdditionalPaidInCapitalBalanceSheet(MultiPeriodField):
    """
    Excess of issue price over par or stated value of the entity's capital stock and amounts received from other transactions involving

                the entity's stock or stockholders. Includes adjustments to additional paid in capital. There are two major categories of additional

                paid in capital: 1) Paid in capital in excess of par/stated value, which is the difference between the actual issue price of the shares

                and the shares' par/stated value. 2) Paid in capital from other transactions which includes treasury stock, retirement of stock, stock

                dividends recorded at market, lapse of stock purchase warrants, conversion of convertible bonds in excess of the par value of the

                stock, and any other additional capital from the company's own stock transactions.



    AdditionalPaidInCapitalBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: AdditionalPaidInCapitalBalanceSheet) -> Decimal



Set: NineMonths(self: AdditionalPaidInCapitalBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: AdditionalPaidInCapitalBalanceSheet) -> Decimal



Set: OneMonth(self: AdditionalPaidInCapitalBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: AdditionalPaidInCapitalBalanceSheet) -> Decimal



Set: SixMonths(self: AdditionalPaidInCapitalBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AdditionalPaidInCapitalBalanceSheet) -> Decimal



Set: ThreeMonths(self: AdditionalPaidInCapitalBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: AdditionalPaidInCapitalBalanceSheet) -> Decimal



Set: TwelveMonths(self: AdditionalPaidInCapitalBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: AdditionalPaidInCapitalBalanceSheet) -> Decimal



Set: TwoMonths(self: AdditionalPaidInCapitalBalanceSheet) = value

"""

    Store = None


class AdvanceFromFederalHomeLoanBanksBalanceSheet(MultiPeriodField):
    """
    This item is typically available for bank industry. It's the amount of borrowings as of the balance sheet date from the Federal Home

                Loan Bank, which are primarily used to cover shortages in the required reserve balance and liquidity shortages.



    AdvanceFromFederalHomeLoanBanksBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: AdvanceFromFederalHomeLoanBanksBalanceSheet) -> Decimal



Set: NineMonths(self: AdvanceFromFederalHomeLoanBanksBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: AdvanceFromFederalHomeLoanBanksBalanceSheet) -> Decimal



Set: SixMonths(self: AdvanceFromFederalHomeLoanBanksBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AdvanceFromFederalHomeLoanBanksBalanceSheet) -> Decimal



Set: ThreeMonths(self: AdvanceFromFederalHomeLoanBanksBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: AdvanceFromFederalHomeLoanBanksBalanceSheet) -> Decimal



Set: TwelveMonths(self: AdvanceFromFederalHomeLoanBanksBalanceSheet) = value

"""

    Store = None


class AdvancesfromCentralBanksBalanceSheet(MultiPeriodField):
    """
    Borrowings from the central bank, which are primarily used to cover shortages in the required reserve balance and liquidity

                shortages.



    AdvancesfromCentralBanksBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AdvancesfromCentralBanksBalanceSheet) -> Decimal



Set: ThreeMonths(self: AdvancesfromCentralBanksBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: AdvancesfromCentralBanksBalanceSheet) -> Decimal



Set: TwelveMonths(self: AdvancesfromCentralBanksBalanceSheet) = value

"""

    Store = None


class AllowanceForDoubtfulAccountsReceivableBalanceSheet(MultiPeriodField):
    """
    An Allowance for Doubtful Accounts measures receivables recorded but not expected to be collected.



    AllowanceForDoubtfulAccountsReceivableBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AllowanceForDoubtfulAccountsReceivableBalanceSheet) -> Decimal



Set: ThreeMonths(self: AllowanceForDoubtfulAccountsReceivableBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: AllowanceForDoubtfulAccountsReceivableBalanceSheet) -> Decimal



Set: TwelveMonths(self: AllowanceForDoubtfulAccountsReceivableBalanceSheet) = value

"""

    Store = None


class AllowanceForLoansAndLeaseLossesBalanceSheet(MultiPeriodField):
    """
    A contra account sets aside as an allowance for bad loans (e.g. customer defaults).



    AllowanceForLoansAndLeaseLossesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: AllowanceForLoansAndLeaseLossesBalanceSheet) -> Decimal



Set: NineMonths(self: AllowanceForLoansAndLeaseLossesBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: AllowanceForLoansAndLeaseLossesBalanceSheet) -> Decimal



Set: SixMonths(self: AllowanceForLoansAndLeaseLossesBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AllowanceForLoansAndLeaseLossesBalanceSheet) -> Decimal



Set: ThreeMonths(self: AllowanceForLoansAndLeaseLossesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: AllowanceForLoansAndLeaseLossesBalanceSheet) -> Decimal



Set: TwelveMonths(self: AllowanceForLoansAndLeaseLossesBalanceSheet) = value

"""

    Store = None


class AllowanceForNotesReceivableBalanceSheet(MultiPeriodField):
    """
    This item is typically available for bank industry. It represents a provision relating to a written agreement to receive money  with the

                terms of the note (at a specified future date(s) within one year from the reporting date (or the normal operating cycle, whichever is

                longer), consisting of principal as well as any accrued interest) for the portion that is expected to be uncollectible.



    AllowanceForNotesReceivableBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AllowanceForNotesReceivableBalanceSheet) -> Decimal



Set: ThreeMonths(self: AllowanceForNotesReceivableBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: AllowanceForNotesReceivableBalanceSheet) -> Decimal



Set: TwelveMonths(self: AllowanceForNotesReceivableBalanceSheet) = value

"""

    Store = None


class AllTaxesPaidCashFlowStatement(MultiPeriodField):
    """
    Cash paid to tax authorities in operating cash flow, using the direct method



    AllTaxesPaidCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: AllTaxesPaidCashFlowStatement) -> Decimal



Set: NineMonths(self: AllTaxesPaidCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: AllTaxesPaidCashFlowStatement) -> Decimal



Set: OneMonth(self: AllTaxesPaidCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: AllTaxesPaidCashFlowStatement) -> Decimal



Set: SixMonths(self: AllTaxesPaidCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AllTaxesPaidCashFlowStatement) -> Decimal



Set: ThreeMonths(self: AllTaxesPaidCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: AllTaxesPaidCashFlowStatement) -> Decimal



Set: TwelveMonths(self: AllTaxesPaidCashFlowStatement) = value

"""

    Store = None


class AmortizationCashFlowStatement(MultiPeriodField):
    """
    The systematic and rational apportionment of the acquisition cost of intangible operational assets to future periods in which the benefits

                contribute to revenue. This field is to include Amortization and any variation where Amortization is the first account listed in the line item,

                excluding Amortization of Intangibles.



    AmortizationCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: AmortizationCashFlowStatement) -> Decimal



Set: NineMonths(self: AmortizationCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: AmortizationCashFlowStatement) -> Decimal



Set: OneMonth(self: AmortizationCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: AmortizationCashFlowStatement) -> Decimal



Set: SixMonths(self: AmortizationCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AmortizationCashFlowStatement) -> Decimal



Set: ThreeMonths(self: AmortizationCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: AmortizationCashFlowStatement) -> Decimal



Set: TwelveMonths(self: AmortizationCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: AmortizationCashFlowStatement) -> Decimal



Set: TwoMonths(self: AmortizationCashFlowStatement) = value

"""

    Store = None


class AmortizationIncomeStatement(MultiPeriodField):
    """
    The non-cash expense recognized on intangible assets over the benefit period of the asset.



    AmortizationIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: AmortizationIncomeStatement) -> Decimal



Set: NineMonths(self: AmortizationIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: AmortizationIncomeStatement) -> Decimal



Set: OneMonth(self: AmortizationIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: AmortizationIncomeStatement) -> Decimal



Set: SixMonths(self: AmortizationIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AmortizationIncomeStatement) -> Decimal



Set: ThreeMonths(self: AmortizationIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: AmortizationIncomeStatement) -> Decimal



Set: TwelveMonths(self: AmortizationIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: AmortizationIncomeStatement) -> Decimal



Set: TwoMonths(self: AmortizationIncomeStatement) = value

"""

    Store = None


class AmortizationOfFinancingCostsAndDiscountsCashFlowStatement(MultiPeriodField):
    """
    The component of interest expense representing the non-cash expenses charged against earnings in the period to allocate debt

                discount and premium, and the costs to issue debt and obtain financing over the related debt instruments. This item is usually only

                available for bank industry.



    AmortizationOfFinancingCostsAndDiscountsCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: AmortizationOfFinancingCostsAndDiscountsCashFlowStatement) -> Decimal



Set: NineMonths(self: AmortizationOfFinancingCostsAndDiscountsCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: AmortizationOfFinancingCostsAndDiscountsCashFlowStatement) -> Decimal



Set: OneMonth(self: AmortizationOfFinancingCostsAndDiscountsCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: AmortizationOfFinancingCostsAndDiscountsCashFlowStatement) -> Decimal



Set: SixMonths(self: AmortizationOfFinancingCostsAndDiscountsCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AmortizationOfFinancingCostsAndDiscountsCashFlowStatement) -> Decimal



Set: ThreeMonths(self: AmortizationOfFinancingCostsAndDiscountsCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: AmortizationOfFinancingCostsAndDiscountsCashFlowStatement) -> Decimal



Set: TwelveMonths(self: AmortizationOfFinancingCostsAndDiscountsCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: AmortizationOfFinancingCostsAndDiscountsCashFlowStatement) -> Decimal



Set: TwoMonths(self: AmortizationOfFinancingCostsAndDiscountsCashFlowStatement) = value

"""

    Store = None


class AmortizationOfIntangiblesCashFlowStatement(MultiPeriodField):
    """
    The aggregate expense charged against earnings to allocate the cost of intangible assets (nonphysical assets not used in

                production) in a systematic and rational manner to the periods expected to benefit from such assets.



    AmortizationOfIntangiblesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: AmortizationOfIntangiblesCashFlowStatement) -> Decimal



Set: NineMonths(self: AmortizationOfIntangiblesCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: AmortizationOfIntangiblesCashFlowStatement) -> Decimal



Set: OneMonth(self: AmortizationOfIntangiblesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: AmortizationOfIntangiblesCashFlowStatement) -> Decimal



Set: SixMonths(self: AmortizationOfIntangiblesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AmortizationOfIntangiblesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: AmortizationOfIntangiblesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: AmortizationOfIntangiblesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: AmortizationOfIntangiblesCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: AmortizationOfIntangiblesCashFlowStatement) -> Decimal



Set: TwoMonths(self: AmortizationOfIntangiblesCashFlowStatement) = value

"""

    Store = None


class AmortizationOfIntangiblesIncomeStatement(MultiPeriodField):
    """
    The aggregate expense charged against earnings to allocate the cost of intangible assets (nonphysical assets not used in

                production) in a systematic and rational manner to the periods expected to benefit from such assets.



    AmortizationOfIntangiblesIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: AmortizationOfIntangiblesIncomeStatement) -> Decimal



Set: NineMonths(self: AmortizationOfIntangiblesIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: AmortizationOfIntangiblesIncomeStatement) -> Decimal



Set: OneMonth(self: AmortizationOfIntangiblesIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: AmortizationOfIntangiblesIncomeStatement) -> Decimal



Set: SixMonths(self: AmortizationOfIntangiblesIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AmortizationOfIntangiblesIncomeStatement) -> Decimal



Set: ThreeMonths(self: AmortizationOfIntangiblesIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: AmortizationOfIntangiblesIncomeStatement) -> Decimal



Set: TwelveMonths(self: AmortizationOfIntangiblesIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: AmortizationOfIntangiblesIncomeStatement) -> Decimal



Set: TwoMonths(self: AmortizationOfIntangiblesIncomeStatement) = value

"""

    Store = None


class AmortizationOfSecuritiesCashFlowStatement(MultiPeriodField):
    """
    Represents amortization of the allocation of a lump sum amount to different time periods, particularly for securities, debt, loans,

                and other forms of financing. Does not include amortization, amortization of capital expenditure and intangible assets.



    AmortizationOfSecuritiesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: AmortizationOfSecuritiesCashFlowStatement) -> Decimal



Set: NineMonths(self: AmortizationOfSecuritiesCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: AmortizationOfSecuritiesCashFlowStatement) -> Decimal



Set: OneMonth(self: AmortizationOfSecuritiesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: AmortizationOfSecuritiesCashFlowStatement) -> Decimal



Set: SixMonths(self: AmortizationOfSecuritiesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AmortizationOfSecuritiesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: AmortizationOfSecuritiesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: AmortizationOfSecuritiesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: AmortizationOfSecuritiesCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: AmortizationOfSecuritiesCashFlowStatement) -> Decimal



Set: TwoMonths(self: AmortizationOfSecuritiesCashFlowStatement) = value

"""

    Store = None


class AmortizationSupplementalIncomeStatement(MultiPeriodField):
    """
    The current period expense charged against earnings on intangible asset over its useful life. It is a supplemental value which would

                be reported outside consolidated statements.



    AmortizationSupplementalIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: AmortizationSupplementalIncomeStatement) -> Decimal



Set: NineMonths(self: AmortizationSupplementalIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: AmortizationSupplementalIncomeStatement) -> Decimal



Set: SixMonths(self: AmortizationSupplementalIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AmortizationSupplementalIncomeStatement) -> Decimal



Set: ThreeMonths(self: AmortizationSupplementalIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: AmortizationSupplementalIncomeStatement) -> Decimal



Set: TwelveMonths(self: AmortizationSupplementalIncomeStatement) = value

"""

    Store = None


class AssetClassification(object):
    """
    Definition of the AssetClassification class



    AssetClassification()
    """

    def UpdateValues(self, update):
        """
        UpdateValues(self: AssetClassification, update: AssetClassification)

            Applies updated values from update to this

             instance





            update: The next data update for this instance
        """
        pass

    CANNAICS = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Similar to NAICS (data point 3010, above), this is specifically for Canadian classifications.

            An acronym for North American Industry Classification System, it is a 6 digit numerical classification assigned to individual

            companies.  Developed jointly by the U.S., Canada, and Mexico to provide new comparability in statistics about business activity

            across North America.  It is intended to replace the U.S. Standard Industrial Classification (SIC) system. See separate reference

            document for a list of NAICS Codes/Mappings.

            The initial SIC and NAICS listed is the Primary based on revenue generation; followed by Secondary SIC and NAICS when

            applicable. Both SIC and NAICS are manually collected and assigned.



Get: CANNAICS(self: AssetClassification) -> int



Set: CANNAICS(self: AssetClassification) = value

"""

    FinancialHealthGrade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Instead of using accounting-based ratios to formulate a measure to reflect the financial health of a firm, we use structural or

            contingent claim models. Structural models take advantage of both market information and accounting financial information. The

            firm's equity in such models is viewed as a call option on the value of the firm's assets. If the value of the assets is not sufficient to

            cover the firm's liabilities (the strike price), default is expected to occur, and the call option expires worthless and the firm is turned

            over to its creditors. To estimate a distance to default, the value of the firm's liabilities is obtained from the firm's latest balance

            sheet and incorporated into the model. We then rank the calculated distance to default and award 10% of the universe A's, 20%

            B's, 40% C's, 20% D's, and 10% F's. Morningstar calculates this figure in-house on a daily basis.



Get: FinancialHealthGrade(self: AssetClassification) -> str



Set: FinancialHealthGrade(self: AssetClassification) = value

"""

    GrowthGrade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth grade is based on the trend in revenue per share using data from the past five years. For the purpose of calculating

            revenue per share we use the past five years' revenue figures and corresponding year-end fully diluted shares outstanding; if year-

            end fully diluted shares outstanding is not available, we calculate this figure by dividing the company's reported net income

            applicable to common shareholders by the reported fully diluted earnings per share. A company must have a minimum of four

            consecutive years of positive and non-zero revenue, including the latest fiscal year, to qualify for a grade.

            In calculating the revenue per share growth rate, we calculate the slope of the regression line of historical revenue per share. We

            then divide the slope of the regression line by the arithmetic average of historical revenue per share figures. The result of the

            regression is a normalized historical increase or decrease in the rate of growth for sales per share. We then calculate a z-score by

            subtracting the universe mean revenue growth from the company's revenue growth, and dividing by the standard deviation of the

            universe's growth rates.

            Stocks are sorted based on the z-score of their revenue per share growth rate calculated above, from the most negative z-score to

            the most positive z-score. Stocks are then ranked based on their z-score from 1 to the total number of qualified stocks. We assign

            grades based on this ranking. Stocks are assigned A, B, C, D, or F. Morningstar calculates this figure in-house on a monthly basis.



Get: GrowthGrade(self: AssetClassification) -> str



Set: GrowthGrade(self: AssetClassification) = value

"""

    GrowthScore = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A high overall growth score indicates that a stock's per-share earnings, book value, revenues, and cash flow are expected to grow

            quickly relative to other stocks in the same scoring group. A weak growth orientation does not necessarily mean that a stock has a

            strong value orientation.



Get: GrowthScore(self: AssetClassification) -> Decimal



Set: GrowthScore(self: AssetClassification) = value

"""

    MorningstarEconomySphereCode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Sectors are consolidated into three major economic spheres or Super Sectors: Cyclical, Defensive and Sensitive.  See appendix for

            mappings.



Get: MorningstarEconomySphereCode(self: AssetClassification) -> int



Set: MorningstarEconomySphereCode(self: AssetClassification) = value

"""

    MorningstarIndustryCode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Equities are mapped into one of 148 industries, the one which most accurately reflects the underlying business of that company.

            This mapping is based on publicly available information about each company and uses annual reports, Form

            10-Ks and Morningstar Equity Analyst input as its primary source. Other secondary sources of information may include company

            web sites, sell-side research (if available) and trade publications. By and large, equities are mapped into the industries that best

            reflect each company's largest source of revenue and income. If the company has more than three sources of revenue and income

            and there is no clear dominant revenue and income stream, the company is assigned to the Conglomerates industry. Based on

            Morningstar analyst research or other third party information, Morningstar may change industry assignments to more accurately

            reflect the changing businesses of companies.



Get: MorningstarIndustryCode(self: AssetClassification) -> int



Set: MorningstarIndustryCode(self: AssetClassification) = value

"""

    MorningstarIndustryGroupCode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Industries are mapped into 69 industry groups based on their common operational characteristics. If a particular industry has unique

            operating characteristics-or simply lacks commonality with other industries-it would map into its own group. However, any

            industry group containing just one single industry does not necessarily imply that that industry is dominant or otherwise important.

            The assignment simply reflects the lack of a sufficient amount of shared traits among industries. See appendix for mappings.



Get: MorningstarIndustryGroupCode(self: AssetClassification) -> int



Set: MorningstarIndustryGroupCode(self: AssetClassification) = value

"""

    MorningstarSectorCode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Industry groups are consolidated into 11 sectors. See appendix for mappings.



Get: MorningstarSectorCode(self: AssetClassification) -> int



Set: MorningstarSectorCode(self: AssetClassification) = value

"""

    NACE = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """NACE is a European standard classification of economic activities maintained by Eurostat.



Get: NACE(self: AssetClassification) -> Decimal



Set: NACE(self: AssetClassification) = value

"""

    NAICS = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """An acronym for North American Industry Classification System, it is a 6 digit numerical classification assigned to individual

            companies.  Developed jointly by the U.S., Canada, and Mexico to provide new comparability in statistics about business activity

            across North America.  It is intended to replace the U.S. Standard Industrial Classification (SIC) system. See separate reference

            document for a list of NAICS Codes/Mappings.



Get: NAICS(self: AssetClassification) -> int



Set: NAICS(self: AssetClassification) = value

"""

    ProfitabilityGrade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The profitability grade for all qualified companies in Morningstar's stock universe is based on valuation of return on shareholders'

            equity (ROE) using data from the past five years. Morningstar's universe of stocks is first filtered for adequacy of historical ROE

            figures. Companies with less than four years of consecutive ROE figures including the ROE figure for the latest fiscal year are tossed

            from calculations and are assigned "--" for the profitability grade. For the remaining qualified universe of stocks the profitability

            grade is based on the valuation of the following three components, which are assigned different weights; the historical growth rate

            of ROE, the average level of historical ROE, the level of ROE in the latest fiscal year of the company.

            Stocks are assigned A, B, C, D, or F. Morningstar calculates this figure in-house on a monthly basis.



Get: ProfitabilityGrade(self: AssetClassification) -> str



Set: ProfitabilityGrade(self: AssetClassification) = value

"""

    SIC = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Standard Industrial Classification System (SIC) is a system for classifying a business according to economic activity. See separate

            reference document for a list of Sic Codes/Mappings.



Get: SIC(self: AssetClassification) -> int



Set: SIC(self: AssetClassification) = value

"""

    SizeScore = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Rather than a fixed number of large cap or small cap stocks, Morningstar uses a flexible system that isn't adversely affected by

            overall movements in the market. The Morningstar stock universe represents approximately 99% of the U.S. market for actively

            traded stocks. Giant-cap stocks are defined as the group that accounts for the top 40% of the capitalization of the Morningstar

            domestic stock universe; large-cap stocks represent the next 30%; mid-cap stocks represent the next 20%; small-cap stocks

            represent the next 7%; and micro-cap stocks represent the remaining 3%. Each stock is given a Size Score that ranges from -100

            (very micro) to 400 (very giant). When classifying stocks to a Style Box, giant is included in large and micro is included in small.



Get: SizeScore(self: AssetClassification) -> Decimal



Set: SizeScore(self: AssetClassification) = value

"""

    StockType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The purpose of the Stock Types is to group companies according to the underlying fundamentals of their business. They answer the

            question: If I buy this stock, what kind of company am I buying? Unlike the style box, the emphasis with the Stock Types is on

            income statement, balance sheet, and cash-flow data-not price data or valuation multiples. We focus on the company, not the

            stock. Morningstar calculates this figure in-house on a monthly basis.



Get: StockType(self: AssetClassification) -> int



Set: StockType(self: AssetClassification) = value

"""

    StyleBox = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Morningstar Equity Style Box is a grid that provides a graphical representation of the investment style of stocks and portfolios.

            It classifies securities according to market capitalization (the vertical axis) and value-growth scores (the horizontal axis) and allows

            us to provide analysis on a 5-by-5 Style Box as well as providing the traditional style box assignment, which is the basis for the

            Morningstar Category. Two of the style categories, value and growth, are common to both stocks and portfolios. However, for

            stocks, the central column of the style box represents the core style (those stocks for which neither value nor growth

            characteristics dominate); for portfolios, it represents the blend style.



Get: StyleBox(self: AssetClassification) -> int



Set: StyleBox(self: AssetClassification) = value

"""

    StyleScore = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The scores for a stock's value and growth characteristics determine its horizontal placement. The Value-Growth Score is a

            reflection of the aggregate expectations of market participants for the future growth and required rate of return for a stock. We

            infer these expectations from the relation between current market prices and future growth and cost of capital expectations under

            the assumption of rational market participants and a simple model of stock value.



Get: StyleScore(self: AssetClassification) -> Decimal



Set: StyleScore(self: AssetClassification) = value

"""

    ValueScore = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A high value score indicates that a stock's price is relatively low, given the anticipated per-sharing earnings, book value, revenues,

            cash flow, and dividends that the stock provides to investors. A high price relative to these measures indicates that a stock's value

            orientation is weak, but it does not necessarily mean that the stock is growth-oriented.



Get: ValueScore(self: AssetClassification) -> Decimal



Set: ValueScore(self: AssetClassification) = value

"""


class AssetImpairmentChargeCashFlowStatement(MultiPeriodField):
    """
    The charge against earnings resulting from the aggregate write down of all assets from their carrying value to their fair value.



    AssetImpairmentChargeCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: AssetImpairmentChargeCashFlowStatement) -> Decimal



Set: NineMonths(self: AssetImpairmentChargeCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: AssetImpairmentChargeCashFlowStatement) -> Decimal



Set: OneMonth(self: AssetImpairmentChargeCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: AssetImpairmentChargeCashFlowStatement) -> Decimal



Set: SixMonths(self: AssetImpairmentChargeCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AssetImpairmentChargeCashFlowStatement) -> Decimal



Set: ThreeMonths(self: AssetImpairmentChargeCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: AssetImpairmentChargeCashFlowStatement) -> Decimal



Set: TwelveMonths(self: AssetImpairmentChargeCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: AssetImpairmentChargeCashFlowStatement) -> Decimal



Set: TwoMonths(self: AssetImpairmentChargeCashFlowStatement) = value

"""

    Store = None


class AssetsHeldForSaleBalanceSheet(MultiPeriodField):
    """
    This item is typically available for bank industry. It's a part of long-lived assets, which has been decided for sale in the future.



    AssetsHeldForSaleBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AssetsHeldForSaleBalanceSheet) -> Decimal



Set: ThreeMonths(self: AssetsHeldForSaleBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: AssetsHeldForSaleBalanceSheet) -> Decimal



Set: TwelveMonths(self: AssetsHeldForSaleBalanceSheet) = value

"""

    Store = None


class AssetsHeldForSaleCurrentBalanceSheet(MultiPeriodField):
    """
    Short term assets set apart for sale to liquidate in the future and are measured at the lower of carrying amount and fair value less

                costs to sell.



    AssetsHeldForSaleCurrentBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AssetsHeldForSaleCurrentBalanceSheet) -> Decimal



Set: ThreeMonths(self: AssetsHeldForSaleCurrentBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: AssetsHeldForSaleCurrentBalanceSheet) -> Decimal



Set: TwelveMonths(self: AssetsHeldForSaleCurrentBalanceSheet) = value

"""

    Store = None


class AssetsHeldForSaleNonCurrentBalanceSheet(MultiPeriodField):
    """
    Long term assets set apart for sale to liquidate in the future and are measured at the lower of carrying amount and fair value less

                costs to sell.



    AssetsHeldForSaleNonCurrentBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AssetsHeldForSaleNonCurrentBalanceSheet) -> Decimal



Set: ThreeMonths(self: AssetsHeldForSaleNonCurrentBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: AssetsHeldForSaleNonCurrentBalanceSheet) -> Decimal



Set: TwelveMonths(self: AssetsHeldForSaleNonCurrentBalanceSheet) = value

"""

    Store = None


class AssetsOfDiscontinuedOperationsBalanceSheet(MultiPeriodField):
    """
    A portion of a company's business that has been disposed of or sold.



    AssetsOfDiscontinuedOperationsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AssetsOfDiscontinuedOperationsBalanceSheet) -> Decimal



Set: ThreeMonths(self: AssetsOfDiscontinuedOperationsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: AssetsOfDiscontinuedOperationsBalanceSheet) -> Decimal



Set: TwelveMonths(self: AssetsOfDiscontinuedOperationsBalanceSheet) = value

"""

    Store = None


class AssetsPledgedasCollateralSubjecttoSaleorRepledgingTotalBalanceSheet(MultiPeriodField):
    """
    Total value collateral assets pledged to the bank that can be sold or used as collateral for other loans.



    AssetsPledgedasCollateralSubjecttoSaleorRepledgingTotalBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AssetsPledgedasCollateralSubjecttoSaleorRepledgingTotalBalanceSheet) -> Decimal



Set: ThreeMonths(self: AssetsPledgedasCollateralSubjecttoSaleorRepledgingTotalBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: AssetsPledgedasCollateralSubjecttoSaleorRepledgingTotalBalanceSheet) -> Decimal



Set: TwelveMonths(self: AssetsPledgedasCollateralSubjecttoSaleorRepledgingTotalBalanceSheet) = value

"""

    Store = None


class AssetsTurnover(MultiPeriodField):
    """
    Revenue / Average Total Assets



    AssetsTurnover(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: AssetsTurnover) -> Decimal



Set: OneYear(self: AssetsTurnover) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: AssetsTurnover) -> Decimal



Set: SixMonths(self: AssetsTurnover) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AssetsTurnover) -> Decimal



Set: ThreeMonths(self: AssetsTurnover) = value

"""

    Store = None


class AvailableForSaleSecuritiesBalanceSheet(MultiPeriodField):
    """
    For an unclassified balance sheet, this item represents equity securities categorized neither as held-to-maturity nor trading. Equity

                securities represent ownership interests or the right to acquire ownership interests in corporations and other legal entities which

                ownership interest is represented by shares of common or preferred stock (which is not mandatory redeemable or redeemable at

                the option of the holder), convertible securities, stock rights, or stock warrants. This category includes preferred stocks, available-

                for-sale and common stock, available-for-sale.



    AvailableForSaleSecuritiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: AvailableForSaleSecuritiesBalanceSheet) -> Decimal



Set: NineMonths(self: AvailableForSaleSecuritiesBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: AvailableForSaleSecuritiesBalanceSheet) -> Decimal



Set: SixMonths(self: AvailableForSaleSecuritiesBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AvailableForSaleSecuritiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: AvailableForSaleSecuritiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: AvailableForSaleSecuritiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: AvailableForSaleSecuritiesBalanceSheet) = value

"""

    Store = None


class AverageDilutionEarningsIncomeStatement(MultiPeriodField):
    """
    Adjustments to reported net income to calculate Diluted EPS, by assuming that all convertible instruments are converted to

                Common Equity. The adjustments usually include the interest expense of debentures when assumed converted and preferred

                dividends of convertible preferred stock when assumed converted.



    AverageDilutionEarningsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: AverageDilutionEarningsIncomeStatement) -> Decimal



Set: NineMonths(self: AverageDilutionEarningsIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: AverageDilutionEarningsIncomeStatement) -> Decimal



Set: SixMonths(self: AverageDilutionEarningsIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: AverageDilutionEarningsIncomeStatement) -> Decimal



Set: ThreeMonths(self: AverageDilutionEarningsIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: AverageDilutionEarningsIncomeStatement) -> Decimal



Set: TwelveMonths(self: AverageDilutionEarningsIncomeStatement) = value

"""

    Store = None


class AVG5YrsROIC(MultiPeriodField):
    """
    This is the simple average of the company's ROIC over the last 5 years. Return on invested capital is calculated by taking net

                operating profit after taxes and dividends and dividing by the total amount of capital invested and expressing the result as a

                percentage.



    AVG5YrsROIC(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: AVG5YrsROIC) -> Decimal



Set: FiveYears(self: AVG5YrsROIC) = value

"""

    Store = None


class BalanceSheet(object):
    """
    Definition of the BalanceSheet class



    BalanceSheet()
    """

    def UpdateValues(self, update):
        """
        UpdateValues(self: BalanceSheet, update: BalanceSheet)

            Applies updated values from update to this

             instance





            update: The next data update for this instance
        """
        pass

    AccountsPayable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Any money that a company owes its suppliers for goods and services purchased on credit and is expected to pay within the next

            year or operating cycle.



Get: AccountsPayable(self: BalanceSheet) -> AccountsPayableBalanceSheet



Set: AccountsPayable(self: BalanceSheet) = value

"""

    AccountsReceivable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Accounts owed to a company by customers within a year as a result of exchanging goods or services on credit.



Get: AccountsReceivable(self: BalanceSheet) -> AccountsReceivableBalanceSheet



Set: AccountsReceivable(self: BalanceSheet) = value

"""

    AccruedandDeferredIncome = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Sum of accrued liabilities and deferred income (amount received in advance but the services are not provided in respect of

            amount).



Get: AccruedandDeferredIncome(self: BalanceSheet) -> AccruedandDeferredIncomeBalanceSheet



Set: AccruedandDeferredIncome(self: BalanceSheet) = value

"""

    AccruedandDeferredIncomeCurrent = property(lambda self: object(), lambda self, v: None,
                                               lambda self: None)  # default
    """Sum of Accrued Liabilities and Deferred Income (amount received in advance but the services are not provided in respect of

            amount) due within 1 year.



Get: AccruedandDeferredIncomeCurrent(self: BalanceSheet) -> AccruedandDeferredIncomeCurrentBalanceSheet



Set: AccruedandDeferredIncomeCurrent(self: BalanceSheet) = value

"""

    AccruedandDeferredIncomeNonCurrent = property(lambda self: object(), lambda self, v: None,
                                                  lambda self: None)  # default
    """Sum of Accrued Liabilities and Deferred Income (amount received in advance but the services are not provided in respect of

            amount) due after 1 year.



Get: AccruedandDeferredIncomeNonCurrent(self: BalanceSheet) -> AccruedandDeferredIncomeNonCurrentBalanceSheet



Set: AccruedandDeferredIncomeNonCurrent(self: BalanceSheet) = value

"""

    AccruedInterestReceivable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This account shows the amount of unpaid interest accrued to the date of purchase and included in the purchase price of securities

            purchased between interest dates.



Get: AccruedInterestReceivable(self: BalanceSheet) -> AccruedInterestReceivableBalanceSheet



Set: AccruedInterestReceivable(self: BalanceSheet) = value

"""

    AccruedInvestmentIncome = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Interest, dividends, rents, ancillary and other revenues earned but not yet received by the entity on its investments.



Get: AccruedInvestmentIncome(self: BalanceSheet) -> AccruedInvestmentIncomeBalanceSheet



Set: AccruedInvestmentIncome(self: BalanceSheet) = value

"""

    AccruedLiabilitiesTotal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Liabilities which have occurred, but have not been paid or logged under accounts payable during an accounting period. In other

            words, obligations for goods and services provided to a company for which invoices have not yet been received; on a Non-

            Differentiated Balance Sheet.



Get: AccruedLiabilitiesTotal(self: BalanceSheet) -> AccruedLiabilitiesTotalBalanceSheet



Set: AccruedLiabilitiesTotal(self: BalanceSheet) = value

"""

    AccumulatedDepreciation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The cumulative amount of wear and tear or obsolescence charged against the fixed assets of a company.



Get: AccumulatedDepreciation(self: BalanceSheet) -> AccumulatedDepreciationBalanceSheet



Set: AccumulatedDepreciation(self: BalanceSheet) = value

"""

    AdditionalPaidInCapital = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Excess of issue price over par or stated value of the entity's capital stock and amounts received from other transactions involving

            the entity's stock or stockholders. Includes adjustments to additional paid in capital. There are two major categories of additional

            paid in capital: 1) Paid in capital in excess of par/stated value, which is the difference between the actual issue price of the shares

            and the shares' par/stated value. 2) Paid in capital from other transactions which includes treasury stock, retirement of stock, stock

            dividends recorded at market, lapse of stock purchase warrants, conversion of convertible bonds in excess of the par value of the

            stock, and any other additional capital from the company's own stock transactions.



Get: AdditionalPaidInCapital(self: BalanceSheet) -> AdditionalPaidInCapitalBalanceSheet



Set: AdditionalPaidInCapital(self: BalanceSheet) = value

"""

    AdvanceFromFederalHomeLoanBanks = property(lambda self: object(), lambda self, v: None,
                                               lambda self: None)  # default
    """This item is typically available for bank industry. It's the amount of borrowings as of the balance sheet date from the Federal Home

            Loan Bank, which are primarily used to cover shortages in the required reserve balance and liquidity shortages.



Get: AdvanceFromFederalHomeLoanBanks(self: BalanceSheet) -> AdvanceFromFederalHomeLoanBanksBalanceSheet



Set: AdvanceFromFederalHomeLoanBanks(self: BalanceSheet) = value

"""

    AdvancesfromCentralBanks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Borrowings from the central bank, which are primarily used to cover shortages in the required reserve balance and liquidity

            shortages.



Get: AdvancesfromCentralBanks(self: BalanceSheet) -> AdvancesfromCentralBanksBalanceSheet



Set: AdvancesfromCentralBanks(self: BalanceSheet) = value

"""

    AllowanceForDoubtfulAccountsReceivable = property(lambda self: object(), lambda self, v: None,
                                                      lambda self: None)  # default
    """An Allowance for Doubtful Accounts measures receivables recorded but not expected to be collected.



Get: AllowanceForDoubtfulAccountsReceivable(self: BalanceSheet) -> AllowanceForDoubtfulAccountsReceivableBalanceSheet



Set: AllowanceForDoubtfulAccountsReceivable(self: BalanceSheet) = value

"""

    AllowanceForLoansAndLeaseLosses = property(lambda self: object(), lambda self, v: None,
                                               lambda self: None)  # default
    """A contra account sets aside as an allowance for bad loans (e.g. customer defaults).



Get: AllowanceForLoansAndLeaseLosses(self: BalanceSheet) -> AllowanceForLoansAndLeaseLossesBalanceSheet



Set: AllowanceForLoansAndLeaseLosses(self: BalanceSheet) = value

"""

    AllowanceForNotesReceivable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This item is typically available for bank industry. It represents a provision relating to a written agreement to receive money  with the

            terms of the note (at a specified future date(s) within one year from the reporting date (or the normal operating cycle, whichever is

            longer), consisting of principal as well as any accrued interest) for the portion that is expected to be uncollectible.



Get: AllowanceForNotesReceivable(self: BalanceSheet) -> AllowanceForNotesReceivableBalanceSheet



Set: AllowanceForNotesReceivable(self: BalanceSheet) = value

"""

    AssetsHeldForSale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This item is typically available for bank industry. It's a part of long-lived assets, which has been decided for sale in the future.



Get: AssetsHeldForSale(self: BalanceSheet) -> AssetsHeldForSaleBalanceSheet



Set: AssetsHeldForSale(self: BalanceSheet) = value

"""

    AssetsHeldForSaleCurrent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Short term assets set apart for sale to liquidate in the future and are measured at the lower of carrying amount and fair value less

            costs to sell.



Get: AssetsHeldForSaleCurrent(self: BalanceSheet) -> AssetsHeldForSaleCurrentBalanceSheet



Set: AssetsHeldForSaleCurrent(self: BalanceSheet) = value

"""

    AssetsHeldForSaleNonCurrent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Long term assets set apart for sale to liquidate in the future and are measured at the lower of carrying amount and fair value less

            costs to sell.



Get: AssetsHeldForSaleNonCurrent(self: BalanceSheet) -> AssetsHeldForSaleNonCurrentBalanceSheet



Set: AssetsHeldForSaleNonCurrent(self: BalanceSheet) = value

"""

    AssetsOfDiscontinuedOperations = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A portion of a company's business that has been disposed of or sold.



Get: AssetsOfDiscontinuedOperations(self: BalanceSheet) -> AssetsOfDiscontinuedOperationsBalanceSheet



Set: AssetsOfDiscontinuedOperations(self: BalanceSheet) = value

"""

    AssetsPledgedasCollateralSubjecttoSaleorRepledgingTotal = property(lambda self: object(), lambda self, v: None,
                                                                       lambda self: None)  # default
    """Total value collateral assets pledged to the bank that can be sold or used as collateral for other loans.



Get: AssetsPledgedasCollateralSubjecttoSaleorRepledgingTotal(self: BalanceSheet) -> AssetsPledgedasCollateralSubjecttoSaleorRepledgingTotalBalanceSheet



Set: AssetsPledgedasCollateralSubjecttoSaleorRepledgingTotal(self: BalanceSheet) = value

"""

    AvailableForSaleSecurities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """For an unclassified balance sheet, this item represents equity securities categorized neither as held-to-maturity nor trading. Equity

            securities represent ownership interests or the right to acquire ownership interests in corporations and other legal entities which

            ownership interest is represented by shares of common or preferred stock (which is not mandatory redeemable or redeemable at

            the option of the holder), convertible securities, stock rights, or stock warrants. This category includes preferred stocks, available-

            for-sale and common stock, available-for-sale.



Get: AvailableForSaleSecurities(self: BalanceSheet) -> AvailableForSaleSecuritiesBalanceSheet



Set: AvailableForSaleSecurities(self: BalanceSheet) = value

"""

    BankIndebtedness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """All indebtedness for borrowed money or the deferred purchase price of property or services, including without limitation

            reimbursement and other obligations with respect to surety bonds and letters of credit, all obligations evidenced by notes, bonds

            debentures or similar instruments, all capital lease obligations and all contingent obligations.



Get: BankIndebtedness(self: BalanceSheet) -> BankIndebtednessBalanceSheet



Set: BankIndebtedness(self: BalanceSheet) = value

"""

    BankLoansCurrent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A debt financing obligation issued by a bank or similar financial institution to a company, that entitles the lender or holder of the

            instrument to interest payments and the repayment of principal at a specified time within the next 12 months or operating cycle.



Get: BankLoansCurrent(self: BalanceSheet) -> BankLoansCurrentBalanceSheet



Set: BankLoansCurrent(self: BalanceSheet) = value

"""

    BankLoansNonCurrent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A debt financing obligation issued by a bank or similar financial institution to a company, that entitles the lender or holder of the

            instrument to interest payments and the repayment of principal at a specified time beyond the current accounting period.



Get: BankLoansNonCurrent(self: BalanceSheet) -> BankLoansNonCurrentBalanceSheet



Set: BankLoansNonCurrent(self: BalanceSheet) = value

"""

    BankLoansTotal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Total debt financing obligation issued by a bank or similar financial institution to a company that entitles the lender or holder of the

            instrument to interest payments and the repayment of principal at a specified time; in a Non-Differentiated Balance Sheet.



Get: BankLoansTotal(self: BalanceSheet) -> BankLoansTotalBalanceSheet



Set: BankLoansTotal(self: BalanceSheet) = value

"""

    BankOwnedLifeInsurance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The carrying amount of a life insurance policy on an officer, executive or employee for which the reporting entity (a bank) is entitled

            to proceeds from the policy upon death of the insured or surrender of the insurance policy.



Get: BankOwnedLifeInsurance(self: BalanceSheet) -> BankOwnedLifeInsuranceBalanceSheet



Set: BankOwnedLifeInsurance(self: BalanceSheet) = value

"""

    BiologicalAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Biological assets include plants and animals.



Get: BiologicalAssets(self: BalanceSheet) -> BiologicalAssetsBalanceSheet



Set: BiologicalAssets(self: BalanceSheet) = value

"""

    BSFileDate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Filing date of the Balance Sheet



Get: BSFileDate(self: BalanceSheet) -> DateTime



Set: BSFileDate(self: BalanceSheet) = value

"""

    BuildingsAndImprovements = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Fixed assets that specifically deal with the facilities a company owns. Include the improvements associated with buildings.



Get: BuildingsAndImprovements(self: BalanceSheet) -> BuildingsAndImprovementsBalanceSheet



Set: BuildingsAndImprovements(self: BalanceSheet) = value

"""

    CapitalLeaseObligations = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Current Portion of Capital Lease Obligation plus Long Term Portion of Capital Lease Obligation.



Get: CapitalLeaseObligations(self: BalanceSheet) -> CapitalLeaseObligationsBalanceSheet



Set: CapitalLeaseObligations(self: BalanceSheet) = value

"""

    CapitalStock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The total amount of stock authorized for issue by a corporation, including common and preferred stock.



Get: CapitalStock(self: BalanceSheet) -> CapitalStockBalanceSheet



Set: CapitalStock(self: BalanceSheet) = value

"""

    Cash = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cash includes currency on hand as well as demand deposits with banks or financial institutions. It also includes other kinds of

            accounts that have the general characteristics of demand deposits in that the customer may deposit additional funds at any time

            and also effectively may withdraw funds at any time without prior notice or penalty.



Get: Cash(self: BalanceSheet) -> CashBalanceSheet



Set: Cash(self: BalanceSheet) = value

"""

    CashAndCashEquivalents = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Includes unrestricted cash on hand, money market instruments and other debt securities which can be converted to cash

            immediately.



Get: CashAndCashEquivalents(self: BalanceSheet) -> CashAndCashEquivalentsBalanceSheet



Set: CashAndCashEquivalents(self: BalanceSheet) = value

"""

    CashAndDueFromBanks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Includes cash on hand (currency and coin), cash items in process of collection, non-interest bearing deposits due from other

            financial institutions (including corporate credit unions), and balances with the Federal Reserve Banks, Federal Home Loan Banks

            and central banks.



Get: CashAndDueFromBanks(self: BalanceSheet) -> CashAndDueFromBanksBalanceSheet



Set: CashAndDueFromBanks(self: BalanceSheet) = value

"""

    CashCashEquivalentsAndFederalFundsSold = property(lambda self: object(), lambda self, v: None,
                                                      lambda self: None)  # default
    """The aggregate amount of cash, cash equivalents, and federal funds sold.



Get: CashCashEquivalentsAndFederalFundsSold(self: BalanceSheet) -> CashCashEquivalentsAndFederalFundsSoldBalanceSheet



Set: CashCashEquivalentsAndFederalFundsSold(self: BalanceSheet) = value

"""

    CashCashEquivalentsAndMarketableSecurities = property(lambda self: object(), lambda self, v: None,
                                                          lambda self: None)  # default
    """The aggregate amount of cash, cash equivalents, and marketable securities.



Get: CashCashEquivalentsAndMarketableSecurities(self: BalanceSheet) -> CashCashEquivalentsAndMarketableSecuritiesBalanceSheet



Set: CashCashEquivalentsAndMarketableSecurities(self: BalanceSheet) = value

"""

    CashEquivalents = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cash equivalents, excluding items classified as marketable securities, include short-term, highly liquid investments that are both

            readily convertible to known amounts of cash, and so near their maturity that they present insignificant risk of changes in value

            because of changes in interest rates.  Generally, only investments with original maturities of three months or less qualify under this

            definition. Original maturity means original maturity to the entity holding the investment. For example, both a three-month US

            Treasury bill and a three-year Treasury note purchased three months from maturity qualify as cash equivalents. However, a Treasury

            note purchased three years ago does not become a cash equivalent when its remaining maturity is three months.



Get: CashEquivalents(self: BalanceSheet) -> CashEquivalentsBalanceSheet



Set: CashEquivalents(self: BalanceSheet) = value

"""

    CashRestrictedOrPledged = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cash that the company can use only for specific purposes or cash deposit or placing of owned property by a debtor (the pledger) to

            a creditor (the pledgee) as a security for a loan or obligation.



Get: CashRestrictedOrPledged(self: BalanceSheet) -> CashRestrictedOrPledgedBalanceSheet



Set: CashRestrictedOrPledged(self: BalanceSheet) = value

"""

    ClaimsOutstanding = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Amounts owing to policy holders who have filed claims but have not yet been settled or paid.



Get: ClaimsOutstanding(self: BalanceSheet) -> ClaimsOutstandingBalanceSheet



Set: ClaimsOutstanding(self: BalanceSheet) = value

"""

    CommercialLoan = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Short-term loan, typically 90 days, used by a company to finance seasonal working capital needs.



Get: CommercialLoan(self: BalanceSheet) -> CommercialLoanBalanceSheet



Set: CommercialLoan(self: BalanceSheet) = value

"""

    CommercialPaper = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Commercial paper is a money-market security issued by large banks and corporations. It represents the current obligation for the

            company. There are four basic kinds of commercial paper: promissory notes, drafts, checks, and certificates of deposit. The

            maturities of these money market securities generally do not exceed 270 days.



Get: CommercialPaper(self: BalanceSheet) -> CommercialPaperBalanceSheet



Set: CommercialPaper(self: BalanceSheet) = value

"""

    CommonStock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Common stock (all issues) at par value, as reported within the Stockholder's Equity section of the balance sheet; i.e. it is one

            component of Common Stockholder's Equity



Get: CommonStock(self: BalanceSheet) -> CommonStockBalanceSheet



Set: CommonStock(self: BalanceSheet) = value

"""

    CommonStockEquity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The portion of the Stockholders' Equity that reflects the amount of common stock, which are units of ownership.



Get: CommonStockEquity(self: BalanceSheet) -> CommonStockEquityBalanceSheet



Set: CommonStockEquity(self: BalanceSheet) = value

"""

    CommonUtilityPlant = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The amount for the other plant related to the utility industry fix assets.



Get: CommonUtilityPlant(self: BalanceSheet) -> CommonUtilityPlantBalanceSheet



Set: CommonUtilityPlant(self: BalanceSheet) = value

"""

    ComTreShaNum = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The treasury stock number of common shares. This represents the number of common shares owned by the company as a result of

            share repurchase programs or donations.



Get: ComTreShaNum(self: BalanceSheet) -> ComTreShaNumBalanceSheet



Set: ComTreShaNum(self: BalanceSheet) = value

"""

    ConstructionInProgress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """It represents carrying amount of long-lived asset under construction that includes construction costs to date on capital projects.

            Assets constructed, but not completed.



Get: ConstructionInProgress(self: BalanceSheet) -> ConstructionInProgressBalanceSheet



Set: ConstructionInProgress(self: BalanceSheet) = value

"""

    ConsumerLoan = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A loan that establishes consumer credit that is granted for personal use; usually unsecured and based on the borrower's integrity

            and ability to pay.



Get: ConsumerLoan(self: BalanceSheet) -> ConsumerLoanBalanceSheet



Set: ConsumerLoan(self: BalanceSheet) = value

"""

    ConvertibleLoansCurrent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This represents loans that entitle the lender (or the holder of loan debenture) to convert the loan to common or preferred stock

            (ordinary or preference shares) within the next 12 months or operating cycle.



Get: ConvertibleLoansCurrent(self: BalanceSheet) -> ConvertibleLoansCurrentBalanceSheet



Set: ConvertibleLoansCurrent(self: BalanceSheet) = value

"""

    ConvertibleLoansNonCurrent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A long term loan with a warrant attached that gives the debt holder the option to exchange all or a portion of the loan principal for

            an equity position in the company at a predetermined rate of conversion within a specified period of time.



Get: ConvertibleLoansNonCurrent(self: BalanceSheet) -> ConvertibleLoansNonCurrentBalanceSheet



Set: ConvertibleLoansNonCurrent(self: BalanceSheet) = value

"""

    ConvertibleLoansTotal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Loans that entitles the lender (or the holder of loan debenture) to convert the loan to common or preferred stock (ordinary or

            preference shares) at a specified rate conversion rate and a specified time frame; in a Non-Differentiated Balance Sheet.



Get: ConvertibleLoansTotal(self: BalanceSheet) -> ConvertibleLoansTotalBalanceSheet



Set: ConvertibleLoansTotal(self: BalanceSheet) = value

"""

    CurrentAccruedExpenses = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """An expense recognized before it is paid for. Includes compensation, interest, pensions and all other miscellaneous accruals

            reported by the company. Expenses incurred during the accounting period, but not required to be paid until a later date.



Get: CurrentAccruedExpenses(self: BalanceSheet) -> CurrentAccruedExpensesBalanceSheet



Set: CurrentAccruedExpenses(self: BalanceSheet) = value

"""

    CurrentAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The total amount of assets considered to be convertible into cash within a relatively short period of time, usually a year.



Get: CurrentAssets(self: BalanceSheet) -> CurrentAssetsBalanceSheet



Set: CurrentAssets(self: BalanceSheet) = value

"""

    CurrentCapitalLeaseObligation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Represents the total amount of long-term capital leases that must be paid within the next accounting period. Capital lease

            obligations are contractual obligations that arise from obtaining the use of property or equipment via a capital lease contract.



Get: CurrentCapitalLeaseObligation(self: BalanceSheet) -> CurrentCapitalLeaseObligationBalanceSheet



Set: CurrentCapitalLeaseObligation(self: BalanceSheet) = value

"""

    CurrentDebt = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Represents the total amount of long-term debt such as bank loans and commercial paper, which is due within one year.



Get: CurrentDebt(self: BalanceSheet) -> CurrentDebtBalanceSheet



Set: CurrentDebt(self: BalanceSheet) = value

"""

    CurrentDebtAndCapitalLeaseObligation = property(lambda self: object(), lambda self, v: None,
                                                    lambda self: None)  # default
    """All borrowings due within one year including current portions of long-term debt and capital leases as well as short-term debt such

            as bank loans and commercial paper.



Get: CurrentDebtAndCapitalLeaseObligation(self: BalanceSheet) -> CurrentDebtAndCapitalLeaseObligationBalanceSheet



Set: CurrentDebtAndCapitalLeaseObligation(self: BalanceSheet) = value

"""

    CurrentDeferredAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Payments that will be assigned as expenses with one accounting period, but that are paid in advance and temporarily set up as

            current assets on the balance sheet.



Get: CurrentDeferredAssets(self: BalanceSheet) -> CurrentDeferredAssetsBalanceSheet



Set: CurrentDeferredAssets(self: BalanceSheet) = value

"""

    CurrentDeferredLiabilities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Represents the current portion of obligations, which is a liability that usually would have been paid but is now past due.



Get: CurrentDeferredLiabilities(self: BalanceSheet) -> CurrentDeferredLiabilitiesBalanceSheet



Set: CurrentDeferredLiabilities(self: BalanceSheet) = value

"""

    CurrentDeferredRevenue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Represents collections of cash or other assets related to revenue producing activity for which revenue has not yet been recognized.

            Generally, an entity records deferred revenue when it receives consideration from a customer before achieving certain criteria that

            must be met for revenue to be recognized in conformity with GAAP. It can be either current or non-current item. Also called

            unearned revenue.



Get: CurrentDeferredRevenue(self: BalanceSheet) -> CurrentDeferredRevenueBalanceSheet



Set: CurrentDeferredRevenue(self: BalanceSheet) = value

"""

    CurrentDeferredTaxesAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Meaning a future tax asset, resulting from temporary differences between book (accounting) value of assets and liabilities and their

            tax value, or timing differences between the recognition of gains and losses in financial statements and their recognition in a tax

            computation. It is also called future tax.



Get: CurrentDeferredTaxesAssets(self: BalanceSheet) -> CurrentDeferredTaxesAssetsBalanceSheet



Set: CurrentDeferredTaxesAssets(self: BalanceSheet) = value

"""

    CurrentDeferredTaxesLiabilities = property(lambda self: object(), lambda self, v: None,
                                               lambda self: None)  # default
    """Meaning a future tax liability, resulting from temporary differences between book (accounting) value of assets and liabilities and

            their tax value, or timing differences between the recognition of gains and losses in financial statements and their recognition in a

            tax computation. Deferred tax liabilities generally arise where tax relief is provided in advance of an accounting expense, or income

            is accrued but not taxed until received.



Get: CurrentDeferredTaxesLiabilities(self: BalanceSheet) -> CurrentDeferredTaxesLiabilitiesBalanceSheet



Set: CurrentDeferredTaxesLiabilities(self: BalanceSheet) = value

"""

    CurrentLiabilities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The debts or obligations of the firm that are due within one year.



Get: CurrentLiabilities(self: BalanceSheet) -> CurrentLiabilitiesBalanceSheet



Set: CurrentLiabilities(self: BalanceSheet) = value

"""

    CurrentNotesPayable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Written promises to pay a stated sum at one or more specified dates in the future, within the accounting period.



Get: CurrentNotesPayable(self: BalanceSheet) -> CurrentNotesPayableBalanceSheet



Set: CurrentNotesPayable(self: BalanceSheet) = value

"""

    CurrentOtherFinancialLiabilities = property(lambda self: object(), lambda self, v: None,
                                                lambda self: None)  # default
    """Other short term financial liabilities not categorized and due within one year or a normal operating cycle (whichever is longer).



Get: CurrentOtherFinancialLiabilities(self: BalanceSheet) -> CurrentOtherFinancialLiabilitiesBalanceSheet



Set: CurrentOtherFinancialLiabilities(self: BalanceSheet) = value

"""

    CurrentProvisions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Provisions are created to protect the interests of one or both parties named in a contract or legal document which is a preparatory

            action or measure. Current provision is expired within one accounting period.



Get: CurrentProvisions(self: BalanceSheet) -> CurrentProvisionsBalanceSheet



Set: CurrentProvisions(self: BalanceSheet) = value

"""

    CustomerAcceptances = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Amounts receivable from customers on short-term negotiable time drafts drawn on and accepted by the institution (also known as

            banker's acceptance transactions) that are outstanding on the reporting date.



Get: CustomerAcceptances(self: BalanceSheet) -> CustomerAcceptancesBalanceSheet



Set: CustomerAcceptances(self: BalanceSheet) = value

"""

    CustomerAccounts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Carrying value of amounts transferred by customers to third parties for security purposes that are expected to be returned or

            applied towards payment after one year or beyond the operating cycle, if longer.



Get: CustomerAccounts(self: BalanceSheet) -> CustomerAccountsBalanceSheet



Set: CustomerAccounts(self: BalanceSheet) = value

"""

    DebtDueBeyond = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Debt maturing beyond 5 years (eg. 5-10 years) or with no specified maturity, according to the debt maturity schedule reported by

            the company.



Get: DebtDueBeyond(self: BalanceSheet) -> DebtDueBeyondBalanceSheet



Set: DebtDueBeyond(self: BalanceSheet) = value

"""

    DebtDueInYear1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Debt due under 1 year according to the debt maturity schedule reported by the company.



Get: DebtDueInYear1(self: BalanceSheet) -> DebtDueInYear1BalanceSheet



Set: DebtDueInYear1(self: BalanceSheet) = value

"""

    DebtDueInYear2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Debt due under 2 years according to the debt maturity schedule reported by the company.



Get: DebtDueInYear2(self: BalanceSheet) -> DebtDueInYear2BalanceSheet



Set: DebtDueInYear2(self: BalanceSheet) = value

"""

    DebtDueInYear5 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Debt due within 5 year if the company provide maturity schedule in range e.g. 1-5 years, 2-5 years. Debt due under 5 years

            according to the debt maturity schedule reported by the company. If a range is reported by the company, the value will be collected

            under the maximum number of years (eg. 1-5 years, 3-5 years or 5 years will all be collected under this data point.)



Get: DebtDueInYear5(self: BalanceSheet) -> DebtDueInYear5BalanceSheet



Set: DebtDueInYear5(self: BalanceSheet) = value

"""

    DebtSecurities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Debt securities held as investments.



Get: DebtSecurities(self: BalanceSheet) -> DebtSecuritiesBalanceSheet



Set: DebtSecurities(self: BalanceSheet) = value

"""

    DebtSecuritiesinIssue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Any debt financial instrument issued instead of cash loan.



Get: DebtSecuritiesinIssue(self: BalanceSheet) -> DebtSecuritiesinIssueBalanceSheet



Set: DebtSecuritiesinIssue(self: BalanceSheet) = value

"""

    DebtTotal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The total aggregate of all written promises and/or agreements to repay a stated amount of borrowed funds at a specified date in

            the future; in a Non-Differentiated Balance Sheet.



Get: DebtTotal(self: BalanceSheet) -> DebtTotalBalanceSheet



Set: DebtTotal(self: BalanceSheet) = value

"""

    DeferredAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """An amount owed to a firm that is not expected to be received by the firm within one year from the date of the balance sheet.



Get: DeferredAssets(self: BalanceSheet) -> DeferredAssetsBalanceSheet



Set: DeferredAssets(self: BalanceSheet) = value

"""

    DeferredCosts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """An expenditure not recognized as a cost of operation of the period in which incurred, but carried forward to be written off in future

            periods.



Get: DeferredCosts(self: BalanceSheet) -> DeferredCostsBalanceSheet



Set: DeferredCosts(self: BalanceSheet) = value

"""

    DeferredIncomeTotal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Collections of cash or other assets related to revenue producing activity for which revenue has not yet been recognized on a Non-

            Differentiated Balance Sheet.



Get: DeferredIncomeTotal(self: BalanceSheet) -> DeferredIncomeTotalBalanceSheet



Set: DeferredIncomeTotal(self: BalanceSheet) = value

"""

    DeferredPolicyAcquisitionCosts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Net amount of deferred policy acquisition costs capitalized on contracts remaining in force as of the balance sheet date.



Get: DeferredPolicyAcquisitionCosts(self: BalanceSheet) -> DeferredPolicyAcquisitionCostsBalanceSheet



Set: DeferredPolicyAcquisitionCosts(self: BalanceSheet) = value

"""

    DeferredTaxAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """An asset on a company's balance sheet that may be used to reduce any subsequent period's income tax expense. Deferred tax

            assets can arise due to net loss carryovers, which are only recorded as assets if it is deemed more likely than not that the asset

            will be used in future fiscal periods.



Get: DeferredTaxAssets(self: BalanceSheet) -> DeferredTaxAssetsBalanceSheet



Set: DeferredTaxAssets(self: BalanceSheet) = value

"""

    DeferredTaxLiabilitiesTotal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A future tax liability, resulting from temporary differences between book (accounting) value of assets and liabilities and their tax

            value or timing differences between the recognition of gains and losses in financial statements, on a Non-Differentiated Balance

            Sheet.



Get: DeferredTaxLiabilitiesTotal(self: BalanceSheet) -> DeferredTaxLiabilitiesTotalBalanceSheet



Set: DeferredTaxLiabilitiesTotal(self: BalanceSheet) = value

"""

    DefinedPensionBenefit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The recognition of an asset where pension fund assets exceed promised benefits.



Get: DefinedPensionBenefit(self: BalanceSheet) -> DefinedPensionBenefitBalanceSheet



Set: DefinedPensionBenefit(self: BalanceSheet) = value

"""

    DepositCertificates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A savings certificate entitling the bearer to receive interest. A CD bears a maturity date, a specified fixed interest rate and can be

            issued in any denomination.



Get: DepositCertificates(self: BalanceSheet) -> DepositCertificatesBalanceSheet



Set: DepositCertificates(self: BalanceSheet) = value

"""

    DepositsbyBank = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Banks investment in the ongoing entity.



Get: DepositsbyBank(self: BalanceSheet) -> DepositsbyBankBalanceSheet



Set: DepositsbyBank(self: BalanceSheet) = value

"""

    DepositsMadeunderAssumedReinsuranceContract = property(lambda self: object(), lambda self, v: None,
                                                           lambda self: None)  # default
    """Deposits made under reinsurance.



Get: DepositsMadeunderAssumedReinsuranceContract(self: BalanceSheet) -> DepositsMadeunderAssumedReinsuranceContractBalanceSheet



Set: DepositsMadeunderAssumedReinsuranceContract(self: BalanceSheet) = value

"""

    DepositsReceivedunderCededInsuranceContract = property(lambda self: object(), lambda self, v: None,
                                                           lambda self: None)  # default
    """Deposit received through ceded insurance contract.



Get: DepositsReceivedunderCededInsuranceContract(self: BalanceSheet) -> DepositsReceivedunderCededInsuranceContractBalanceSheet



Set: DepositsReceivedunderCededInsuranceContract(self: BalanceSheet) = value

"""

    DerivativeAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Fair values of assets resulting from contracts that meet the criteria of being accounted for as derivative instruments, net of the

            effects of master netting arrangements.



Get: DerivativeAssets(self: BalanceSheet) -> DerivativeAssetsBalanceSheet



Set: DerivativeAssets(self: BalanceSheet) = value

"""

    DerivativeProductLiabilities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Fair values of all liabilities resulting from contracts that meet the criteria of being accounted for as derivative instruments; and

            which are expected to be extinguished or otherwise disposed of after one year or beyond the normal operating cycle.



Get: DerivativeProductLiabilities(self: BalanceSheet) -> DerivativeProductLiabilitiesBalanceSheet



Set: DerivativeProductLiabilities(self: BalanceSheet) = value

"""

    DividendsPayable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Sum of the carrying values of dividends declared but unpaid on equity securities issued and outstanding (also includes dividends

            collected on behalf of another owner of securities that are being held by entity) by the entity.



Get: DividendsPayable(self: BalanceSheet) -> DividendsPayableBalanceSheet



Set: DividendsPayable(self: BalanceSheet) = value

"""

    DueFromRelatedParties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """For an unclassified balance sheet, carrying amount as of the balance sheet date of obligations due all related parties.



Get: DueFromRelatedParties(self: BalanceSheet) -> DueFromRelatedPartiesBalanceSheet



Set: DueFromRelatedParties(self: BalanceSheet) = value

"""

    DuefromRelatedPartiesCurrent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Amounts owed to the company from a non-arm's length entity, due within the company's current operating cycle.



Get: DuefromRelatedPartiesCurrent(self: BalanceSheet) -> DuefromRelatedPartiesCurrentBalanceSheet



Set: DuefromRelatedPartiesCurrent(self: BalanceSheet) = value

"""

    DuefromRelatedPartiesNonCurrent = property(lambda self: object(), lambda self, v: None,
                                               lambda self: None)  # default
    """Amounts owed to the company from a non-arm's length entity, due after the company's current operating cycle.



Get: DuefromRelatedPartiesNonCurrent(self: BalanceSheet) -> DuefromRelatedPartiesNonCurrentBalanceSheet



Set: DuefromRelatedPartiesNonCurrent(self: BalanceSheet) = value

"""

    DuetoRelatedParties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Amounts owed by the company to a non-arm's length entity.



Get: DuetoRelatedParties(self: BalanceSheet) -> DuetoRelatedPartiesBalanceSheet



Set: DuetoRelatedParties(self: BalanceSheet) = value

"""

    DuetoRelatedPartiesCurrent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Amounts owed by the company to a non-arm's length entity that has to be repaid within the company's current operating cycle.



Get: DuetoRelatedPartiesCurrent(self: BalanceSheet) -> DuetoRelatedPartiesCurrentBalanceSheet



Set: DuetoRelatedPartiesCurrent(self: BalanceSheet) = value

"""

    DuetoRelatedPartiesNonCurrent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Amounts owed by the company to a non-arm's length entity that has to be repaid after the company's current operating cycle.



Get: DuetoRelatedPartiesNonCurrent(self: BalanceSheet) -> DuetoRelatedPartiesNonCurrentBalanceSheet



Set: DuetoRelatedPartiesNonCurrent(self: BalanceSheet) = value

"""

    ElectricUtilityPlant = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The amount for the electric plant related to the utility industry.



Get: ElectricUtilityPlant(self: BalanceSheet) -> ElectricUtilityPlantBalanceSheet



Set: ElectricUtilityPlant(self: BalanceSheet) = value

"""

    EmployeeBenefits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Carrying amount as of the balance sheet date of the portion of the obligations recognized for the various benefits provided to former

            or inactive employees, their beneficiaries, and covered dependents after employment but before retirement.



Get: EmployeeBenefits(self: BalanceSheet) -> EmployeeBenefitsBalanceSheet



Set: EmployeeBenefits(self: BalanceSheet) = value

"""

    EquityAttributableToOwnersOfParent = property(lambda self: object(), lambda self, v: None,
                                                  lambda self: None)  # default
    """



Get: EquityAttributableToOwnersOfParent(self: BalanceSheet) -> EquityAttributableToOwnersOfParentBalanceSheet



Set: EquityAttributableToOwnersOfParent(self: BalanceSheet) = value

"""

    EquityInvestments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This asset represents equity securities categorized neither as held-to-maturity nor trading.



Get: EquityInvestments(self: BalanceSheet) -> EquityInvestmentsBalanceSheet



Set: EquityInvestments(self: BalanceSheet) = value

"""

    EquitySharesInvestments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Investments in shares of a company representing ownership in that company.



Get: EquitySharesInvestments(self: BalanceSheet) -> EquitySharesInvestmentsBalanceSheet



Set: EquitySharesInvestments(self: BalanceSheet) = value

"""

    FederalFundsPurchased = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The amount borrowed by a bank, at the federal funds rate, from another bank to meet its reserve requirements.  This item is

            typically available for the bank industry.



Get: FederalFundsPurchased(self: BalanceSheet) -> FederalFundsPurchasedBalanceSheet



Set: FederalFundsPurchased(self: BalanceSheet) = value

"""

    FederalFundsPurchasedAndSecuritiesSoldUnderAgreementToRepurchase = property(lambda self: object(),
                                                                                lambda self, v: None,
                                                                                lambda self: None)  # default
    """This liability refers to the amount shown on the books that a bank with insufficient reserves borrows, at the federal funds rate, from

            another bank to meet its reserve requirements; and the amount of securities that an institution sells and agrees to repurchase at a

            specified date for a specified price, net of any reductions or offsets.



Get: FederalFundsPurchasedAndSecuritiesSoldUnderAgreementToRepurchase(self: BalanceSheet) -> FederalFundsPurchasedAndSecuritiesSoldUnderAgreementToRepurchaseBalanceSheet



Set: FederalFundsPurchasedAndSecuritiesSoldUnderAgreementToRepurchase(self: BalanceSheet) = value

"""

    FederalFundsSold = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Federal funds transactions involve lending (federal funds sold) or borrowing (federal funds purchased) of immediately available

            reserve balances.  This item is typically available for the bank industry.



Get: FederalFundsSold(self: BalanceSheet) -> FederalFundsSoldBalanceSheet



Set: FederalFundsSold(self: BalanceSheet) = value

"""

    FederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResell = property(lambda self: object(), lambda self, v: None,
                                                                            lambda self: None)  # default
    """This asset refers to very-short-term loans of funds to other banks and securities dealers.



Get: FederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResell(self: BalanceSheet) -> FederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellBalanceSheet



Set: FederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResell(self: BalanceSheet) = value

"""

    FederalHomeLoanBankStock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Federal Home Loan Bank stock represents an equity interest in a FHLB. It does not have a readily determinable fair value because

            its ownership is restricted and it lacks a market (liquidity).  This item is typically available for the bank industry.



Get: FederalHomeLoanBankStock(self: BalanceSheet) -> FederalHomeLoanBankStockBalanceSheet



Set: FederalHomeLoanBankStock(self: BalanceSheet) = value

"""

    FinanceLeaseReceivables = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Accounts owed to the bank in relation to capital leases. Capital/ finance lease obligation are contractual obligations that arise from

            obtaining the use of property or equipment via a capital lease contract.



Get: FinanceLeaseReceivables(self: BalanceSheet) -> FinanceLeaseReceivablesBalanceSheet



Set: FinanceLeaseReceivables(self: BalanceSheet) = value

"""

    FinanceLeaseReceivablesCurrent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Accounts owed to the bank in relation to capital leases to be received within the next accounting period. Capital/ finance lease

            obligations are contractual obligations that arise from obtaining the use of property or equipment via a capital lease contract.



Get: FinanceLeaseReceivablesCurrent(self: BalanceSheet) -> FinanceLeaseReceivablesCurrentBalanceSheet



Set: FinanceLeaseReceivablesCurrent(self: BalanceSheet) = value

"""

    FinanceLeaseReceivablesNonCurrent = property(lambda self: object(), lambda self, v: None,
                                                 lambda self: None)  # default
    """Accounts owed to the bank in relation to capital leases to be received beyond the next accounting period. Capital/ finance lease

            obligations are contractual obligations that arise from obtaining the use of property or equipment via a capital lease contract.



Get: FinanceLeaseReceivablesNonCurrent(self: BalanceSheet) -> FinanceLeaseReceivablesNonCurrentBalanceSheet



Set: FinanceLeaseReceivablesNonCurrent(self: BalanceSheet) = value

"""

    FinancialAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Fair values as of the balance sheet date of all assets resulting from contracts that meet the criteria of being accounted for as

            derivative instruments, net of the effects of master netting arrangements.



Get: FinancialAssets(self: BalanceSheet) -> FinancialAssetsBalanceSheet



Set: FinancialAssets(self: BalanceSheet) = value

"""

    FinancialAssetsDesignatedasFairValueThroughProfitorLossTotal = property(lambda self: object(), lambda self, v: None,
                                                                            lambda self: None)  # default
    """Financial assets that are held at fair value through profit or loss comprise assets held for trading and those financial assets

            designated as being held at fair value through profit or loss.



Get: FinancialAssetsDesignatedasFairValueThroughProfitorLossTotal(self: BalanceSheet) -> FinancialAssetsDesignatedasFairValueThroughProfitorLossTotalBalanceSheet



Set: FinancialAssetsDesignatedasFairValueThroughProfitorLossTotal(self: BalanceSheet) = value

"""

    FinancialInstrumentsSoldUnderAgreementsToRepurchase = property(lambda self: object(), lambda self, v: None,
                                                                   lambda self: None)  # default
    """The carrying value as of the balance sheet date of securities that an institution sells and agrees to repurchase (the identical or

            substantially the same securities) as a seller-borrower at a specified date for a specified price, also known as a repurchase

            agreement.  This item is typically available for bank industry.



Get: FinancialInstrumentsSoldUnderAgreementsToRepurchase(self: BalanceSheet) -> FinancialInstrumentsSoldUnderAgreementsToRepurchaseBalanceSheet



Set: FinancialInstrumentsSoldUnderAgreementsToRepurchase(self: BalanceSheet) = value

"""

    FinancialLiabilitiesCurrent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Financial related liabilities due within one year, including short term and current portions of long-term debt, capital leases and

            derivative liabilities.



Get: FinancialLiabilitiesCurrent(self: BalanceSheet) -> FinancialLiabilitiesCurrentBalanceSheet



Set: FinancialLiabilitiesCurrent(self: BalanceSheet) = value

"""

    FinancialLiabilitiesDesignatedasFairValueThroughProfitorLossTotal = property(lambda self: object(),
                                                                                 lambda self, v: None,
                                                                                 lambda self: None)  # default
    """Financial liabilities that are held at fair value through profit or loss.



Get: FinancialLiabilitiesDesignatedasFairValueThroughProfitorLossTotal(self: BalanceSheet) -> FinancialLiabilitiesDesignatedasFairValueThroughProfitorLossTotalBalanceSheet



Set: FinancialLiabilitiesDesignatedasFairValueThroughProfitorLossTotal(self: BalanceSheet) = value

"""

    FinancialLiabilitiesMeasuredatAmortizedCostTotal = property(lambda self: object(), lambda self, v: None,
                                                                lambda self: None)  # default
    """Financial liabilities carried at amortized cost.



Get: FinancialLiabilitiesMeasuredatAmortizedCostTotal(self: BalanceSheet) -> FinancialLiabilitiesMeasuredatAmortizedCostTotalBalanceSheet



Set: FinancialLiabilitiesMeasuredatAmortizedCostTotal(self: BalanceSheet) = value

"""

    FinancialLiabilitiesNonCurrent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Financial related liabilities due beyond one year, including long term debt, capital leases and derivative liabilities.



Get: FinancialLiabilitiesNonCurrent(self: BalanceSheet) -> FinancialLiabilitiesNonCurrentBalanceSheet



Set: FinancialLiabilitiesNonCurrent(self: BalanceSheet) = value

"""

    FinancialOrDerivativeInvestmentCurrentLiabilities = property(lambda self: object(), lambda self, v: None,
                                                                 lambda self: None)  # default
    """Financial instruments that are linked to a specific financial instrument or indicator or commodity, and through which specific

            financial risks can be traded in financial markets in their own right, such as financial options, futures, forwards, etc.



Get: FinancialOrDerivativeInvestmentCurrentLiabilities(self: BalanceSheet) -> FinancialOrDerivativeInvestmentCurrentLiabilitiesBalanceSheet



Set: FinancialOrDerivativeInvestmentCurrentLiabilities(self: BalanceSheet) = value

"""

    FinishedGoods = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The carrying amount as of the balance sheet date of merchandise or goods held by the company that are readily available for sale.

            This item is typically available for mining and manufacturing industries.



Get: FinishedGoods(self: BalanceSheet) -> FinishedGoodsBalanceSheet



Set: FinishedGoods(self: BalanceSheet) = value

"""

    FixedAssetsRevaluationReserve = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Reserves created by revaluation of assets.



Get: FixedAssetsRevaluationReserve(self: BalanceSheet) -> FixedAssetsRevaluationReserveBalanceSheet



Set: FixedAssetsRevaluationReserve(self: BalanceSheet) = value

"""

    FixedMaturityInvestments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This asset refers to types of investments that may be contained within the fixed maturity category which securities are having a

            stated final repayment date. Examples of items within this category may include bonds, including convertibles and bonds with

            warrants, and redeemable preferred stocks.



Get: FixedMaturityInvestments(self: BalanceSheet) -> FixedMaturityInvestmentsBalanceSheet



Set: FixedMaturityInvestments(self: BalanceSheet) = value

"""

    FlightFleetVehicleAndRelatedEquipments = property(lambda self: object(), lambda self, v: None,
                                                      lambda self: None)  # default
    """It is one of the important fixed assets for transportation industry, which includes bicycles, cars, motorcycles, trains, ships, boats,

            and aircraft.  This item is typically available for transportation industry.



Get: FlightFleetVehicleAndRelatedEquipments(self: BalanceSheet) -> FlightFleetVehicleAndRelatedEquipmentsBalanceSheet



Set: FlightFleetVehicleAndRelatedEquipments(self: BalanceSheet) = value

"""

    ForeclosedAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The carrying amount as of the balance sheet date of all assets obtained in full or partial satisfaction of a debt arrangement through

            foreclosure proceedings or defeasance; includes real and personal property; equity interests in corporations, partnerships, and joint

            ventures; and beneficial interest in trusts.  This item is typically typically available for bank industry.



Get: ForeclosedAssets(self: BalanceSheet) -> ForeclosedAssetsBalanceSheet



Set: ForeclosedAssets(self: BalanceSheet) = value

"""

    ForeignCurrencyTranslationAdjustments = property(lambda self: object(), lambda self, v: None,
                                                     lambda self: None)  # default
    """Changes to accumulated comprehensive income that results from the process of translating subsidiary financial statements and

            foreign equity investments into functional currency of the reporting company.



Get: ForeignCurrencyTranslationAdjustments(self: BalanceSheet) -> ForeignCurrencyTranslationAdjustmentsBalanceSheet



Set: ForeignCurrencyTranslationAdjustments(self: BalanceSheet) = value

"""

    FuturePolicyBenefits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Accounting policy pertaining to an insurance entity's net liability for future benefits (for example, death, cash surrender value) to be

            paid to or on behalf of policyholders, describing the bases, methodologies and components of the reserve, and assumptions

            regarding estimates of expected investment yields, mortality, morbidity, terminations and expenses.



Get: FuturePolicyBenefits(self: BalanceSheet) -> FuturePolicyBenefitsBalanceSheet



Set: FuturePolicyBenefits(self: BalanceSheet) = value

"""

    GainsLossesNotAffectingRetainedEarnings = property(lambda self: object(), lambda self, v: None,
                                                       lambda self: None)  # default
    """The aggregate amount of gains or losses that are not part of retained earnings. It is also called other comprehensive income.



Get: GainsLossesNotAffectingRetainedEarnings(self: BalanceSheet) -> GainsLossesNotAffectingRetainedEarningsBalanceSheet



Set: GainsLossesNotAffectingRetainedEarnings(self: BalanceSheet) = value

"""

    GeneralPartnershipCapital = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """In a limited partnership or master limited partnership form of business, this represents the balance of capital held by the general

            partners.



Get: GeneralPartnershipCapital(self: BalanceSheet) -> GeneralPartnershipCapitalBalanceSheet



Set: GeneralPartnershipCapital(self: BalanceSheet) = value

"""

    Goodwill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The excess of the cost of an acquired company over the sum of the fair market value of its identifiable individual assets less the

            liabilities.



Get: Goodwill(self: BalanceSheet) -> GoodwillBalanceSheet



Set: Goodwill(self: BalanceSheet) = value

"""

    GoodwillAndOtherIntangibleAssets = property(lambda self: object(), lambda self, v: None,
                                                lambda self: None)  # default
    """Rights or economic benefits, such as patents and goodwill, that is not physical in nature. They are those that are neither physical

            nor financial in nature, nevertheless, have value to the company. Intangibles are listed net of accumulated amortization.



Get: GoodwillAndOtherIntangibleAssets(self: BalanceSheet) -> GoodwillAndOtherIntangibleAssetsBalanceSheet



Set: GoodwillAndOtherIntangibleAssets(self: BalanceSheet) = value

"""

    GrossAccountsReceivable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Accounts owed to a company by customers within a year as a result of exchanging goods or services on credit.



Get: GrossAccountsReceivable(self: BalanceSheet) -> GrossAccountsReceivableBalanceSheet



Set: GrossAccountsReceivable(self: BalanceSheet) = value

"""

    GrossLoan = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Represents the sum of all loans (commercial, consumer, mortgage, etc.) as well as leases before any provisions for loan losses or

            unearned discounts.



Get: GrossLoan(self: BalanceSheet) -> GrossLoanBalanceSheet



Set: GrossLoan(self: BalanceSheet) = value

"""

    GrossNotesReceivable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """An amount representing an agreement for an unconditional promise by the maker to pay the entity (holder) a definite sum of money

            at a future date(s) within one year of the balance sheet date or the normal operating cycle. Such amount may include accrued

            interest receivable in accordance with the terms of the note. The note also may contain provisions including a discount or premium,

            payable on demand, secured, or unsecured, interest bearing or non-interest bearing, among myriad other features and

            characteristics. This item is typically available for bank industry.



Get: GrossNotesReceivable(self: BalanceSheet) -> GrossNotesReceivableBalanceSheet



Set: GrossNotesReceivable(self: BalanceSheet) = value

"""

    GrossPPE = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Carrying amount at the balance sheet date for long-lived physical assets used in the normal conduct of business and not intended

            for resale. This can include land, physical structures, machinery, vehicles, furniture, computer equipment, construction in progress,

            and similar items. Amount does not include depreciation.



Get: GrossPPE(self: BalanceSheet) -> GrossPPEBalanceSheet



Set: GrossPPE(self: BalanceSheet) = value

"""

    HedgingAssetsCurrent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A security transaction which expires within a 12 month period that reduces the risk on an existing investment position.



Get: HedgingAssetsCurrent(self: BalanceSheet) -> HedgingAssetsCurrentBalanceSheet



Set: HedgingAssetsCurrent(self: BalanceSheet) = value

"""

    HeldToMaturitySecurities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Debt securities that a firm has the ability and intent to hold until maturity.



Get: HeldToMaturitySecurities(self: BalanceSheet) -> HeldToMaturitySecuritiesBalanceSheet



Set: HeldToMaturitySecurities(self: BalanceSheet) = value

"""

    IncomeTaxPayable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A current liability account which reflects the amount of income taxes currently due to the federal, state, and local governments.



Get: IncomeTaxPayable(self: BalanceSheet) -> IncomeTaxPayableBalanceSheet



Set: IncomeTaxPayable(self: BalanceSheet) = value

"""

    InsuranceContractAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A contract under which one party (the insurer) accepts significant insurance risk from another party (the policyholder) by agreeing

            to compensate the policyholder if a specified uncertain future event (the insured event) adversely affects the policyholder. This

            includes Insurance Receivables and Premiums Receivables.



Get: InsuranceContractAssets(self: BalanceSheet) -> InsuranceContractAssetsBalanceSheet



Set: InsuranceContractAssets(self: BalanceSheet) = value

"""

    InsuranceContractLiabilities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Any type of insurance policy that protects an individual or business from the risk that they may be sued and held legally liable for

            something such as malpractice, injury or negligence. Liability insurance policies cover both legal costs and any legal payouts for

            which the insured would be responsible if found legally liable. Intentional damage and contractual liabilities are typically not covered

            in these types of policies.



Get: InsuranceContractLiabilities(self: BalanceSheet) -> InsuranceContractLiabilitiesBalanceSheet



Set: InsuranceContractLiabilities(self: BalanceSheet) = value

"""

    InsuranceFundsNonCurrent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Liabilities related to insurance funds that are dissolved after one year.



Get: InsuranceFundsNonCurrent(self: BalanceSheet) -> InsuranceFundsNonCurrentBalanceSheet



Set: InsuranceFundsNonCurrent(self: BalanceSheet) = value

"""

    InterestBearingBorrowingsNonCurrent = property(lambda self: object(), lambda self, v: None,
                                                   lambda self: None)  # default
    """Carrying amount of any interest-bearing loan which is due after one year.



Get: InterestBearingBorrowingsNonCurrent(self: BalanceSheet) -> InterestBearingBorrowingsNonCurrentBalanceSheet



Set: InterestBearingBorrowingsNonCurrent(self: BalanceSheet) = value

"""

    InterestBearingDepositsAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Deposit of money with a financial institution, in consideration of which the financial institution pays or credits interest, or amounts in the nature

            of interest.



Get: InterestBearingDepositsAssets(self: BalanceSheet) -> InterestBearingDepositsAssetsBalanceSheet



Set: InterestBearingDepositsAssets(self: BalanceSheet) = value

"""

    InterestBearingDepositsLiabilities = property(lambda self: object(), lambda self, v: None,
                                                  lambda self: None)  # default
    """The aggregate of all domestic and foreign deposits in the bank that earns interests.



Get: InterestBearingDepositsLiabilities(self: BalanceSheet) -> InterestBearingDepositsLiabilitiesBalanceSheet



Set: InterestBearingDepositsLiabilities(self: BalanceSheet) = value

"""

    InterestPayable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Sum of the carrying values as of the balance sheet date of interest payable on all forms of debt, including trade payable that has

            been incurred.



Get: InterestPayable(self: BalanceSheet) -> InterestPayableBalanceSheet



Set: InterestPayable(self: BalanceSheet) = value

"""

    InventoriesAdjustmentsAllowances = property(lambda self: object(), lambda self, v: None,
                                                lambda self: None)  # default
    """This item represents certain charges made in the current period in inventory resulting from such factors as breakage, spoilage,

            employee theft and shoplifting. This item is typically available for manufacturing, mining and utility industries.



Get: InventoriesAdjustmentsAllowances(self: BalanceSheet) -> InventoriesAdjustmentsAllowancesBalanceSheet



Set: InventoriesAdjustmentsAllowances(self: BalanceSheet) = value

"""

    Inventory = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A company's merchandise, raw materials, and finished and unfinished products which have not yet been sold.



Get: Inventory(self: BalanceSheet) -> InventoryBalanceSheet



Set: Inventory(self: BalanceSheet) = value

"""

    InvestedCapital = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Invested capital = common shareholders' equity + long term debt + current debt



Get: InvestedCapital(self: BalanceSheet) -> InvestedCapitalBalanceSheet



Set: InvestedCapital(self: BalanceSheet) = value

"""

    InvestmentContractLiabilities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Liabilities due on the insurance investment contract.



Get: InvestmentContractLiabilities(self: BalanceSheet) -> InvestmentContractLiabilitiesBalanceSheet



Set: InvestmentContractLiabilities(self: BalanceSheet) = value

"""

    InvestmentinFinancialAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Represents the sum of all financial investments (trading securities, available-for-sale securities, held-to-maturity securities, etc.)



Get: InvestmentinFinancialAssets(self: BalanceSheet) -> InvestmentinFinancialAssetsBalanceSheet



Set: InvestmentinFinancialAssets(self: BalanceSheet) = value

"""

    InvestmentProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Company's investments in properties net of accumulated depreciation, which generate a return.



Get: InvestmentProperties(self: BalanceSheet) -> InvestmentPropertiesBalanceSheet



Set: InvestmentProperties(self: BalanceSheet) = value

"""

    InvestmentsAndAdvances = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """All investments in affiliates, real estate, securities, etc. Non-current investment, not including marketable securities.



Get: InvestmentsAndAdvances(self: BalanceSheet) -> InvestmentsAndAdvancesBalanceSheet



Set: InvestmentsAndAdvances(self: BalanceSheet) = value

"""

    InvestmentsinAssociatesatCost = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A stake in any company which is more than 20% but less than 50%.



Get: InvestmentsinAssociatesatCost(self: BalanceSheet) -> InvestmentsinAssociatesatCostBalanceSheet



Set: InvestmentsinAssociatesatCost(self: BalanceSheet) = value

"""

    InvestmentsinJointVenturesatCost = property(lambda self: object(), lambda self, v: None,
                                                lambda self: None)  # default
    """A 50% stake in any company in which remaining 50% belongs to other company.



Get: InvestmentsinJointVenturesatCost(self: BalanceSheet) -> InvestmentsinJointVenturesatCostBalanceSheet



Set: InvestmentsinJointVenturesatCost(self: BalanceSheet) = value

"""

    InvestmentsInOtherVenturesUnderEquityMethod = property(lambda self: object(), lambda self, v: None,
                                                           lambda self: None)  # default
    """This item represents the carrying amount on the company's balance sheet of its investments in common stock of an equity method.

            This item is typically available for the insurance industry.



Get: InvestmentsInOtherVenturesUnderEquityMethod(self: BalanceSheet) -> InvestmentsInOtherVenturesUnderEquityMethodBalanceSheet



Set: InvestmentsInOtherVenturesUnderEquityMethod(self: BalanceSheet) = value

"""

    InvestmentsinSubsidiariesatCost = property(lambda self: object(), lambda self, v: None,
                                               lambda self: None)  # default
    """A stake in any company which is more than 51%.



Get: InvestmentsinSubsidiariesatCost(self: BalanceSheet) -> InvestmentsinSubsidiariesatCostBalanceSheet



Set: InvestmentsinSubsidiariesatCost(self: BalanceSheet) = value

"""

    ItemsinTheCourseofTransmissiontoOtherBanks = property(lambda self: object(), lambda self, v: None,
                                                          lambda self: None)  # default
    """Carrying amount as of the balance sheet date of drafts and bills of exchange that have been accepted by the reporting bank or by

            others for its own account, as its liability to holders of the drafts.



Get: ItemsinTheCourseofTransmissiontoOtherBanks(self: BalanceSheet) -> ItemsinTheCourseofTransmissiontoOtherBanksBalanceSheet



Set: ItemsinTheCourseofTransmissiontoOtherBanks(self: BalanceSheet) = value

"""

    LandAndImprovements = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Fixed Assets that specifically deal with land a company owns. Includes the improvements associated with land. This excludes land

            held for sale.



Get: LandAndImprovements(self: BalanceSheet) -> LandAndImprovementsBalanceSheet



Set: LandAndImprovements(self: BalanceSheet) = value

"""

    Leases = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Carrying amount at the balance sheet date of a long-lived, depreciable asset that is an addition or improvement to assets held

            under lease arrangement. This item is usually not available for the insurance industry.



Get: Leases(self: BalanceSheet) -> LeasesBalanceSheet



Set: Leases(self: BalanceSheet) = value

"""

    LiabilitiesHeldforSaleCurrent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Liabilities due within the next 12 months related from an asset classified as Held for Sale.



Get: LiabilitiesHeldforSaleCurrent(self: BalanceSheet) -> LiabilitiesHeldforSaleCurrentBalanceSheet



Set: LiabilitiesHeldforSaleCurrent(self: BalanceSheet) = value

"""

    LiabilitiesHeldforSaleNonCurrent = property(lambda self: object(), lambda self, v: None,
                                                lambda self: None)  # default
    """Liabilities related to an asset classified as held for sale excluding the portion due the next 12 months or operating cycle.



Get: LiabilitiesHeldforSaleNonCurrent(self: BalanceSheet) -> LiabilitiesHeldforSaleNonCurrentBalanceSheet



Set: LiabilitiesHeldforSaleNonCurrent(self: BalanceSheet) = value

"""

    LiabilitiesHeldforSaleTotal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Liabilities related to an asset classified as held for sale.



Get: LiabilitiesHeldforSaleTotal(self: BalanceSheet) -> LiabilitiesHeldforSaleTotalBalanceSheet



Set: LiabilitiesHeldforSaleTotal(self: BalanceSheet) = value

"""

    LiabilitiesOfDiscontinuedOperations = property(lambda self: object(), lambda self, v: None,
                                                   lambda self: None)  # default
    """The obligations arising from the sale, disposal, or planned sale in the near future (generally within one year) of a disposal group,

            including a component of the entity (discontinued operation). This item is typically available for bank industry.



Get: LiabilitiesOfDiscontinuedOperations(self: BalanceSheet) -> LiabilitiesOfDiscontinuedOperationsBalanceSheet



Set: LiabilitiesOfDiscontinuedOperations(self: BalanceSheet) = value

"""

    LimitedPartnershipCapital = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """In a limited partnership or master limited partnership form of business, this represents the balance of capital held by the limited

            partners.



Get: LimitedPartnershipCapital(self: BalanceSheet) -> LimitedPartnershipCapitalBalanceSheet



Set: LimitedPartnershipCapital(self: BalanceSheet) = value

"""

    LineOfCredit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The carrying value as of the balance sheet date of obligations drawn from a line of credit, which is a bank's commitment to make

            loans up to a specific amount.



Get: LineOfCredit(self: BalanceSheet) -> LineOfCreditBalanceSheet



Set: LineOfCredit(self: BalanceSheet) = value

"""

    LoansandAdvancestoBank = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The aggregate amount of loans and advances made to a bank or financial institution.



Get: LoansandAdvancestoBank(self: BalanceSheet) -> LoansandAdvancestoBankBalanceSheet



Set: LoansandAdvancestoBank(self: BalanceSheet) = value

"""

    LoansandAdvancestoCustomer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The aggregate amount of loans and advances made to customers.



Get: LoansandAdvancestoCustomer(self: BalanceSheet) -> LoansandAdvancestoCustomerBalanceSheet



Set: LoansandAdvancestoCustomer(self: BalanceSheet) = value

"""

    LoansHeldForSale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """It means the aggregate amount of loans receivable that will be sold to other entities.  This item is typically available for bank

            industry.



Get: LoansHeldForSale(self: BalanceSheet) -> LoansHeldForSaleBalanceSheet



Set: LoansHeldForSale(self: BalanceSheet) = value

"""

    LoansReceivable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Reflects the carrying amount of unpaid loans issued to other institutions for cash needs or an asset purchase.



Get: LoansReceivable(self: BalanceSheet) -> LoansReceivableBalanceSheet



Set: LoansReceivable(self: BalanceSheet) = value

"""

    LongTermCapitalLeaseObligation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Represents the total liability for long-term leases lasting over one year. Amount equal to the present value (the principal) at the

            beginning of the lease term less lease payments during the lease term.



Get: LongTermCapitalLeaseObligation(self: BalanceSheet) -> LongTermCapitalLeaseObligationBalanceSheet



Set: LongTermCapitalLeaseObligation(self: BalanceSheet) = value

"""

    LongTermDebt = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Sum of the carrying values as of the balance sheet date of all long-term debt, which is debt initially having maturities due after one

            year or beyond the operating cycle, if longer, but excluding the portions thereof scheduled to be repaid within one year or the

            normal operating cycle, if longer. Long-term debt includes notes payable, bonds payable, mortgage loans, convertible debt,

            subordinated debt and other types of long term debt.



Get: LongTermDebt(self: BalanceSheet) -> LongTermDebtBalanceSheet



Set: LongTermDebt(self: BalanceSheet) = value

"""

    LongTermDebtAndCapitalLeaseObligation = property(lambda self: object(), lambda self, v: None,
                                                     lambda self: None)  # default
    """All borrowings lasting over one year including long-term debt and long-term portion of capital lease obligations.



Get: LongTermDebtAndCapitalLeaseObligation(self: BalanceSheet) -> LongTermDebtAndCapitalLeaseObligationBalanceSheet



Set: LongTermDebtAndCapitalLeaseObligation(self: BalanceSheet) = value

"""

    LongTermInvestments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Often referred to simply as "investments". Long-term investments are to be held for many years and are not intended to be

            disposed in the near future. This group usually consists of four types of investments.



Get: LongTermInvestments(self: BalanceSheet) -> LongTermInvestmentsBalanceSheet



Set: LongTermInvestments(self: BalanceSheet) = value

"""

    LongTermProvisions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Provisions are created to protect the interests of one or both parties named in a contract or legal document which is a preparatory

            action or measure. Long-term provision is expired beyond one accounting period.



Get: LongTermProvisions(self: BalanceSheet) -> LongTermProvisionsBalanceSheet



Set: LongTermProvisions(self: BalanceSheet) = value

"""

    MachineryFurnitureEquipment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Fixed assets specifically dealing with tools, equipment and office furniture. This item is usually not available for the insurance and

            utility industries.



Get: MachineryFurnitureEquipment(self: BalanceSheet) -> MachineryFurnitureEquipmentBalanceSheet



Set: MachineryFurnitureEquipment(self: BalanceSheet) = value

"""

    MaterialsAndSupplies = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Aggregated amount of unprocessed materials to be used in manufacturing or production process and supplies that will be

            consumed. This item is typically available for the utility industry.



Get: MaterialsAndSupplies(self: BalanceSheet) -> MaterialsAndSuppliesBalanceSheet



Set: MaterialsAndSupplies(self: BalanceSheet) = value

"""

    MineralProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A fixed asset that represents strictly mineral type properties.  This item is typically available for mining industry.



Get: MineralProperties(self: BalanceSheet) -> MineralPropertiesBalanceSheet



Set: MineralProperties(self: BalanceSheet) = value

"""

    MinimumPensionLiabilities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The company's minimum pension obligations to its former employees, paid into a defined pension plan to satisfy all pension

            entitlements that have been earned by employees to date.



Get: MinimumPensionLiabilities(self: BalanceSheet) -> MinimumPensionLiabilitiesBalanceSheet



Set: MinimumPensionLiabilities(self: BalanceSheet) = value

"""

    MinorityInterest = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Carrying amount of the equity interests owned by non-controlling shareholders, partners, or other equity holders in one or more of

            the entities included in the reporting entity's consolidated financial statements.



Get: MinorityInterest(self: BalanceSheet) -> MinorityInterestBalanceSheet



Set: MinorityInterest(self: BalanceSheet) = value

"""

    MoneyMarketInvestments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Short-term (typical maturity is less than one year), highly liquid government or corporate debt instrument such as bankers'

            acceptance, promissory notes, and treasury bills.



Get: MoneyMarketInvestments(self: BalanceSheet) -> MoneyMarketInvestmentsBalanceSheet



Set: MoneyMarketInvestments(self: BalanceSheet) = value

"""

    MortgageAndConsumerloans = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """It means the aggregate amount of mortgage and consumer loans.  This item is typically available for the insurance industry.



Get: MortgageAndConsumerloans(self: BalanceSheet) -> MortgageAndConsumerloansBalanceSheet



Set: MortgageAndConsumerloans(self: BalanceSheet) = value

"""

    MortgageLoan = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This is a lien on real estate to protect a lender.  This item is typically available for bank industry.



Get: MortgageLoan(self: BalanceSheet) -> MortgageLoanBalanceSheet



Set: MortgageLoan(self: BalanceSheet) = value

"""

    NaturalGasFuelAndOther = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The amount for the natural gas, fuel and other items related to the utility industry, which might include oil and gas wells, the

            properties to exploit oil and gas or liquefied natural gas sites.



Get: NaturalGasFuelAndOther(self: BalanceSheet) -> NaturalGasFuelAndOtherBalanceSheet



Set: NaturalGasFuelAndOther(self: BalanceSheet) = value

"""

    NetDebt = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This is a metric that shows a company's overall debt situation by netting the value of a company's liabilities and

            debts with its cash and other similar liquid assets. It is calculated using [Current Debt] + [Long Term Debt] - [Cash and Cash

            Equivalents].



Get: NetDebt(self: BalanceSheet) -> NetDebtBalanceSheet



Set: NetDebt(self: BalanceSheet) = value

"""

    NetLoan = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Represents the value of all loans after deduction of the appropriate allowances for loan and lease losses.



Get: NetLoan(self: BalanceSheet) -> NetLoanBalanceSheet



Set: NetLoan(self: BalanceSheet) = value

"""

    NetPPE = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Tangible assets that are held by an entity for use in the production or supply of goods and services, for rental to others, or for

            administrative purposes and that are expected to provide economic benefit for more than one year; net of accumulated

            depreciation.



Get: NetPPE(self: BalanceSheet) -> NetPPEBalanceSheet



Set: NetPPE(self: BalanceSheet) = value

"""

    NetTangibleAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Net assets in physical form. This is calculated using Stockholders' Equity less Intangible Assets (including Goodwill).



Get: NetTangibleAssets(self: BalanceSheet) -> NetTangibleAssetsBalanceSheet



Set: NetTangibleAssets(self: BalanceSheet) = value

"""

    NetUtilityPlant = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Net utility plant might include water production, electric utility plan, natural gas, fuel and other, common utility plant and

            accumulated depreciation. This item is usually only available for utility industry.



Get: NetUtilityPlant(self: BalanceSheet) -> NetUtilityPlantBalanceSheet



Set: NetUtilityPlant(self: BalanceSheet) = value

"""

    NonCurrentAccountsReceivable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Accounts receivable represents sums owed to the business that the business records as revenue. Gross accounts receivable is

            accounts receivable before the business deducts uncollectable accounts to calculate the true value of accounts receivable.



Get: NonCurrentAccountsReceivable(self: BalanceSheet) -> NonCurrentAccountsReceivableBalanceSheet



Set: NonCurrentAccountsReceivable(self: BalanceSheet) = value

"""

    NonCurrentAccruedExpenses = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """An expense that has occurred but the transaction has not been entered in the accounting records. Accordingly, an adjusting entry

            is made to debit the appropriate expense account and to credit a liability account such as accrued expenses payable or accounts

            payable.



Get: NonCurrentAccruedExpenses(self: BalanceSheet) -> NonCurrentAccruedExpensesBalanceSheet



Set: NonCurrentAccruedExpenses(self: BalanceSheet) = value

"""

    NonCurrentDeferredAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Payments that will be assigned as expenses longer than one accounting period, but that are paid in advance and temporarily set up

            as non-current assets on the balance sheet.



Get: NonCurrentDeferredAssets(self: BalanceSheet) -> NonCurrentDeferredAssetsBalanceSheet



Set: NonCurrentDeferredAssets(self: BalanceSheet) = value

"""

    NonCurrentDeferredLiabilities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Represents the non-current portion of obligations, which is a liability that usually would have been paid but is now past due.



Get: NonCurrentDeferredLiabilities(self: BalanceSheet) -> NonCurrentDeferredLiabilitiesBalanceSheet



Set: NonCurrentDeferredLiabilities(self: BalanceSheet) = value

"""

    NonCurrentDeferredRevenue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The non-current portion of deferred revenue amount as of the balance sheet date. Deferred revenue is a liability related to revenue

            producing activity for which revenue has not yet been recognized, and is not expected be recognized in the next twelve months.



Get: NonCurrentDeferredRevenue(self: BalanceSheet) -> NonCurrentDeferredRevenueBalanceSheet



Set: NonCurrentDeferredRevenue(self: BalanceSheet) = value

"""

    NonCurrentDeferredTaxesAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A result of timing differences between taxable incomes reported on the income statement and taxable income from the company's

            tax return. Depending on the positioning of deferred income taxes, the field may be either current (within current assets) or non-

            current (below total current assets). Typically a company will have two deferred income taxes fields.



Get: NonCurrentDeferredTaxesAssets(self: BalanceSheet) -> NonCurrentDeferredTaxesAssetsBalanceSheet



Set: NonCurrentDeferredTaxesAssets(self: BalanceSheet) = value

"""

    NonCurrentDeferredTaxesLiabilities = property(lambda self: object(), lambda self, v: None,
                                                  lambda self: None)  # default
    """The estimated future tax obligations, which usually arise when different accounting methods are used for financial statements and

            tax statement It is also an add-back to the cash flow statement. Deferred income taxes include accumulated tax deferrals due to

            accelerated depreciation and investment credit.



Get: NonCurrentDeferredTaxesLiabilities(self: BalanceSheet) -> NonCurrentDeferredTaxesLiabilitiesBalanceSheet



Set: NonCurrentDeferredTaxesLiabilities(self: BalanceSheet) = value

"""

    NonCurrentNoteReceivables = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """An amount representing an agreement for an unconditional promise by the maker to pay the entity (holder) a definite sum of money

            at a future date(s), excluding the portion that is expected to be received within one year of the balance sheet date or the normal

            operating cycle, whichever is longer.



Get: NonCurrentNoteReceivables(self: BalanceSheet) -> NonCurrentNoteReceivablesBalanceSheet



Set: NonCurrentNoteReceivables(self: BalanceSheet) = value

"""

    NonCurrentOtherFinancialLiabilities = property(lambda self: object(), lambda self, v: None,
                                                   lambda self: None)  # default
    """Other long term financial liabilities not categorized and due over one year or a normal operating cycle (whichever is longer).



Get: NonCurrentOtherFinancialLiabilities(self: BalanceSheet) -> NonCurrentOtherFinancialLiabilitiesBalanceSheet



Set: NonCurrentOtherFinancialLiabilities(self: BalanceSheet) = value

"""

    NonCurrentPensionAndOtherPostretirementBenefitPlans = property(lambda self: object(), lambda self, v: None,
                                                                   lambda self: None)  # default
    """A loan issued by an insurance company that uses the cash value of a person's life insurance policy as collateral.  This item is usually

            only available in the insurance industry.



Get: NonCurrentPensionAndOtherPostretirementBenefitPlans(self: BalanceSheet) -> NonCurrentPensionAndOtherPostretirementBenefitPlansBalanceSheet



Set: NonCurrentPensionAndOtherPostretirementBenefitPlans(self: BalanceSheet) = value

"""

    NonCurrentPrepaidAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Sum of the carrying amounts that are paid in advance for expenses, which will be charged against earnings in periods after one

            year or beyond the operating cycle, if longer.



Get: NonCurrentPrepaidAssets(self: BalanceSheet) -> NonCurrentPrepaidAssetsBalanceSheet



Set: NonCurrentPrepaidAssets(self: BalanceSheet) = value

"""

    NonInterestBearingBorrowingsCurrent = property(lambda self: object(), lambda self, v: None,
                                                   lambda self: None)  # default
    """Non-interest bearing deposits in other financial institutions for short periods of time, usually less than 12 months.



Get: NonInterestBearingBorrowingsCurrent(self: BalanceSheet) -> NonInterestBearingBorrowingsCurrentBalanceSheet



Set: NonInterestBearingBorrowingsCurrent(self: BalanceSheet) = value

"""

    NonInterestBearingBorrowingsNonCurrent = property(lambda self: object(), lambda self, v: None,
                                                      lambda self: None)  # default
    """Non-interest bearing borrowings due after a year.



Get: NonInterestBearingBorrowingsNonCurrent(self: BalanceSheet) -> NonInterestBearingBorrowingsNonCurrentBalanceSheet



Set: NonInterestBearingBorrowingsNonCurrent(self: BalanceSheet) = value

"""

    NonInterestBearingBorrowingsTotal = property(lambda self: object(), lambda self, v: None,
                                                 lambda self: None)  # default
    """Non-interest bearing deposits in other financial institutions for relatively short periods of time; on a Non-Differentiated Balance

            Sheet.



Get: NonInterestBearingBorrowingsTotal(self: BalanceSheet) -> NonInterestBearingBorrowingsTotalBalanceSheet



Set: NonInterestBearingBorrowingsTotal(self: BalanceSheet) = value

"""

    NonInterestBearingDeposits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The aggregate amount of all domestic and foreign deposits in the banks that do not draw interest.



Get: NonInterestBearingDeposits(self: BalanceSheet) -> NonInterestBearingDepositsBalanceSheet



Set: NonInterestBearingDeposits(self: BalanceSheet) = value

"""

    NotesReceivable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """An amount representing an agreement for an unconditional promise by the maker to pay the entity (holder) a definite sum of money

            at a future date(s) within one year of the balance sheet date or the normal operating cycle, whichever is longer. Such amount may

            include accrued interest receivable in accordance with the terms of the note. The note also may contain provisions including a

            discount or premium, payable on demand, secured, or unsecured, interest bearing or non-interest bearing, among a myriad of other

            features and characteristics.



Get: NotesReceivable(self: BalanceSheet) -> NotesReceivableBalanceSheet



Set: NotesReceivable(self: BalanceSheet) = value

"""

    OperatingLeaseAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A contract that allows for the use of an asset, but does not convey rights of ownership of the asset. An operating lease is not

            capitalized; it is accounted for as a rental expense in what is known as "off balance sheet financing." For the lessor, the asset being

            leased is accounted for as an asset and is depreciated as such.



Get: OperatingLeaseAssets(self: BalanceSheet) -> OperatingLeaseAssetsBalanceSheet



Set: OperatingLeaseAssets(self: BalanceSheet) = value

"""

    OrdinarySharesNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Number of Common or Ordinary Shares.



Get: OrdinarySharesNumber(self: BalanceSheet) -> OrdinarySharesNumberBalanceSheet



Set: OrdinarySharesNumber(self: BalanceSheet) = value

"""

    OtherAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Other non-current assets that are not otherwise classified.



Get: OtherAssets(self: BalanceSheet) -> OtherAssetsBalanceSheet



Set: OtherAssets(self: BalanceSheet) = value

"""

    OtherBorrowedFunds = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Other borrowings by the bank to fund its activities that cannot be identified by other specific items in the Liabilities section.



Get: OtherBorrowedFunds(self: BalanceSheet) -> OtherBorrowedFundsBalanceSheet



Set: OtherBorrowedFunds(self: BalanceSheet) = value

"""

    OtherCapitalStock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Other Capital Stock that is not otherwise classified.



Get: OtherCapitalStock(self: BalanceSheet) -> OtherCapitalStockBalanceSheet



Set: OtherCapitalStock(self: BalanceSheet) = value

"""

    OtherCurrentAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Other current assets that are not otherwise classified.



Get: OtherCurrentAssets(self: BalanceSheet) -> OtherCurrentAssetsBalanceSheet



Set: OtherCurrentAssets(self: BalanceSheet) = value

"""

    OtherCurrentBorrowings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Short Term Borrowings that are not otherwise classified.



Get: OtherCurrentBorrowings(self: BalanceSheet) -> OtherCurrentBorrowingsBalanceSheet



Set: OtherCurrentBorrowings(self: BalanceSheet) = value

"""

    OtherCurrentLiabilities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Other current liabilities = Total current liabilities - Payables and accrued Expenses - Current debt and capital lease obligation -

            provisions, current - deferred liabilities, current.



Get: OtherCurrentLiabilities(self: BalanceSheet) -> OtherCurrentLiabilitiesBalanceSheet



Set: OtherCurrentLiabilities(self: BalanceSheet) = value

"""

    OtherEquityAdjustments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Other adjustments to stockholders' equity that is not otherwise classified, including other reserves.



Get: OtherEquityAdjustments(self: BalanceSheet) -> OtherEquityAdjustmentsBalanceSheet



Set: OtherEquityAdjustments(self: BalanceSheet) = value

"""

    OtherEquityInterest = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Other equity instruments issued by the company that cannot be identified by other specific items in the Equity section.



Get: OtherEquityInterest(self: BalanceSheet) -> OtherEquityInterestBalanceSheet



Set: OtherEquityInterest(self: BalanceSheet) = value

"""

    OtherFinancialLiabilities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Other financial liabilities not categorized.



Get: OtherFinancialLiabilities(self: BalanceSheet) -> OtherFinancialLiabilitiesBalanceSheet



Set: OtherFinancialLiabilities(self: BalanceSheet) = value

"""

    OtherIntangibleAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Sum of the carrying amounts of all intangible assets, excluding goodwill.



Get: OtherIntangibleAssets(self: BalanceSheet) -> OtherIntangibleAssetsBalanceSheet



Set: OtherIntangibleAssets(self: BalanceSheet) = value

"""

    OtherInventories = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Other non-current inventories not otherwise classified.



Get: OtherInventories(self: BalanceSheet) -> OtherInventoriesBalanceSheet



Set: OtherInventories(self: BalanceSheet) = value

"""

    OtherInvestedAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """An item represents all the other investments or/and securities that cannot be defined into any category above. This item is typically

            available for the insurance industry.



Get: OtherInvestedAssets(self: BalanceSheet) -> OtherInvestedAssetsBalanceSheet



Set: OtherInvestedAssets(self: BalanceSheet) = value

"""

    OtherInvestments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Investments that are neither Investment in Financial Assets nor Long term equity investment, not expected to be cashed within a

            year.



Get: OtherInvestments(self: BalanceSheet) -> OtherInvestmentsBalanceSheet



Set: OtherInvestments(self: BalanceSheet) = value

"""

    OtherLiabilities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This item is available for bank and insurance industries.



Get: OtherLiabilities(self: BalanceSheet) -> OtherLiabilitiesBalanceSheet



Set: OtherLiabilities(self: BalanceSheet) = value

"""

    OtherLoanAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Reflects the carrying amount of any other unpaid loans, an asset of the bank.



Get: OtherLoanAssets(self: BalanceSheet) -> OtherLoanAssetsBalanceSheet



Set: OtherLoanAssets(self: BalanceSheet) = value

"""

    OtherLoansCurrent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Other loans between the customer and bank which cannot be identified by other specific items in the Debt section, due within the

            next 12 months or operating cycle.



Get: OtherLoansCurrent(self: BalanceSheet) -> OtherLoansCurrentBalanceSheet



Set: OtherLoansCurrent(self: BalanceSheet) = value

"""

    OtherLoansNonCurrent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Other loans between the customer and bank which cannot be identified by other specific items in the Debt section, due beyond the

            current operating cycle.



Get: OtherLoansNonCurrent(self: BalanceSheet) -> OtherLoansNonCurrentBalanceSheet



Set: OtherLoansNonCurrent(self: BalanceSheet) = value

"""

    OtherLoansTotal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Total other loans between the customer and bank which cannot be identified by other specific items in the Debt section; in a Non-

            Differentiated Balance Sheet.



Get: OtherLoansTotal(self: BalanceSheet) -> OtherLoansTotalBalanceSheet



Set: OtherLoansTotal(self: BalanceSheet) = value

"""

    OtherNonCurrentAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Other non-current assets that are not otherwise classified.



Get: OtherNonCurrentAssets(self: BalanceSheet) -> OtherNonCurrentAssetsBalanceSheet



Set: OtherNonCurrentAssets(self: BalanceSheet) = value

"""

    OtherNonCurrentLiabilities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This item is usually not available for bank and insurance industries.



Get: OtherNonCurrentLiabilities(self: BalanceSheet) -> OtherNonCurrentLiabilitiesBalanceSheet



Set: OtherNonCurrentLiabilities(self: BalanceSheet) = value

"""

    OtherPayable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Payables and Accrued Expenses that are not defined as Trade, Tax or Dividends related.



Get: OtherPayable(self: BalanceSheet) -> OtherPayableBalanceSheet



Set: OtherPayable(self: BalanceSheet) = value

"""

    OtherProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Other fixed assets not otherwise classified.



Get: OtherProperties(self: BalanceSheet) -> OtherPropertiesBalanceSheet



Set: OtherProperties(self: BalanceSheet) = value

"""

    OtherRealEstateOwned = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Carrying amount as of the balance sheet date of other real estate, which may include real estate investments, real estate loans

            that qualify as investments in real estate, and premises that are no longer used in operations may also be included in real estate

            owned. This does not include real estate assets taken in settlement of troubled loans through surrender or foreclosure.  This item is

            typically available for bank industry.



Get: OtherRealEstateOwned(self: BalanceSheet) -> OtherRealEstateOwnedBalanceSheet



Set: OtherRealEstateOwned(self: BalanceSheet) = value

"""

    OtherReceivables = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Other non-current receivables not otherwise classified.



Get: OtherReceivables(self: BalanceSheet) -> OtherReceivablesBalanceSheet



Set: OtherReceivables(self: BalanceSheet) = value

"""

    OtherReserves = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Other reserves owned by the company that cannot be identified by other specific items in the Reserves section.



Get: OtherReserves(self: BalanceSheet) -> OtherReservesBalanceSheet



Set: OtherReserves(self: BalanceSheet) = value

"""

    OtherShortTermInvestments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The aggregate amount of short term investments, which will be expired within one year that are not specifically classified as

            Available-for-Sale, Held-to-Maturity,  nor Trading investments.



Get: OtherShortTermInvestments(self: BalanceSheet) -> OtherShortTermInvestmentsBalanceSheet



Set: OtherShortTermInvestments(self: BalanceSheet) = value

"""

    Payables = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The sum of all payables owed and expected to be paid within one year or one operating cycle, including accounts payables, taxes

            payable, dividends payable and all other current payables.



Get: Payables(self: BalanceSheet) -> PayablesBalanceSheet



Set: Payables(self: BalanceSheet) = value

"""

    PayablesAndAccruedExpenses = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This balance sheet account includes all current payables and accrued expenses.



Get: PayablesAndAccruedExpenses(self: BalanceSheet) -> PayablesAndAccruedExpensesBalanceSheet



Set: PayablesAndAccruedExpenses(self: BalanceSheet) = value

"""

    PensionandOtherPostRetirementBenefitPlansCurrent = property(lambda self: object(), lambda self, v: None,
                                                                lambda self: None)  # default
    """Total of the carrying values as of the balance sheet date of obligations incurred through that date and payable for obligations related

            to services received from employees, such as accrued salaries and bonuses, payroll taxes and fringe benefits.



Get: PensionandOtherPostRetirementBenefitPlansCurrent(self: BalanceSheet) -> PensionandOtherPostRetirementBenefitPlansCurrentBalanceSheet



Set: PensionandOtherPostRetirementBenefitPlansCurrent(self: BalanceSheet) = value

"""

    PensionAndOtherPostretirementBenefitPlansTotal = property(lambda self: object(), lambda self, v: None,
                                                              lambda self: None)  # default
    """Total of the carrying values as of the balance sheet date of obligations incurred through that date and payable for obligations related

            to services received from employees, such as accrued salaries and bonuses, payroll taxes and fringe benefits. Used to reflect the

            current portion of the liabilities (due within one year or within the normal operating cycle if longer).



Get: PensionAndOtherPostretirementBenefitPlansTotal(self: BalanceSheet) -> PensionAndOtherPostretirementBenefitPlansTotalBalanceSheet



Set: PensionAndOtherPostretirementBenefitPlansTotal(self: BalanceSheet) = value

"""

    PolicyholderFunds = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The total liability as of the balance sheet date of amounts due to policy holders, excluding future policy benefits and claims,

            including unpaid policy dividends, retrospective refunds, and undistributed earnings on participating business.



Get: PolicyholderFunds(self: BalanceSheet) -> PolicyholderFundsBalanceSheet



Set: PolicyholderFunds(self: BalanceSheet) = value

"""

    PolicyLoans = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A loan issued by an insurance company that uses the cash value of a person's life insurance policy as collateral. This item is usually

            only available for insurance industry.



Get: PolicyLoans(self: BalanceSheet) -> PolicyLoansBalanceSheet



Set: PolicyLoans(self: BalanceSheet) = value

"""

    PolicyReservesBenefits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Accounting policy pertaining to an insurance entity's net liability for future benefits (for example, death, cash surrender value) to be

            paid to or on behalf of policyholders, describing the bases, methodologies and components of the reserve, and assumptions

            regarding estimates of expected investment yields, mortality, morbidity, terminations and expenses.



Get: PolicyReservesBenefits(self: BalanceSheet) -> PolicyReservesBenefitsBalanceSheet



Set: PolicyReservesBenefits(self: BalanceSheet) = value

"""

    PreferredSecuritiesOutsideStockEquity = property(lambda self: object(), lambda self, v: None,
                                                     lambda self: None)  # default
    """Preferred securities that that firm treats as a liability. It includes convertible preferred stock or redeemable preferred stock.



Get: PreferredSecuritiesOutsideStockEquity(self: BalanceSheet) -> PreferredSecuritiesOutsideStockEquityBalanceSheet



Set: PreferredSecuritiesOutsideStockEquity(self: BalanceSheet) = value

"""

    PreferredSharesNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Number of Preferred Shares.



Get: PreferredSharesNumber(self: BalanceSheet) -> PreferredSharesNumberBalanceSheet



Set: PreferredSharesNumber(self: BalanceSheet) = value

"""

    PreferredStock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Preferred stock (all issues) at par value, as reported within the Stockholder's Equity section of the balance sheet.



Get: PreferredStock(self: BalanceSheet) -> PreferredStockBalanceSheet



Set: PreferredStock(self: BalanceSheet) = value

"""

    PreferredStockEquity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A class of ownership in a company that has a higher claim on the assets and earnings than common stock. Preferred stock

            generally has a dividend that must be paid out before dividends to common stockholders and the shares usually do not have voting

            rights.



Get: PreferredStockEquity(self: BalanceSheet) -> PreferredStockEquityBalanceSheet



Set: PreferredStockEquity(self: BalanceSheet) = value

"""

    PrepaidAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Sum of the carrying amounts that are paid in advance for expenses, which will be charged against earnings in subsequent periods.



Get: PrepaidAssets(self: BalanceSheet) -> PrepaidAssetsBalanceSheet



Set: PrepaidAssets(self: BalanceSheet) = value

"""

    PreTreShaNum = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The treasury stock number of preferred shares. This represents the number of preferred shares owned by the company as a result

            of share repurchase programs or donations.



Get: PreTreShaNum(self: BalanceSheet) -> PreTreShaNumBalanceSheet



Set: PreTreShaNum(self: BalanceSheet) = value

"""

    Properties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Tangible assets that are held by an entity for use in the production or supply of goods and services, for rental to others, or for

            administrative purposes and that are expected to provide economic benefit for more than one year. This item is available for

            manufacturing, bank and transportation industries.



Get: Properties(self: BalanceSheet) -> PropertiesBalanceSheet



Set: Properties(self: BalanceSheet) = value

"""

    ProvisionsTotal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Provisions are created to protect the interests of one or both parties named in a contract or legal document, which is a preparatory

            action or measure. Current provision is expired within one accounting period.



Get: ProvisionsTotal(self: BalanceSheet) -> ProvisionsTotalBalanceSheet



Set: ProvisionsTotal(self: BalanceSheet) = value

"""

    RawMaterials = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Carrying amount as of the balance sheet data of unprocessed items to be consumed in the manufacturing or production process.

            This item is available for manufacturing and mining industries.



Get: RawMaterials(self: BalanceSheet) -> RawMaterialsBalanceSheet



Set: RawMaterials(self: BalanceSheet) = value

"""

    Receivables = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The sum of all receivables owed by customers and affiliates within one year, including accounts receivable, notes receivable,

            premiums receivable, and other current receivables.



Get: Receivables(self: BalanceSheet) -> ReceivablesBalanceSheet



Set: Receivables(self: BalanceSheet) = value

"""

    ReceivablesAdjustmentsAllowances = property(lambda self: object(), lambda self, v: None,
                                                lambda self: None)  # default
    """A provision relating to a written agreement to receive money at a specified future date(s) (within one year from the reporting date

            or the normal operating cycle, whichever is longer), consisting of principal as well as any accrued interest).



Get: ReceivablesAdjustmentsAllowances(self: BalanceSheet) -> ReceivablesAdjustmentsAllowancesBalanceSheet



Set: ReceivablesAdjustmentsAllowances(self: BalanceSheet) = value

"""

    RegulatoryAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Carrying amount as of the balance sheet date of capitalized costs of regulated entities that are expected to be recovered through

            revenue sources over one year or beyond the normal operating cycle.



Get: RegulatoryAssets(self: BalanceSheet) -> RegulatoryAssetsBalanceSheet



Set: RegulatoryAssets(self: BalanceSheet) = value

"""

    RegulatoryLiabilities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The amount for the individual regulatory noncurrent liability as itemized in a table of regulatory noncurrent liabilities as of the end of

            the period. Such things as the costs of energy efficiency programs and low-income energy assistances programs and deferred fuel.

            This item is usually only available for utility industry.



Get: RegulatoryLiabilities(self: BalanceSheet) -> RegulatoryLiabilitiesBalanceSheet



Set: RegulatoryLiabilities(self: BalanceSheet) = value

"""

    ReinsuranceAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Reinsurance asset is insurance that is purchased by an insurance company from another insurance company.



Get: ReinsuranceAssets(self: BalanceSheet) -> ReinsuranceAssetsBalanceSheet



Set: ReinsuranceAssets(self: BalanceSheet) = value

"""

    ReinsuranceBalancesPayable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The carrying amount as of the balance sheet date of the known and estimated amounts owed to insurers under reinsurance

            treaties or other arrangements. This item is usually only available for insurance industry.



Get: ReinsuranceBalancesPayable(self: BalanceSheet) -> ReinsuranceBalancesPayableBalanceSheet



Set: ReinsuranceBalancesPayable(self: BalanceSheet) = value

"""

    ReinsuranceRecoverable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The amount of benefits the ceding insurer expects to recover on insurance policies ceded to other insurance entities as of the

            balance sheet date for all guaranteed benefit types. It includes estimated amounts for claims incurred but not reported, and policy

            benefits, net of any related valuation allowance.



Get: ReinsuranceRecoverable(self: BalanceSheet) -> ReinsuranceRecoverableBalanceSheet



Set: ReinsuranceRecoverable(self: BalanceSheet) = value

"""

    RestrictedCash = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The carrying amounts of cash and cash equivalent items, which are restricted as to withdrawal or usage. Restrictions may include

            legally restricted deposits held as compensating balances against short-term borrowing arrangements, contracts entered into with

            others, or entity statements of intention with regard to particular deposits; however, time deposits and short-term certificates of

            deposit are not generally included in legally restricted deposits. Excludes compensating balance arrangements that are not

            agreements, which legally restrict the use of cash amounts shown on the balance sheet. For a classified balance sheet, represents

            the current portion only (the non-current portion has a separate concept); for an unclassified balance sheet represents the entire

            amount. This item is usually not available for bank and insurance industries.



Get: RestrictedCash(self: BalanceSheet) -> RestrictedCashBalanceSheet



Set: RestrictedCash(self: BalanceSheet) = value

"""

    RestrictedCashAndCashEquivalents = property(lambda self: object(), lambda self, v: None,
                                                lambda self: None)  # default
    """The carrying amounts of cash and cash equivalent items which are restricted as to withdrawal or usage. This item is available for

            bank and insurance industries.



Get: RestrictedCashAndCashEquivalents(self: BalanceSheet) -> RestrictedCashAndCashEquivalentsBalanceSheet



Set: RestrictedCashAndCashEquivalents(self: BalanceSheet) = value

"""

    RestrictedCashAndInvestments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The cash and investments whose use in whole or in part is restricted for the long-term, generally by contractual agreements or

            regulatory requirements. This item is usually only available for bank industry.



Get: RestrictedCashAndInvestments(self: BalanceSheet) -> RestrictedCashAndInvestmentsBalanceSheet



Set: RestrictedCashAndInvestments(self: BalanceSheet) = value

"""

    RestrictedCommonStock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Shares of stock for which sale is contractually or governmentally restricted for a given period of time. Stock that is acquired through

            an employee stock option plan or other private means may not be transferred. Restricted stock must be traded in compliance with

            special SEC regulations.



Get: RestrictedCommonStock(self: BalanceSheet) -> RestrictedCommonStockBalanceSheet



Set: RestrictedCommonStock(self: BalanceSheet) = value

"""

    RestrictedInvestments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Investments whose use is restricted in whole or in part, generally by contractual agreements or regulatory requirements. This item

            is usually only available for bank industry.



Get: RestrictedInvestments(self: BalanceSheet) -> RestrictedInvestmentsBalanceSheet



Set: RestrictedInvestments(self: BalanceSheet) = value

"""

    RetainedEarnings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The cumulative net income of the company from the date of its inception (or reorganization) to the date of the financial statement

            less the cumulative distributions to shareholders either directly (dividends) or indirectly (treasury stock).



Get: RetainedEarnings(self: BalanceSheet) -> RetainedEarningsBalanceSheet



Set: RetainedEarnings(self: BalanceSheet) = value

"""

    SecuritiesAndInvestments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Asset, often applicable to Banks, which refers to the aggregate amount of all securities and investments.



Get: SecuritiesAndInvestments(self: BalanceSheet) -> SecuritiesAndInvestmentsBalanceSheet



Set: SecuritiesAndInvestments(self: BalanceSheet) = value

"""

    SecuritiesLendingCollateral = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The carrying value as of the balance sheet date of the liabilities collateral securities loaned to other broker-dealers. Borrowers of

            securities generally are required to provide collateral to the lenders of securities, commonly cash but sometimes other securities or

            standby letters of credit, with a value slightly higher than that of the securities borrowed.



Get: SecuritiesLendingCollateral(self: BalanceSheet) -> SecuritiesLendingCollateralBalanceSheet



Set: SecuritiesLendingCollateral(self: BalanceSheet) = value

"""

    SecuritiesLoaned = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The carrying value as of the balance sheet date of securities loaned to other broker dealers, typically used by such parties to cover

            short sales, secured by cash or other securities furnished by such parties until the borrowing is closed.



Get: SecuritiesLoaned(self: BalanceSheet) -> SecuritiesLoanedBalanceSheet



Set: SecuritiesLoaned(self: BalanceSheet) = value

"""

    SecurityAgreeToBeResell = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The carrying value of funds outstanding loaned in the form of security resale agreements if the agreement requires the purchaser to

            resell the identical security purchased or a security that meets the definition of "substantially the same" in the case of a dollar roll.

            Also includes purchases of participations in pools of securities that are subject to a resale agreement.



Get: SecurityAgreeToBeResell(self: BalanceSheet) -> SecurityAgreeToBeResellBalanceSheet



Set: SecurityAgreeToBeResell(self: BalanceSheet) = value

"""

    SecurityBorrowed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The securities borrowed or on loan, which is the temporary loan of securities by a lender to a borrower in exchange for cash.  This

            item is usually only available for bank industry.



Get: SecurityBorrowed(self: BalanceSheet) -> SecurityBorrowedBalanceSheet



Set: SecurityBorrowed(self: BalanceSheet) = value

"""

    SecuritySoldNotYetRepurchased = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Represent obligations of the company to deliver the specified security at the contracted price and, thereby, create a liability to

            purchase the security in the market at prevailing prices.



Get: SecuritySoldNotYetRepurchased(self: BalanceSheet) -> SecuritySoldNotYetRepurchasedBalanceSheet



Set: SecuritySoldNotYetRepurchased(self: BalanceSheet) = value

"""

    SeparateAccountAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The fair value of the assets held by the company for the benefit of separate account policyholders.



Get: SeparateAccountAssets(self: BalanceSheet) -> SeparateAccountAssetsBalanceSheet



Set: SeparateAccountAssets(self: BalanceSheet) = value

"""

    SeparateAccountBusiness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Refers to revenue that is generated that is not part of typical operations.



Get: SeparateAccountBusiness(self: BalanceSheet) -> SeparateAccountBusinessBalanceSheet



Set: SeparateAccountBusiness(self: BalanceSheet) = value

"""

    ShareIssued = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of authorized shares that is sold to and held by the shareholders of a company, regardless of whether they are insiders,

            institutional investors or the general public. Unlike shares that are held as treasury stock, shares that have been retired are not

            included in this figure. The amount of issued shares can be all or part of the total amount of authorized shares of a corporation.



Get: ShareIssued(self: BalanceSheet) -> ShareIssuedBalanceSheet



Set: ShareIssued(self: BalanceSheet) = value

"""

    ShortTermInvestmentsAvailableForSale = property(lambda self: object(), lambda self, v: None,
                                                    lambda self: None)  # default
    """The current assets section of a company's balance sheet that contains the investments that a company holds with the purpose for

            trading.



Get: ShortTermInvestmentsAvailableForSale(self: BalanceSheet) -> ShortTermInvestmentsAvailableForSaleBalanceSheet



Set: ShortTermInvestmentsAvailableForSale(self: BalanceSheet) = value

"""

    ShortTermInvestmentsHeldToMaturity = property(lambda self: object(), lambda self, v: None,
                                                  lambda self: None)  # default
    """The current assets section of a company's balance sheet that contains the investments that a company has made that will expire

            at a fixed date within one year.



Get: ShortTermInvestmentsHeldToMaturity(self: BalanceSheet) -> ShortTermInvestmentsHeldToMaturityBalanceSheet



Set: ShortTermInvestmentsHeldToMaturity(self: BalanceSheet) = value

"""

    ShortTermInvestmentsTrading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The current assets section of a company's balance sheet that contains the investments that a company can trade at any moment.



Get: ShortTermInvestmentsTrading(self: BalanceSheet) -> ShortTermInvestmentsTradingBalanceSheet



Set: ShortTermInvestmentsTrading(self: BalanceSheet) = value

"""

    StockholdersEquity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The residual interest in the assets of the enterprise that remains after deducting its liabilities. Equity is increased by owners'

            investments and by comprehensive income, and it is reduced by distributions to the owners.



Get: StockholdersEquity(self: BalanceSheet) -> StockholdersEquityBalanceSheet



Set: StockholdersEquity(self: BalanceSheet) = value

"""

    SubordinatedLiabilities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The total carrying value of securities loaned to other broker dealers, typically used by such parties to cover short sales, secured by

            cash or other securities furnished by such parties until the borrowing is closed; in a Non-Differentiated Balance Sheet.



Get: SubordinatedLiabilities(self: BalanceSheet) -> SubordinatedLiabilitiesBalanceSheet



Set: SubordinatedLiabilities(self: BalanceSheet) = value

"""

    TangibleBookValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The company's total book value less the value of any intangible assets.

            Methodology: Common Stock Equity minus Goodwill and Other Intangible Assets



Get: TangibleBookValue(self: BalanceSheet) -> TangibleBookValueBalanceSheet



Set: TangibleBookValue(self: BalanceSheet) = value

"""

    TaxAssetsTotal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Sum of total tax assets in a Non-Differentiated Balance Sheet, includes Tax Receivables and Deferred Tax Assets.



Get: TaxAssetsTotal(self: BalanceSheet) -> TaxAssetsTotalBalanceSheet



Set: TaxAssetsTotal(self: BalanceSheet) = value

"""

    TaxesAssetsCurrent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Carrying amount due within one year of the balance sheet date (or one operating cycle, if longer) from tax authorities as of the

            balance sheet date representing refunds of overpayments or recoveries based on agreed-upon resolutions of disputes, and current

            deferred tax assets.



Get: TaxesAssetsCurrent(self: BalanceSheet) -> TaxesAssetsCurrentBalanceSheet



Set: TaxesAssetsCurrent(self: BalanceSheet) = value

"""

    TaxesReceivable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Carrying amount due within one year of the balance sheet date (or one operating cycle, if longer) from tax authorities as of the

            balance sheet date representing refunds of overpayments or recoveries based on agreed-upon resolutions of disputes. This item is

            usually not available for bank industry.



Get: TaxesReceivable(self: BalanceSheet) -> TaxesReceivableBalanceSheet



Set: TaxesReceivable(self: BalanceSheet) = value

"""

    TotalAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The aggregate amount of probable future economic benefits obtained or controlled by a particular enterprise as a result of past

            transactions or events.



Get: TotalAssets(self: BalanceSheet) -> TotalAssetsBalanceSheet



Set: TotalAssets(self: BalanceSheet) = value

"""

    TotalCapitalization = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Stockholder's Equity plus Long Term Debt.



Get: TotalCapitalization(self: BalanceSheet) -> TotalCapitalizationBalanceSheet



Set: TotalCapitalization(self: BalanceSheet) = value

"""

    TotalDebt = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """All borrowings incurred by the company including debt and capital lease obligations.



Get: TotalDebt(self: BalanceSheet) -> TotalDebtBalanceSheet



Set: TotalDebt(self: BalanceSheet) = value

"""

    TotalDebtInMaturitySchedule = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Total Debt in Maturity Schedule is the sum of Debt details above.



Get: TotalDebtInMaturitySchedule(self: BalanceSheet) -> TotalDebtInMaturityScheduleBalanceSheet



Set: TotalDebtInMaturitySchedule(self: BalanceSheet) = value

"""

    TotalDeferredCreditsAndOtherNonCurrentLiabilities = property(lambda self: object(), lambda self, v: None,
                                                                 lambda self: None)  # default
    """Revenue received by a firm but not yet reported as income.  This item is usually only available for utility industry.



Get: TotalDeferredCreditsAndOtherNonCurrentLiabilities(self: BalanceSheet) -> TotalDeferredCreditsAndOtherNonCurrentLiabilitiesBalanceSheet



Set: TotalDeferredCreditsAndOtherNonCurrentLiabilities(self: BalanceSheet) = value

"""

    TotalDeposits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A liability account which represents the total amount of funds deposited.



Get: TotalDeposits(self: BalanceSheet) -> TotalDepositsBalanceSheet



Set: TotalDeposits(self: BalanceSheet) = value

"""

    TotalEquity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Total Equity equals Preferred Stock Equity + Common Stock Equity.



Get: TotalEquity(self: BalanceSheet) -> TotalEquityBalanceSheet



Set: TotalEquity(self: BalanceSheet) = value

"""

    TotalEquityAsReported = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Total Equity as reported by the company, may be the same or not the same as Morningstar's standardized definition.



Get: TotalEquityAsReported(self: BalanceSheet) -> TotalEquityAsReportedBalanceSheet



Set: TotalEquityAsReported(self: BalanceSheet) = value

"""

    TotalEquityGrossMinorityInterest = property(lambda self: object(), lambda self, v: None,
                                                lambda self: None)  # default
    """Residual interest, including minority interest, that remains in the assets of the enterprise after deducting its liabilities. Equity is

            increased by owners' investments and by comprehensive income, and it is reduced by distributions to the owners.



Get: TotalEquityGrossMinorityInterest(self: BalanceSheet) -> TotalEquityGrossMinorityInterestBalanceSheet



Set: TotalEquityGrossMinorityInterest(self: BalanceSheet) = value

"""

    TotalFinancialLeaseObligations = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Represents the total amount of long-term capital leases that must be paid within the next accounting period for a Non-

            Differentiated Balance Sheet. Capital lease obligations are contractual obligations that arise from obtaining the use of property or

            equipment via a capital lease contract.



Get: TotalFinancialLeaseObligations(self: BalanceSheet) -> TotalFinancialLeaseObligationsBalanceSheet



Set: TotalFinancialLeaseObligations(self: BalanceSheet) = value

"""

    TotalInvestments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Asset that refers to the sum of all available for sale securities and other investments often reported on the balance sheet of

            insurance firms.



Get: TotalInvestments(self: BalanceSheet) -> TotalInvestmentsBalanceSheet



Set: TotalInvestments(self: BalanceSheet) = value

"""

    TotalLiabilitiesAsReported = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Total liabilities as reported by the company, may be the same or not the same as Morningstar's standardized definition.



Get: TotalLiabilitiesAsReported(self: BalanceSheet) -> TotalLiabilitiesAsReportedBalanceSheet



Set: TotalLiabilitiesAsReported(self: BalanceSheet) = value

"""

    TotalLiabilitiesNetMinorityInterest = property(lambda self: object(), lambda self, v: None,
                                                   lambda self: None)  # default
    """Probable future sacrifices of economic benefits arising from present obligations of an enterprise to transfer assets or provide

            services to others in the future as a result of past transactions or events, excluding minority interest.



Get: TotalLiabilitiesNetMinorityInterest(self: BalanceSheet) -> TotalLiabilitiesNetMinorityInterestBalanceSheet



Set: TotalLiabilitiesNetMinorityInterest(self: BalanceSheet) = value

"""

    TotalNonCurrentAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Sum of the carrying amounts as of the balance sheet date of all assets that are expected to be realized in cash, sold or consumed

            after one year or beyond the normal operating cycle, if longer.



Get: TotalNonCurrentAssets(self: BalanceSheet) -> TotalNonCurrentAssetsBalanceSheet



Set: TotalNonCurrentAssets(self: BalanceSheet) = value

"""

    TotalNonCurrentLiabilitiesNetMinorityInterest = property(lambda self: object(), lambda self, v: None,
                                                             lambda self: None)  # default
    """Total obligations, net minority interest, incurred as part of normal operations that is expected to be repaid beyond the following

            twelve months or one business cycle; excludes minority interest.



Get: TotalNonCurrentLiabilitiesNetMinorityInterest(self: BalanceSheet) -> TotalNonCurrentLiabilitiesNetMinorityInterestBalanceSheet



Set: TotalNonCurrentLiabilitiesNetMinorityInterest(self: BalanceSheet) = value

"""

    TotalPartnershipCapital = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Ownership interest of different classes of partners in the publicly listed limited partnership or master limited partnership. Partners

            include general, limited and preferred partners.



Get: TotalPartnershipCapital(self: BalanceSheet) -> TotalPartnershipCapitalBalanceSheet



Set: TotalPartnershipCapital(self: BalanceSheet) = value

"""

    TotalTaxPayable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A liability that reflects the taxes owed to federal, state, and local tax authorities. It is the carrying value as of the balance sheet

            date of obligations incurred and payable for statutory income, sales, use, payroll, excise, real, property and other taxes.



Get: TotalTaxPayable(self: BalanceSheet) -> TotalTaxPayableBalanceSheet



Set: TotalTaxPayable(self: BalanceSheet) = value

"""

    TradeandOtherPayablesNonCurrent = property(lambda self: object(), lambda self, v: None,
                                               lambda self: None)  # default
    """Sum of all non-current payables and accrued expenses.



Get: TradeandOtherPayablesNonCurrent(self: BalanceSheet) -> TradeandOtherPayablesNonCurrentBalanceSheet



Set: TradeandOtherPayablesNonCurrent(self: BalanceSheet) = value

"""

    TradeAndOtherReceivablesNonCurrent = property(lambda self: object(), lambda self, v: None,
                                                  lambda self: None)  # default
    """Amounts due from customers or clients, more than one year from the balance sheet date, for goods or services that have been

            delivered or sold in the normal course of business, or other receivables.



Get: TradeAndOtherReceivablesNonCurrent(self: BalanceSheet) -> TradeAndOtherReceivablesNonCurrentBalanceSheet



Set: TradeAndOtherReceivablesNonCurrent(self: BalanceSheet) = value

"""

    TradingandFinancialLiabilities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Total carrying amount of total trading, financial liabilities and debt in a non-differentiated balance sheet.



Get: TradingandFinancialLiabilities(self: BalanceSheet) -> TradingandFinancialLiabilitiesBalanceSheet



Set: TradingandFinancialLiabilities(self: BalanceSheet) = value

"""

    TradingAndOtherReceivable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This will serve as the "parent" value to AccountsReceivable (DataId 23001) and OtherReceivables (DataId 23342) for all company

            financials reported in the IFRS GAAP.



Get: TradingAndOtherReceivable(self: BalanceSheet) -> TradingAndOtherReceivableBalanceSheet



Set: TradingAndOtherReceivable(self: BalanceSheet) = value

"""

    TradingAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Trading account assets are bought and held principally for the purpose of selling them in the near term (thus held for only a short

            period of time). Unrealized holding gains and losses for trading securities are included in earnings.



Get: TradingAssets(self: BalanceSheet) -> TradingAssetsBalanceSheet



Set: TradingAssets(self: BalanceSheet) = value

"""

    TradingLiabilities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The carrying amount of liabilities as of the balance sheet date that pertain to principal and customer trading transactions, or which

            may be incurred with the objective of generating a profit from short-term fluctuations in price as part of an entity's market-making,

            hedging and proprietary trading. Examples include short positions in securities, derivatives and commodities, obligations under

            repurchase agreements, and securities borrowed arrangements.



Get: TradingLiabilities(self: BalanceSheet) -> TradingLiabilitiesBalanceSheet



Set: TradingLiabilities(self: BalanceSheet) = value

"""

    TradingSecurities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The total of financial instruments that are bought and held principally for the purpose of selling them in the near term (thus held for

            only a short period of time) or for debt and equity securities formerly categorized as available-for-sale or held-to-maturity which the

            company held as of the date it opted to account for such securities at fair value.



Get: TradingSecurities(self: BalanceSheet) -> TradingSecuritiesBalanceSheet



Set: TradingSecurities(self: BalanceSheet) = value

"""

    TreasuryBillsandOtherEligibleBills = property(lambda self: object(), lambda self, v: None,
                                                  lambda self: None)  # default
    """Investments backed by the central government, it usually carries less risk than other investments.



Get: TreasuryBillsandOtherEligibleBills(self: BalanceSheet) -> TreasuryBillsandOtherEligibleBillsBalanceSheet



Set: TreasuryBillsandOtherEligibleBills(self: BalanceSheet) = value

"""

    TreasurySharesNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Number of Treasury Shares.



Get: TreasurySharesNumber(self: BalanceSheet) -> TreasurySharesNumberBalanceSheet



Set: TreasurySharesNumber(self: BalanceSheet) = value

"""

    TreasuryStock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The portion of shares that a company keeps in their own treasury. Treasury stock may have come from a repurchase or buyback

            from shareholders; or it may have never been issued to the public in the first place. These shares don't pay dividends, have no

            voting rights, and are not included in shares outstanding calculations.



Get: TreasuryStock(self: BalanceSheet) -> TreasuryStockBalanceSheet



Set: TreasuryStock(self: BalanceSheet) = value

"""

    UnallocatedSurplus = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The amount of surplus from insurance contracts which has not been allocated at the balance sheet date. This is represented as a

            liability to policyholders, as it pertains to cumulative income arising from the with-profits business.



Get: UnallocatedSurplus(self: BalanceSheet) -> UnallocatedSurplusBalanceSheet



Set: UnallocatedSurplus(self: BalanceSheet) = value

"""

    UnbilledReceivables = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Revenues that are not currently billed from the customer under the terms of the contract.  This item is usually only available for

            utility industry.



Get: UnbilledReceivables(self: BalanceSheet) -> UnbilledReceivablesBalanceSheet



Set: UnbilledReceivables(self: BalanceSheet) = value

"""

    UnearnedIncome = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Income received but not yet earned, it represents the unearned amount that is netted against the total loan.



Get: UnearnedIncome(self: BalanceSheet) -> UnearnedIncomeBalanceSheet



Set: UnearnedIncome(self: BalanceSheet) = value

"""

    UnearnedPremiums = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Carrying amount of premiums written on insurance contracts that have not been earned as of the balance sheet date.



Get: UnearnedPremiums(self: BalanceSheet) -> UnearnedPremiumsBalanceSheet



Set: UnearnedPremiums(self: BalanceSheet) = value

"""

    UnpaidLossAndLossReserve = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Liability amount that reflects claims that are expected based upon statistical projections, but which have not been reported to the

            insurer.



Get: UnpaidLossAndLossReserve(self: BalanceSheet) -> UnpaidLossAndLossReserveBalanceSheet



Set: UnpaidLossAndLossReserve(self: BalanceSheet) = value

"""

    UnrealizedGainLoss = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A profit or loss that results from holding onto an asset rather than cashing it in and officially taking the profit or loss.



Get: UnrealizedGainLoss(self: BalanceSheet) -> UnrealizedGainLossBalanceSheet



Set: UnrealizedGainLoss(self: BalanceSheet) = value

"""

    WaterProduction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The amount for a facility and plant that provides water which might include wells, reservoirs, pumping stations, and control

            facilities; and waste water systems which includes the waste treatment and disposal facility and equipment. This item is usually

            only available for utility industry.



Get: WaterProduction(self: BalanceSheet) -> WaterProductionBalanceSheet



Set: WaterProduction(self: BalanceSheet) = value

"""

    WorkingCapital = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Current Assets minus Current Liabilities.  This item is usually not available for bank and insurance industries.



Get: WorkingCapital(self: BalanceSheet) -> WorkingCapitalBalanceSheet



Set: WorkingCapital(self: BalanceSheet) = value

"""

    WorkInProcess = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Work, or goods, in the process of being fabricated or manufactured but not yet completed as finished goods. This item is usually

            available for manufacturing and mining industries.



Get: WorkInProcess(self: BalanceSheet) -> WorkInProcessBalanceSheet



Set: WorkInProcess(self: BalanceSheet) = value

"""


class BankIndebtednessBalanceSheet(MultiPeriodField):
    """
    All indebtedness for borrowed money or the deferred purchase price of property or services, including without limitation

                reimbursement and other obligations with respect to surety bonds and letters of credit, all obligations evidenced by notes, bonds

                debentures or similar instruments, all capital lease obligations and all contingent obligations.



    BankIndebtednessBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: BankIndebtednessBalanceSheet) -> Decimal



Set: ThreeMonths(self: BankIndebtednessBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: BankIndebtednessBalanceSheet) -> Decimal



Set: TwelveMonths(self: BankIndebtednessBalanceSheet) = value

"""

    Store = None


class BankLoansCurrentBalanceSheet(MultiPeriodField):
    """
    A debt financing obligation issued by a bank or similar financial institution to a company, that entitles the lender or holder of the

                instrument to interest payments and the repayment of principal at a specified time within the next 12 months or operating cycle.



    BankLoansCurrentBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: BankLoansCurrentBalanceSheet) -> Decimal



Set: ThreeMonths(self: BankLoansCurrentBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: BankLoansCurrentBalanceSheet) -> Decimal



Set: TwelveMonths(self: BankLoansCurrentBalanceSheet) = value

"""

    Store = None


class BankLoansNonCurrentBalanceSheet(MultiPeriodField):
    """
    A debt financing obligation issued by a bank or similar financial institution to a company, that entitles the lender or holder of the

                instrument to interest payments and the repayment of principal at a specified time beyond the current accounting PeriodAsByte.



    BankLoansNonCurrentBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: BankLoansNonCurrentBalanceSheet) -> Decimal



Set: ThreeMonths(self: BankLoansNonCurrentBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: BankLoansNonCurrentBalanceSheet) -> Decimal



Set: TwelveMonths(self: BankLoansNonCurrentBalanceSheet) = value

"""

    Store = None


class BankLoansTotalBalanceSheet(MultiPeriodField):
    """
    Total debt financing obligation issued by a bank or similar financial institution to a company that entitles the lender or holder of the

                instrument to interest payments and the repayment of principal at a specified time; in a Non-Differentiated Balance Sheet.



    BankLoansTotalBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: BankLoansTotalBalanceSheet) -> Decimal



Set: ThreeMonths(self: BankLoansTotalBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: BankLoansTotalBalanceSheet) -> Decimal



Set: TwelveMonths(self: BankLoansTotalBalanceSheet) = value

"""

    Store = None


class BankOwnedLifeInsuranceBalanceSheet(MultiPeriodField):
    """
    The carrying amount of a life insurance policy on an officer, executive or employee for which the reporting entity (a bank) is entitled

                to proceeds from the policy upon death of the insured or surrender of the insurance policy.



    BankOwnedLifeInsuranceBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: BankOwnedLifeInsuranceBalanceSheet) -> Decimal



Set: NineMonths(self: BankOwnedLifeInsuranceBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: BankOwnedLifeInsuranceBalanceSheet) -> Decimal



Set: SixMonths(self: BankOwnedLifeInsuranceBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: BankOwnedLifeInsuranceBalanceSheet) -> Decimal



Set: ThreeMonths(self: BankOwnedLifeInsuranceBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: BankOwnedLifeInsuranceBalanceSheet) -> Decimal



Set: TwelveMonths(self: BankOwnedLifeInsuranceBalanceSheet) = value

"""

    Store = None


class BasicAccountingChange(MultiPeriodField):
    """
    Basic EPS from the Cumulative Effect of Accounting Change is the earnings attributable to the accounting change (during the

                reporting period) divided by the weighted average number of common shares outstanding.



    BasicAccountingChange(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: BasicAccountingChange) -> Decimal



Set: NineMonths(self: BasicAccountingChange) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: BasicAccountingChange) -> Decimal



Set: SixMonths(self: BasicAccountingChange) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: BasicAccountingChange) -> Decimal



Set: ThreeMonths(self: BasicAccountingChange) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: BasicAccountingChange) -> Decimal



Set: TwelveMonths(self: BasicAccountingChange) = value

"""

    Store = None


class BasicAverageShares(MultiPeriodField):
    """
    The shares outstanding used to calculate Basic EPS, which is the weighted average common share outstanding through the whole

                accounting PeriodAsByte.  Note: If Basic Average Shares are not presented by the firm in the Income Statement, this data point will be

                null.



    BasicAverageShares(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: BasicAverageShares) -> Decimal



Set: NineMonths(self: BasicAverageShares) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: BasicAverageShares) -> Decimal



Set: OneMonth(self: BasicAverageShares) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: BasicAverageShares) -> Decimal



Set: SixMonths(self: BasicAverageShares) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: BasicAverageShares) -> Decimal



Set: ThreeMonths(self: BasicAverageShares) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: BasicAverageShares) -> Decimal



Set: TwelveMonths(self: BasicAverageShares) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: BasicAverageShares) -> Decimal



Set: TwoMonths(self: BasicAverageShares) = value

"""

    Store = None


class BasicContinuousOperations(MultiPeriodField):
    """
    Basic EPS from Continuing Operations is the earnings from continuing operations reported by the company divided by the weighted

                average number of common shares outstanding.



    BasicContinuousOperations(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: BasicContinuousOperations) -> Decimal



Set: NineMonths(self: BasicContinuousOperations) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: BasicContinuousOperations) -> Decimal



Set: OneMonth(self: BasicContinuousOperations) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: BasicContinuousOperations) -> Decimal



Set: SixMonths(self: BasicContinuousOperations) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: BasicContinuousOperations) -> Decimal



Set: ThreeMonths(self: BasicContinuousOperations) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: BasicContinuousOperations) -> Decimal



Set: TwelveMonths(self: BasicContinuousOperations) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: BasicContinuousOperations) -> Decimal



Set: TwoMonths(self: BasicContinuousOperations) = value

"""

    Store = None


class BasicDiscontinuousOperations(MultiPeriodField):
    """
    Basic EPS from Discontinued Operations is the earnings from discontinued operations reported by the company divided by the

                weighted average number of common shares outstanding. This only includes gain or loss from discontinued operations.



    BasicDiscontinuousOperations(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: BasicDiscontinuousOperations) -> Decimal



Set: NineMonths(self: BasicDiscontinuousOperations) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: BasicDiscontinuousOperations) -> Decimal



Set: OneMonth(self: BasicDiscontinuousOperations) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: BasicDiscontinuousOperations) -> Decimal



Set: SixMonths(self: BasicDiscontinuousOperations) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: BasicDiscontinuousOperations) -> Decimal



Set: ThreeMonths(self: BasicDiscontinuousOperations) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: BasicDiscontinuousOperations) -> Decimal



Set: TwelveMonths(self: BasicDiscontinuousOperations) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: BasicDiscontinuousOperations) -> Decimal



Set: TwoMonths(self: BasicDiscontinuousOperations) = value

"""

    Store = None


class BasicEPS(MultiPeriodField):
    """
    Basic EPS is the bottom line net income divided by the weighted average number of common shares outstanding.



    BasicEPS(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: BasicEPS) -> Decimal



Set: NineMonths(self: BasicEPS) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: BasicEPS) -> Decimal



Set: OneMonth(self: BasicEPS) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: BasicEPS) -> Decimal



Set: SixMonths(self: BasicEPS) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: BasicEPS) -> Decimal



Set: ThreeMonths(self: BasicEPS) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: BasicEPS) -> Decimal



Set: TwelveMonths(self: BasicEPS) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: BasicEPS) -> Decimal



Set: TwoMonths(self: BasicEPS) = value

"""

    Store = None


class BasicEPSOtherGainsLosses(MultiPeriodField):
    """
    Basic EPS from the Other Gains/Losses is the earnings attributable to the other gains/losses (during the reporting period) divided by

                the weighted average number of common shares outstanding.



    BasicEPSOtherGainsLosses(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: BasicEPSOtherGainsLosses) -> Decimal



Set: NineMonths(self: BasicEPSOtherGainsLosses) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: BasicEPSOtherGainsLosses) -> Decimal



Set: SixMonths(self: BasicEPSOtherGainsLosses) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: BasicEPSOtherGainsLosses) -> Decimal



Set: ThreeMonths(self: BasicEPSOtherGainsLosses) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: BasicEPSOtherGainsLosses) -> Decimal



Set: TwelveMonths(self: BasicEPSOtherGainsLosses) = value

"""

    Store = None


class BasicExtraordinary(MultiPeriodField):
    """
    Basic EPS from the Extraordinary Gains/Losses is the earnings attributable to the gains or losses (during the reporting period) from

                extraordinary items divided by the weighted average number of common shares outstanding.



    BasicExtraordinary(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: BasicExtraordinary) -> Decimal



Set: NineMonths(self: BasicExtraordinary) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: BasicExtraordinary) -> Decimal



Set: OneMonth(self: BasicExtraordinary) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: BasicExtraordinary) -> Decimal



Set: SixMonths(self: BasicExtraordinary) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: BasicExtraordinary) -> Decimal



Set: ThreeMonths(self: BasicExtraordinary) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: BasicExtraordinary) -> Decimal



Set: TwelveMonths(self: BasicExtraordinary) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: BasicExtraordinary) -> Decimal



Set: TwoMonths(self: BasicExtraordinary) = value

"""

    Store = None


class BeginningCashPositionCashFlowStatement(MultiPeriodField):
    """
    The cash and equivalents balance at the beginning of the accounting period, as indicated on the Cash Flow statement.



    BeginningCashPositionCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: BeginningCashPositionCashFlowStatement) -> Decimal



Set: NineMonths(self: BeginningCashPositionCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: BeginningCashPositionCashFlowStatement) -> Decimal



Set: OneMonth(self: BeginningCashPositionCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: BeginningCashPositionCashFlowStatement) -> Decimal



Set: SixMonths(self: BeginningCashPositionCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: BeginningCashPositionCashFlowStatement) -> Decimal



Set: ThreeMonths(self: BeginningCashPositionCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: BeginningCashPositionCashFlowStatement) -> Decimal



Set: TwelveMonths(self: BeginningCashPositionCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: BeginningCashPositionCashFlowStatement) -> Decimal



Set: TwoMonths(self: BeginningCashPositionCashFlowStatement) = value

"""

    Store = None


class BiologicalAssetsBalanceSheet(MultiPeriodField):
    """
    Biological assets include plants and animals.



    BiologicalAssetsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: BiologicalAssetsBalanceSheet) -> Decimal



Set: ThreeMonths(self: BiologicalAssetsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: BiologicalAssetsBalanceSheet) -> Decimal



Set: TwelveMonths(self: BiologicalAssetsBalanceSheet) = value

"""

    Store = None


class BookValuePerShareGrowth(MultiPeriodField):
    """
    The growth in the company's book value per share on a percentage basis. Morningstar calculates the growth percentage based on

                the common shareholder's equity reported in the Balance Sheet divided by the diluted shares outstanding within the company

                filings or reports.



    BookValuePerShareGrowth(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: BookValuePerShareGrowth) -> Decimal



Set: FiveYears(self: BookValuePerShareGrowth) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: BookValuePerShareGrowth) -> Decimal



Set: OneYear(self: BookValuePerShareGrowth) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: BookValuePerShareGrowth) -> Decimal



Set: ThreeMonths(self: BookValuePerShareGrowth) = value

"""

    ThreeYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeYears period value for the field



Get: ThreeYears(self: BookValuePerShareGrowth) -> Decimal



Set: ThreeYears(self: BookValuePerShareGrowth) = value

"""

    Store = None


class BuildingsAndImprovementsBalanceSheet(MultiPeriodField):
    """
    Fixed assets that specifically deal with the facilities a company owns. Include the improvements associated with buildings.



    BuildingsAndImprovementsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: BuildingsAndImprovementsBalanceSheet) -> Decimal



Set: NineMonths(self: BuildingsAndImprovementsBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: BuildingsAndImprovementsBalanceSheet) -> Decimal



Set: OneMonth(self: BuildingsAndImprovementsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: BuildingsAndImprovementsBalanceSheet) -> Decimal



Set: SixMonths(self: BuildingsAndImprovementsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: BuildingsAndImprovementsBalanceSheet) -> Decimal



Set: ThreeMonths(self: BuildingsAndImprovementsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: BuildingsAndImprovementsBalanceSheet) -> Decimal



Set: TwelveMonths(self: BuildingsAndImprovementsBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: BuildingsAndImprovementsBalanceSheet) -> Decimal



Set: TwoMonths(self: BuildingsAndImprovementsBalanceSheet) = value

"""

    Store = None


class CapExGrowth(MultiPeriodField):
    """
    The growth in the company's capital expenditures on a percentage basis. Morningstar calculates the growth percentage based on

                the capital expenditures reported in the Cash Flow Statement within the company filings or reports.



    CapExGrowth(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: CapExGrowth) -> Decimal



Set: FiveYears(self: CapExGrowth) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: CapExGrowth) -> Decimal



Set: OneYear(self: CapExGrowth) = value

"""

    ThreeYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeYears period value for the field



Get: ThreeYears(self: CapExGrowth) -> Decimal



Set: ThreeYears(self: CapExGrowth) = value

"""

    Store = None


class CapExReportedCashFlowStatement(MultiPeriodField):
    """
    Capital expenditure, capitalized software development cost, maintenance capital expenditure, etc. as reported by the company.



    CapExReportedCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CapExReportedCashFlowStatement) -> Decimal



Set: NineMonths(self: CapExReportedCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CapExReportedCashFlowStatement) -> Decimal



Set: OneMonth(self: CapExReportedCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CapExReportedCashFlowStatement) -> Decimal



Set: SixMonths(self: CapExReportedCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CapExReportedCashFlowStatement) -> Decimal



Set: ThreeMonths(self: CapExReportedCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CapExReportedCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CapExReportedCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CapExReportedCashFlowStatement) -> Decimal



Set: TwoMonths(self: CapExReportedCashFlowStatement) = value

"""

    Store = None


class CapExSalesRatio(MultiPeriodField):
    """
    Capital Expenditure / Revenue



    CapExSalesRatio(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: CapExSalesRatio) -> Decimal



Set: OneYear(self: CapExSalesRatio) = value

"""

    Store = None


class CapitalExpenditureAnnual5YrGrowth(MultiPeriodField):
    """
    This is the compound annual growth rate of the company's capital spending over the last 5 years. Capital Spending is the sum of

                the Capital Expenditure items found in the Statement of Cash Flows.



    CapitalExpenditureAnnual5YrGrowth(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: CapitalExpenditureAnnual5YrGrowth) -> Decimal



Set: FiveYears(self: CapitalExpenditureAnnual5YrGrowth) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: CapitalExpenditureAnnual5YrGrowth) -> Decimal



Set: OneYear(self: CapitalExpenditureAnnual5YrGrowth) = value

"""

    ThreeYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeYears period value for the field



Get: ThreeYears(self: CapitalExpenditureAnnual5YrGrowth) -> Decimal



Set: ThreeYears(self: CapitalExpenditureAnnual5YrGrowth) = value

"""

    Store = None


class CapitalExpenditureCashFlowStatement(MultiPeriodField):
    """
    Funds used by a company to acquire or upgrade physical assets such as property, industrial buildings or equipment. This

                type of outlay is made by companies to maintain or increase the scope of their operations. Capital expenditures are generally

                depreciated or depleted over their useful life, as distinguished from repairs, which are subtracted from the income of the current

                year.



    CapitalExpenditureCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CapitalExpenditureCashFlowStatement) -> Decimal



Set: NineMonths(self: CapitalExpenditureCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CapitalExpenditureCashFlowStatement) -> Decimal



Set: OneMonth(self: CapitalExpenditureCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CapitalExpenditureCashFlowStatement) -> Decimal



Set: SixMonths(self: CapitalExpenditureCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CapitalExpenditureCashFlowStatement) -> Decimal



Set: ThreeMonths(self: CapitalExpenditureCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CapitalExpenditureCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CapitalExpenditureCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CapitalExpenditureCashFlowStatement) -> Decimal



Set: TwoMonths(self: CapitalExpenditureCashFlowStatement) = value

"""

    Store = None


class CapitalExpendituretoEBITDA(MultiPeriodField):
    """
    Measures the amount a company is investing in its business relative to EBITDA generated in a given PeriodAsByte.



    CapitalExpendituretoEBITDA(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: CapitalExpendituretoEBITDA) -> Decimal



Set: OneYear(self: CapitalExpendituretoEBITDA) = value

"""

    Store = None


class CapitalLeaseObligationsBalanceSheet(MultiPeriodField):
    """
    Current Portion of Capital Lease Obligation plus Long Term Portion of Capital Lease Obligation.



    CapitalLeaseObligationsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CapitalLeaseObligationsBalanceSheet) -> Decimal



Set: NineMonths(self: CapitalLeaseObligationsBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CapitalLeaseObligationsBalanceSheet) -> Decimal



Set: OneMonth(self: CapitalLeaseObligationsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CapitalLeaseObligationsBalanceSheet) -> Decimal



Set: SixMonths(self: CapitalLeaseObligationsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CapitalLeaseObligationsBalanceSheet) -> Decimal



Set: ThreeMonths(self: CapitalLeaseObligationsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CapitalLeaseObligationsBalanceSheet) -> Decimal



Set: TwelveMonths(self: CapitalLeaseObligationsBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CapitalLeaseObligationsBalanceSheet) -> Decimal



Set: TwoMonths(self: CapitalLeaseObligationsBalanceSheet) = value

"""

    Store = None


class CapitalStockBalanceSheet(MultiPeriodField):
    """
    The total amount of stock authorized for issue by a corporation, including common and preferred stock.



    CapitalStockBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CapitalStockBalanceSheet) -> Decimal



Set: NineMonths(self: CapitalStockBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CapitalStockBalanceSheet) -> Decimal



Set: OneMonth(self: CapitalStockBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CapitalStockBalanceSheet) -> Decimal



Set: SixMonths(self: CapitalStockBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CapitalStockBalanceSheet) -> Decimal



Set: ThreeMonths(self: CapitalStockBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CapitalStockBalanceSheet) -> Decimal



Set: TwelveMonths(self: CapitalStockBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CapitalStockBalanceSheet) -> Decimal



Set: TwoMonths(self: CapitalStockBalanceSheet) = value

"""

    Store = None


class CashAdvancesandLoansMadetoOtherPartiesCashFlowStatement(MultiPeriodField):
    """
    Cash outlay for cash advances and loans made to other parties.



    CashAdvancesandLoansMadetoOtherPartiesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashAdvancesandLoansMadetoOtherPartiesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CashAdvancesandLoansMadetoOtherPartiesCashFlowStatement) = value

"""

    Store = None


class CashAndCashEquivalentsBalanceSheet(MultiPeriodField):
    """
    Includes unrestricted cash on hand, money market instruments and other debt securities which can be converted to cash

                immediately.



    CashAndCashEquivalentsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CashAndCashEquivalentsBalanceSheet) -> Decimal



Set: NineMonths(self: CashAndCashEquivalentsBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CashAndCashEquivalentsBalanceSheet) -> Decimal



Set: OneMonth(self: CashAndCashEquivalentsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashAndCashEquivalentsBalanceSheet) -> Decimal



Set: SixMonths(self: CashAndCashEquivalentsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashAndCashEquivalentsBalanceSheet) -> Decimal



Set: ThreeMonths(self: CashAndCashEquivalentsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashAndCashEquivalentsBalanceSheet) -> Decimal



Set: TwelveMonths(self: CashAndCashEquivalentsBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CashAndCashEquivalentsBalanceSheet) -> Decimal



Set: TwoMonths(self: CashAndCashEquivalentsBalanceSheet) = value

"""

    Store = None


class CashAndDueFromBanksBalanceSheet(MultiPeriodField):
    """
    Includes cash on hand (currency and coin), cash items in process of collection, non-interest bearing deposits due from other

                financial institutions (including corporate credit unions), and balances with the Federal Reserve Banks, Federal Home Loan Banks

                and central banks.



    CashAndDueFromBanksBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CashAndDueFromBanksBalanceSheet) -> Decimal



Set: NineMonths(self: CashAndDueFromBanksBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashAndDueFromBanksBalanceSheet) -> Decimal



Set: SixMonths(self: CashAndDueFromBanksBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashAndDueFromBanksBalanceSheet) -> Decimal



Set: ThreeMonths(self: CashAndDueFromBanksBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashAndDueFromBanksBalanceSheet) -> Decimal



Set: TwelveMonths(self: CashAndDueFromBanksBalanceSheet) = value

"""

    Store = None


class CashBalanceSheet(MultiPeriodField):
    """
    Cash includes currency on hand as well as demand deposits with banks or financial institutions. It also includes other kinds of

                accounts that have the general characteristics of demand deposits in that the customer may deposit additional funds at any time

                and also effectively may withdraw funds at any time without prior notice or penalty.



    CashBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CashBalanceSheet) -> Decimal



Set: NineMonths(self: CashBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CashBalanceSheet) -> Decimal



Set: OneMonth(self: CashBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashBalanceSheet) -> Decimal



Set: SixMonths(self: CashBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashBalanceSheet) -> Decimal



Set: ThreeMonths(self: CashBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashBalanceSheet) -> Decimal



Set: TwelveMonths(self: CashBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CashBalanceSheet) -> Decimal



Set: TwoMonths(self: CashBalanceSheet) = value

"""

    Store = None


class CashCashEquivalentsAndFederalFundsSoldBalanceSheet(MultiPeriodField):
    """
    The aggregate amount of cash, cash equivalents, and federal funds sold.



    CashCashEquivalentsAndFederalFundsSoldBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CashCashEquivalentsAndFederalFundsSoldBalanceSheet) -> Decimal



Set: NineMonths(self: CashCashEquivalentsAndFederalFundsSoldBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashCashEquivalentsAndFederalFundsSoldBalanceSheet) -> Decimal



Set: SixMonths(self: CashCashEquivalentsAndFederalFundsSoldBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashCashEquivalentsAndFederalFundsSoldBalanceSheet) -> Decimal



Set: ThreeMonths(self: CashCashEquivalentsAndFederalFundsSoldBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashCashEquivalentsAndFederalFundsSoldBalanceSheet) -> Decimal



Set: TwelveMonths(self: CashCashEquivalentsAndFederalFundsSoldBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CashCashEquivalentsAndFederalFundsSoldBalanceSheet) -> Decimal



Set: TwoMonths(self: CashCashEquivalentsAndFederalFundsSoldBalanceSheet) = value

"""

    Store = None


class CashCashEquivalentsAndMarketableSecuritiesBalanceSheet(MultiPeriodField):
    """
    The aggregate amount of cash, cash equivalents, and marketable securities.



    CashCashEquivalentsAndMarketableSecuritiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CashCashEquivalentsAndMarketableSecuritiesBalanceSheet) -> Decimal



Set: NineMonths(self: CashCashEquivalentsAndMarketableSecuritiesBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CashCashEquivalentsAndMarketableSecuritiesBalanceSheet) -> Decimal



Set: OneMonth(self: CashCashEquivalentsAndMarketableSecuritiesBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashCashEquivalentsAndMarketableSecuritiesBalanceSheet) -> Decimal



Set: SixMonths(self: CashCashEquivalentsAndMarketableSecuritiesBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashCashEquivalentsAndMarketableSecuritiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: CashCashEquivalentsAndMarketableSecuritiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashCashEquivalentsAndMarketableSecuritiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: CashCashEquivalentsAndMarketableSecuritiesBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CashCashEquivalentsAndMarketableSecuritiesBalanceSheet) -> Decimal



Set: TwoMonths(self: CashCashEquivalentsAndMarketableSecuritiesBalanceSheet) = value

"""

    Store = None


class CashConversionCycle(MultiPeriodField):
    """
    Days In Inventory + Days In Sales - Days In Payment



    CashConversionCycle(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: CashConversionCycle) -> Decimal



Set: OneYear(self: CashConversionCycle) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashConversionCycle) -> Decimal



Set: SixMonths(self: CashConversionCycle) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashConversionCycle) -> Decimal



Set: ThreeMonths(self: CashConversionCycle) = value

"""

    Store = None


class CashDividendsForMinoritiesCashFlowStatement(MultiPeriodField):
    """
    Cash Distribution of earnings to Minority Stockholders.



    CashDividendsForMinoritiesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CashDividendsForMinoritiesCashFlowStatement) -> Decimal



Set: NineMonths(self: CashDividendsForMinoritiesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashDividendsForMinoritiesCashFlowStatement) -> Decimal



Set: SixMonths(self: CashDividendsForMinoritiesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashDividendsForMinoritiesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: CashDividendsForMinoritiesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashDividendsForMinoritiesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CashDividendsForMinoritiesCashFlowStatement) = value

"""

    Store = None


class CashDividendsPaidCashFlowStatement(MultiPeriodField):
    """
    Payments for the cash dividends declared by an entity to shareholders during the PeriodAsByte. This element includes paid and unpaid

                dividends declared during the period for both common and preferred stock.



    CashDividendsPaidCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CashDividendsPaidCashFlowStatement) -> Decimal



Set: NineMonths(self: CashDividendsPaidCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CashDividendsPaidCashFlowStatement) -> Decimal



Set: OneMonth(self: CashDividendsPaidCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashDividendsPaidCashFlowStatement) -> Decimal



Set: SixMonths(self: CashDividendsPaidCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashDividendsPaidCashFlowStatement) -> Decimal



Set: ThreeMonths(self: CashDividendsPaidCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashDividendsPaidCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CashDividendsPaidCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CashDividendsPaidCashFlowStatement) -> Decimal



Set: TwoMonths(self: CashDividendsPaidCashFlowStatement) = value

"""

    Store = None


class CashEquivalentsBalanceSheet(MultiPeriodField):
    """
    Cash equivalents, excluding items classified as marketable securities, include short-term, highly liquid investments that are both

                readily convertible to known amounts of cash, and so near their maturity that they present insignificant risk of changes in value

                because of changes in interest rates.  Generally, only investments with original maturities of three months or less qualify under this

                definition. Original maturity means original maturity to the entity holding the investment. For example, both a three-month US

                Treasury bill and a three-year Treasury note purchased three months from maturity qualify as cash equivalents. However, a Treasury

                note purchased three years ago does not become a cash equivalent when its remaining maturity is three months.



    CashEquivalentsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CashEquivalentsBalanceSheet) -> Decimal



Set: NineMonths(self: CashEquivalentsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashEquivalentsBalanceSheet) -> Decimal



Set: SixMonths(self: CashEquivalentsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashEquivalentsBalanceSheet) -> Decimal



Set: ThreeMonths(self: CashEquivalentsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashEquivalentsBalanceSheet) -> Decimal



Set: TwelveMonths(self: CashEquivalentsBalanceSheet) = value

"""

    Store = None


class CashFlowFromContinuingFinancingActivitiesCashFlowStatement(MultiPeriodField):
    """
    Cash generated by or used in financing activities of continuing operations; excludes cash flows from discontinued operations.



    CashFlowFromContinuingFinancingActivitiesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CashFlowFromContinuingFinancingActivitiesCashFlowStatement) -> Decimal



Set: NineMonths(self: CashFlowFromContinuingFinancingActivitiesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashFlowFromContinuingFinancingActivitiesCashFlowStatement) -> Decimal



Set: SixMonths(self: CashFlowFromContinuingFinancingActivitiesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashFlowFromContinuingFinancingActivitiesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: CashFlowFromContinuingFinancingActivitiesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashFlowFromContinuingFinancingActivitiesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CashFlowFromContinuingFinancingActivitiesCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CashFlowFromContinuingFinancingActivitiesCashFlowStatement) -> Decimal



Set: TwoMonths(self: CashFlowFromContinuingFinancingActivitiesCashFlowStatement) = value

"""

    Store = None


class CashFlowFromContinuingInvestingActivitiesCashFlowStatement(MultiPeriodField):
    """
    Cash generated by or used in investing activities of continuing operations; excludes cash flows from discontinued operations.



    CashFlowFromContinuingInvestingActivitiesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CashFlowFromContinuingInvestingActivitiesCashFlowStatement) -> Decimal



Set: NineMonths(self: CashFlowFromContinuingInvestingActivitiesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashFlowFromContinuingInvestingActivitiesCashFlowStatement) -> Decimal



Set: SixMonths(self: CashFlowFromContinuingInvestingActivitiesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashFlowFromContinuingInvestingActivitiesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: CashFlowFromContinuingInvestingActivitiesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashFlowFromContinuingInvestingActivitiesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CashFlowFromContinuingInvestingActivitiesCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CashFlowFromContinuingInvestingActivitiesCashFlowStatement) -> Decimal



Set: TwoMonths(self: CashFlowFromContinuingInvestingActivitiesCashFlowStatement) = value

"""

    Store = None


class CashFlowFromContinuingOperatingActivitiesCashFlowStatement(MultiPeriodField):
    """
    Cash generated by or used in operating activities of continuing operations; excludes cash flows from discontinued operations.



    CashFlowFromContinuingOperatingActivitiesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CashFlowFromContinuingOperatingActivitiesCashFlowStatement) -> Decimal



Set: NineMonths(self: CashFlowFromContinuingOperatingActivitiesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashFlowFromContinuingOperatingActivitiesCashFlowStatement) -> Decimal



Set: SixMonths(self: CashFlowFromContinuingOperatingActivitiesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashFlowFromContinuingOperatingActivitiesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: CashFlowFromContinuingOperatingActivitiesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashFlowFromContinuingOperatingActivitiesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CashFlowFromContinuingOperatingActivitiesCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CashFlowFromContinuingOperatingActivitiesCashFlowStatement) -> Decimal



Set: TwoMonths(self: CashFlowFromContinuingOperatingActivitiesCashFlowStatement) = value

"""

    Store = None


class CashFlowFromDiscontinuedOperationCashFlowStatement(MultiPeriodField):
    """
    The aggregate amount of cash flow from discontinued operation, including operating activities, investing activities, and financing

                activities.



    CashFlowFromDiscontinuedOperationCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CashFlowFromDiscontinuedOperationCashFlowStatement) -> Decimal



Set: NineMonths(self: CashFlowFromDiscontinuedOperationCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashFlowFromDiscontinuedOperationCashFlowStatement) -> Decimal



Set: SixMonths(self: CashFlowFromDiscontinuedOperationCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashFlowFromDiscontinuedOperationCashFlowStatement) -> Decimal



Set: ThreeMonths(self: CashFlowFromDiscontinuedOperationCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashFlowFromDiscontinuedOperationCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CashFlowFromDiscontinuedOperationCashFlowStatement) = value

"""

    Store = None


class CashFlowfromFinancingGrowth(MultiPeriodField):
    """
    The growth in the company's cash flows from financing on a percentage basis. Morningstar calculates the growth percentage

                based on the financing cash flows reported in the Cash Flow Statement within the company filings or reports.



    CashFlowfromFinancingGrowth(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: CashFlowfromFinancingGrowth) -> Decimal



Set: FiveYears(self: CashFlowfromFinancingGrowth) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: CashFlowfromFinancingGrowth) -> Decimal



Set: OneYear(self: CashFlowfromFinancingGrowth) = value

"""

    ThreeYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeYears period value for the field



Get: ThreeYears(self: CashFlowfromFinancingGrowth) -> Decimal



Set: ThreeYears(self: CashFlowfromFinancingGrowth) = value

"""

    Store = None


class CashFlowfromInvestingGrowth(MultiPeriodField):
    """
    The growth in the company's cash flows from investing on a percentage basis. Morningstar calculates the growth percentage

                based on the cash flows from investing reported in the Cash Flow Statement within the company filings or reports.



    CashFlowfromInvestingGrowth(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: CashFlowfromInvestingGrowth) -> Decimal



Set: FiveYears(self: CashFlowfromInvestingGrowth) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: CashFlowfromInvestingGrowth) -> Decimal



Set: OneYear(self: CashFlowfromInvestingGrowth) = value

"""

    ThreeYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeYears period value for the field



Get: ThreeYears(self: CashFlowfromInvestingGrowth) -> Decimal



Set: ThreeYears(self: CashFlowfromInvestingGrowth) = value

"""

    Store = None


class CashFlowsfromusedinOperatingActivitiesDirectCashFlowStatement(MultiPeriodField):
    """
    The net cash from (used in) all of the entity's operating activities, including those of discontinued operations, of the reporting entity

                under the direct method.



    CashFlowsfromusedinOperatingActivitiesDirectCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CashFlowsfromusedinOperatingActivitiesDirectCashFlowStatement) -> Decimal



Set: NineMonths(self: CashFlowsfromusedinOperatingActivitiesDirectCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CashFlowsfromusedinOperatingActivitiesDirectCashFlowStatement) -> Decimal



Set: OneMonth(self: CashFlowsfromusedinOperatingActivitiesDirectCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashFlowsfromusedinOperatingActivitiesDirectCashFlowStatement) -> Decimal



Set: SixMonths(self: CashFlowsfromusedinOperatingActivitiesDirectCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashFlowsfromusedinOperatingActivitiesDirectCashFlowStatement) -> Decimal



Set: ThreeMonths(self: CashFlowsfromusedinOperatingActivitiesDirectCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashFlowsfromusedinOperatingActivitiesDirectCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CashFlowsfromusedinOperatingActivitiesDirectCashFlowStatement) = value

"""

    Store = None


class CashFlowStatement(object):
    """
    Definition of the CashFlowStatement class



    CashFlowStatement()
    """

    def UpdateValues(self, update):
        """
        UpdateValues(self: CashFlowStatement, update: CashFlowStatement)

            Applies updated values from update to this

             instance





            update: The next data update for this instance
        """
        pass

    AllTaxesPaid = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cash paid to tax authorities in operating cash flow, using the direct method



Get: AllTaxesPaid(self: CashFlowStatement) -> AllTaxesPaidCashFlowStatement



Set: AllTaxesPaid(self: CashFlowStatement) = value

"""

    Amortization = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The systematic and rational apportionment of the acquisition cost of intangible operational assets to future periods in which the benefits

            contribute to revenue. This field is to include Amortization and any variation where Amortization is the first account listed in the line item,

            excluding Amortization of Intangibles.



Get: Amortization(self: CashFlowStatement) -> AmortizationCashFlowStatement



Set: Amortization(self: CashFlowStatement) = value

"""

    AmortizationOfFinancingCostsAndDiscounts = property(lambda self: object(), lambda self, v: None,
                                                        lambda self: None)  # default
    """The component of interest expense representing the non-cash expenses charged against earnings in the period to allocate debt

            discount and premium, and the costs to issue debt and obtain financing over the related debt instruments. This item is usually only

            available for bank industry.



Get: AmortizationOfFinancingCostsAndDiscounts(self: CashFlowStatement) -> AmortizationOfFinancingCostsAndDiscountsCashFlowStatement



Set: AmortizationOfFinancingCostsAndDiscounts(self: CashFlowStatement) = value

"""

    AmortizationOfIntangibles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The aggregate expense charged against earnings to allocate the cost of intangible assets (nonphysical assets not used in

            production) in a systematic and rational manner to the periods expected to benefit from such assets.



Get: AmortizationOfIntangibles(self: CashFlowStatement) -> AmortizationOfIntangiblesCashFlowStatement



Set: AmortizationOfIntangibles(self: CashFlowStatement) = value

"""

    AmortizationOfSecurities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Represents amortization of the allocation of a lump sum amount to different time periods, particularly for securities, debt, loans,

            and other forms of financing. Does not include amortization, amortization of capital expenditure and intangible assets.



Get: AmortizationOfSecurities(self: CashFlowStatement) -> AmortizationOfSecuritiesCashFlowStatement



Set: AmortizationOfSecurities(self: CashFlowStatement) = value

"""

    AssetImpairmentCharge = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The charge against earnings resulting from the aggregate write down of all assets from their carrying value to their fair value.



Get: AssetImpairmentCharge(self: CashFlowStatement) -> AssetImpairmentChargeCashFlowStatement



Set: AssetImpairmentCharge(self: CashFlowStatement) = value

"""

    BeginningCashPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The cash and equivalents balance at the beginning of the accounting period, as indicated on the Cash Flow statement.



Get: BeginningCashPosition(self: CashFlowStatement) -> BeginningCashPositionCashFlowStatement



Set: BeginningCashPosition(self: CashFlowStatement) = value

"""

    CapExReported = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Capital expenditure, capitalized software development cost, maintenance capital expenditure, etc. as reported by the company.



Get: CapExReported(self: CashFlowStatement) -> CapExReportedCashFlowStatement



Set: CapExReported(self: CashFlowStatement) = value

"""

    CapitalExpenditure = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Funds used by a company to acquire or upgrade physical assets such as property, industrial buildings or equipment. This

            type of outlay is made by companies to maintain or increase the scope of their operations. Capital expenditures are generally

            depreciated or depleted over their useful life, as distinguished from repairs, which are subtracted from the income of the current

            year.



Get: CapitalExpenditure(self: CashFlowStatement) -> CapitalExpenditureCashFlowStatement



Set: CapitalExpenditure(self: CashFlowStatement) = value

"""

    CashAdvancesandLoansMadetoOtherParties = property(lambda self: object(), lambda self, v: None,
                                                      lambda self: None)  # default
    """Cash outlay for cash advances and loans made to other parties.



Get: CashAdvancesandLoansMadetoOtherParties(self: CashFlowStatement) -> CashAdvancesandLoansMadetoOtherPartiesCashFlowStatement



Set: CashAdvancesandLoansMadetoOtherParties(self: CashFlowStatement) = value

"""

    CashDividendsForMinorities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cash Distribution of earnings to Minority Stockholders.



Get: CashDividendsForMinorities(self: CashFlowStatement) -> CashDividendsForMinoritiesCashFlowStatement



Set: CashDividendsForMinorities(self: CashFlowStatement) = value

"""

    CashDividendsPaid = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Payments for the cash dividends declared by an entity to shareholders during the period. This element includes paid and unpaid

            dividends declared during the period for both common and preferred stock.



Get: CashDividendsPaid(self: CashFlowStatement) -> CashDividendsPaidCashFlowStatement



Set: CashDividendsPaid(self: CashFlowStatement) = value

"""

    CashFlowFromContinuingFinancingActivities = property(lambda self: object(), lambda self, v: None,
                                                         lambda self: None)  # default
    """Cash generated by or used in financing activities of continuing operations; excludes cash flows from discontinued operations.



Get: CashFlowFromContinuingFinancingActivities(self: CashFlowStatement) -> CashFlowFromContinuingFinancingActivitiesCashFlowStatement



Set: CashFlowFromContinuingFinancingActivities(self: CashFlowStatement) = value

"""

    CashFlowFromContinuingInvestingActivities = property(lambda self: object(), lambda self, v: None,
                                                         lambda self: None)  # default
    """Cash generated by or used in investing activities of continuing operations; excludes cash flows from discontinued operations.



Get: CashFlowFromContinuingInvestingActivities(self: CashFlowStatement) -> CashFlowFromContinuingInvestingActivitiesCashFlowStatement



Set: CashFlowFromContinuingInvestingActivities(self: CashFlowStatement) = value

"""

    CashFlowFromContinuingOperatingActivities = property(lambda self: object(), lambda self, v: None,
                                                         lambda self: None)  # default
    """Cash generated by or used in operating activities of continuing operations; excludes cash flows from discontinued operations.



Get: CashFlowFromContinuingOperatingActivities(self: CashFlowStatement) -> CashFlowFromContinuingOperatingActivitiesCashFlowStatement



Set: CashFlowFromContinuingOperatingActivities(self: CashFlowStatement) = value

"""

    CashFlowFromDiscontinuedOperation = property(lambda self: object(), lambda self, v: None,
                                                 lambda self: None)  # default
    """The aggregate amount of cash flow from discontinued operation, including operating activities, investing activities, and financing

            activities.



Get: CashFlowFromDiscontinuedOperation(self: CashFlowStatement) -> CashFlowFromDiscontinuedOperationCashFlowStatement



Set: CashFlowFromDiscontinuedOperation(self: CashFlowStatement) = value

"""

    CashFlowsfromusedinOperatingActivitiesDirect = property(lambda self: object(), lambda self, v: None,
                                                            lambda self: None)  # default
    """The net cash from (used in) all of the entity's operating activities, including those of discontinued operations, of the reporting entity

            under the direct method.



Get: CashFlowsfromusedinOperatingActivitiesDirect(self: CashFlowStatement) -> CashFlowsfromusedinOperatingActivitiesDirectCashFlowStatement



Set: CashFlowsfromusedinOperatingActivitiesDirect(self: CashFlowStatement) = value

"""

    CashFromDiscontinuedFinancing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cash generated by or used in financing activities of discontinued operations; excludes cash flows from continued operations.



Get: CashFromDiscontinuedFinancing(self: CashFlowStatement) -> CashFromDiscontinuedFinancingCashFlowStatement



Set: CashFromDiscontinuedFinancing(self: CashFlowStatement) = value

"""

    CashFromDiscontinuedFinancingActivities = property(lambda self: object(), lambda self, v: None,
                                                       lambda self: None)  # default
    """Cash generated by or used in financing activities of discontinued operations; excludes cash flows from continued operations.



Get: CashFromDiscontinuedFinancingActivities(self: CashFlowStatement) -> CashFromDiscontinuedFinancingActivitiesCashFlowStatement



Set: CashFromDiscontinuedFinancingActivities(self: CashFlowStatement) = value

"""

    CashFromDiscontinuedInvesting = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The net cash inflow (outflow) from discontinued investing activities over the designated time period.



Get: CashFromDiscontinuedInvesting(self: CashFlowStatement) -> CashFromDiscontinuedInvestingCashFlowStatement



Set: CashFromDiscontinuedInvesting(self: CashFlowStatement) = value

"""

    CashFromDiscontinuedInvestingActivities = property(lambda self: object(), lambda self, v: None,
                                                       lambda self: None)  # default
    """The net cash inflow (outflow) from discontinued investing activities over the designated time period.



Get: CashFromDiscontinuedInvestingActivities(self: CashFlowStatement) -> CashFromDiscontinuedInvestingActivitiesCashFlowStatement



Set: CashFromDiscontinuedInvestingActivities(self: CashFlowStatement) = value

"""

    CashFromDiscontinuedOperating = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The net cash from (used in) all of the entity's discontinued operating activities, excluding those of continued operations, of the

            reporting entity.



Get: CashFromDiscontinuedOperating(self: CashFlowStatement) -> CashFromDiscontinuedOperatingCashFlowStatement



Set: CashFromDiscontinuedOperating(self: CashFlowStatement) = value

"""

    CashFromDiscontinuedOperatingActivities = property(lambda self: object(), lambda self, v: None,
                                                       lambda self: None)  # default
    """The net cash from (used in) all of the entity's discontinued operating activities, excluding those of continued operations, of the

            reporting entity.



Get: CashFromDiscontinuedOperatingActivities(self: CashFlowStatement) -> CashFromDiscontinuedOperatingActivitiesCashFlowStatement



Set: CashFromDiscontinuedOperatingActivities(self: CashFlowStatement) = value

"""

    CashGeneratedfromOperatingActivities = property(lambda self: object(), lambda self, v: None,
                                                    lambda self: None)  # default
    """The net cash from an entity's operating activities before real cash inflow or outflow for Dividend, Interest, Tax, or other unclassified

            operating activities.



Get: CashGeneratedfromOperatingActivities(self: CashFlowStatement) -> CashGeneratedfromOperatingActivitiesCashFlowStatement



Set: CashGeneratedfromOperatingActivities(self: CashFlowStatement) = value

"""

    CashPaidforInsuranceActivities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cash paid out for insurance activities during the period in operating cash flow, using the direct method. This item is usually only

            available for insurance industry



Get: CashPaidforInsuranceActivities(self: CashFlowStatement) -> CashPaidforInsuranceActivitiesCashFlowStatement



Set: CashPaidforInsuranceActivities(self: CashFlowStatement) = value

"""

    CashPaidtoReinsurers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cash paid out to reinsurers in operating cash flow, using the direct method. This item is usually only available for insurance industry



Get: CashPaidtoReinsurers(self: CashFlowStatement) -> CashPaidtoReinsurersCashFlowStatement



Set: CashPaidtoReinsurers(self: CashFlowStatement) = value

"""

    CashPaymentsforDepositsbyBanksandCustomers = property(lambda self: object(), lambda self, v: None,
                                                          lambda self: None)  # default
    """Cash paid for deposits by banks and customers in operating cash flow, using the direct method. This item is usually only available

            for bank industry



Get: CashPaymentsforDepositsbyBanksandCustomers(self: CashFlowStatement) -> CashPaymentsforDepositsbyBanksandCustomersCashFlowStatement



Set: CashPaymentsforDepositsbyBanksandCustomers(self: CashFlowStatement) = value

"""

    CashPaymentsforLoans = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cash paid for loans in operating cash flow, using the direct method. This item is usually only available for bank industry



Get: CashPaymentsforLoans(self: CashFlowStatement) -> CashPaymentsforLoansCashFlowStatement



Set: CashPaymentsforLoans(self: CashFlowStatement) = value

"""

    CashReceiptsfromDepositsbyBanksandCustomers = property(lambda self: object(), lambda self, v: None,
                                                           lambda self: None)  # default
    """Cash received from banks and customer deposits in operating cash flow, using the direct method. This item is usually only available

            for bank industry



Get: CashReceiptsfromDepositsbyBanksandCustomers(self: CashFlowStatement) -> CashReceiptsfromDepositsbyBanksandCustomersCashFlowStatement



Set: CashReceiptsfromDepositsbyBanksandCustomers(self: CashFlowStatement) = value

"""

    CashReceiptsfromFeesandCommissions = property(lambda self: object(), lambda self, v: None,
                                                  lambda self: None)  # default
    """Cash received from agency fees and commissions in operating cash flow, using the direct method. This item is usually available for

            bank and insurance industries



Get: CashReceiptsfromFeesandCommissions(self: CashFlowStatement) -> CashReceiptsfromFeesandCommissionsCashFlowStatement



Set: CashReceiptsfromFeesandCommissions(self: CashFlowStatement) = value

"""

    CashReceiptsfromLoans = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cash received from loans in operating cash flow, using the direct method. This item is usually only available for bank industry



Get: CashReceiptsfromLoans(self: CashFlowStatement) -> CashReceiptsfromLoansCashFlowStatement



Set: CashReceiptsfromLoans(self: CashFlowStatement) = value

"""

    CashReceiptsfromRepaymentofAdvancesandLoansMadetoOtherParties = property(lambda self: object(),
                                                                             lambda self, v: None,
                                                                             lambda self: None)  # default
    """Cash received from the repayment of advances and loans made to other parties, in the Investing Cash Flow section.



Get: CashReceiptsfromRepaymentofAdvancesandLoansMadetoOtherParties(self: CashFlowStatement) -> CashReceiptsfromRepaymentofAdvancesandLoansMadetoOtherPartiesCashFlowStatement



Set: CashReceiptsfromRepaymentofAdvancesandLoansMadetoOtherParties(self: CashFlowStatement) = value

"""

    CashReceiptsfromSecuritiesRelatedActivities = property(lambda self: object(), lambda self, v: None,
                                                           lambda self: None)  # default
    """Cash received from the trading of securities in operating cash flow, using the direct method. This item is usually only available for

            bank and insurance industries



Get: CashReceiptsfromSecuritiesRelatedActivities(self: CashFlowStatement) -> CashReceiptsfromSecuritiesRelatedActivitiesCashFlowStatement



Set: CashReceiptsfromSecuritiesRelatedActivities(self: CashFlowStatement) = value

"""

    CashReceiptsfromTaxRefunds = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cash received as refunds from tax authorities in operating cash flow, using the direct method



Get: CashReceiptsfromTaxRefunds(self: CashFlowStatement) -> CashReceiptsfromTaxRefundsCashFlowStatement



Set: CashReceiptsfromTaxRefunds(self: CashFlowStatement) = value

"""

    CashReceivedfromInsuranceActivities = property(lambda self: object(), lambda self, v: None,
                                                   lambda self: None)  # default
    """Cash received from insurance activities in operating cash flow, using the direct method. This item is usually only available for

            insurance industry



Get: CashReceivedfromInsuranceActivities(self: CashFlowStatement) -> CashReceivedfromInsuranceActivitiesCashFlowStatement



Set: CashReceivedfromInsuranceActivities(self: CashFlowStatement) = value

"""

    CFFileDate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Filing date of the Cash Flow Statement.



Get: CFFileDate(self: CashFlowStatement) -> DateTime



Set: CFFileDate(self: CashFlowStatement) = value

"""

    ChangeInAccountPayable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The increase or decrease between periods of the account payables.



Get: ChangeInAccountPayable(self: CashFlowStatement) -> ChangeInAccountPayableCashFlowStatement



Set: ChangeInAccountPayable(self: CashFlowStatement) = value

"""

    ChangeInAccruedExpense = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The increase or decrease between periods of the accrued expenses.



Get: ChangeInAccruedExpense(self: CashFlowStatement) -> ChangeInAccruedExpenseCashFlowStatement



Set: ChangeInAccruedExpense(self: CashFlowStatement) = value

"""

    ChangeinAccruedIncome = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The increase or decrease between periods in the amount of outstanding money owed by a customer for goods or services provided

            by the company.



Get: ChangeinAccruedIncome(self: CashFlowStatement) -> ChangeinAccruedIncomeCashFlowStatement



Set: ChangeinAccruedIncome(self: CashFlowStatement) = value

"""

    ChangeInAccruedInvestmentIncome = property(lambda self: object(), lambda self, v: None,
                                               lambda self: None)  # default
    """The net change during the reporting period in investment income that has been earned but not yet received in cash.



Get: ChangeInAccruedInvestmentIncome(self: CashFlowStatement) -> ChangeInAccruedInvestmentIncomeCashFlowStatement



Set: ChangeInAccruedInvestmentIncome(self: CashFlowStatement) = value

"""

    ChangeinAdvancesfromCentralBanks = property(lambda self: object(), lambda self, v: None,
                                                lambda self: None)  # default
    """The increase or decrease between periods of the advances from central banks.



Get: ChangeinAdvancesfromCentralBanks(self: CashFlowStatement) -> ChangeinAdvancesfromCentralBanksCashFlowStatement



Set: ChangeinAdvancesfromCentralBanks(self: CashFlowStatement) = value

"""

    ChangeinCashSupplementalAsReported = property(lambda self: object(), lambda self, v: None,
                                                  lambda self: None)  # default
    """The change in cash flow from the previous period to the current, as reported by the company, may be the same or not the same as

            Morningstar's standardized definition. It is a supplemental value which would be reported outside consolidated statements.



Get: ChangeinCashSupplementalAsReported(self: CashFlowStatement) -> ChangeinCashSupplementalAsReportedCashFlowStatement



Set: ChangeinCashSupplementalAsReported(self: CashFlowStatement) = value

"""

    ChangeInDeferredAcquisitionCosts = property(lambda self: object(), lambda self, v: None,
                                                lambda self: None)  # default
    """The change of the unamortized portion as of the balance sheet date of capitalized costs that vary with and are primarily related to

            the acquisition of new and renewal insurance contracts.



Get: ChangeInDeferredAcquisitionCosts(self: CashFlowStatement) -> ChangeInDeferredAcquisitionCostsCashFlowStatement



Set: ChangeInDeferredAcquisitionCosts(self: CashFlowStatement) = value

"""

    ChangeinDeferredAcquisitionCostsNet = property(lambda self: object(), lambda self, v: None,
                                                   lambda self: None)  # default
    """The increase or decrease between periods of the deferred acquisition costs.



Get: ChangeinDeferredAcquisitionCostsNet(self: CashFlowStatement) -> ChangeinDeferredAcquisitionCostsNetCashFlowStatement



Set: ChangeinDeferredAcquisitionCostsNet(self: CashFlowStatement) = value

"""

    ChangeInDeferredCharges = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The net change during the reporting period in the value of expenditures made during the current reporting period for benefits that

            will be received over a period of years. This item is usually only available for bank industry.



Get: ChangeInDeferredCharges(self: CashFlowStatement) -> ChangeInDeferredChargesCashFlowStatement



Set: ChangeInDeferredCharges(self: CashFlowStatement) = value

"""

    ChangeinDepositsbyBanksandCustomers = property(lambda self: object(), lambda self, v: None,
                                                   lambda self: None)  # default
    """The increase or decrease between periods of the deposits by banks and customers.



Get: ChangeinDepositsbyBanksandCustomers(self: CashFlowStatement) -> ChangeinDepositsbyBanksandCustomersCashFlowStatement



Set: ChangeinDepositsbyBanksandCustomers(self: CashFlowStatement) = value

"""

    ChangeInDividendPayable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The increase or decrease between periods of the dividend payables.



Get: ChangeInDividendPayable(self: CashFlowStatement) -> ChangeInDividendPayableCashFlowStatement



Set: ChangeInDividendPayable(self: CashFlowStatement) = value

"""

    ChangeInFederalFundsAndSecuritiesSoldForRepurchase = property(lambda self: object(), lambda self, v: None,
                                                                  lambda self: None)  # default
    """The amount shown on the books that a bank with insufficient reserves borrows, at the federal funds rate, from another bank to

            meet its reserve requirements and the amount of securities that an institution sells and agrees to repurchase at a specified date for

            a specified price, net of any reductions or offsets.



Get: ChangeInFederalFundsAndSecuritiesSoldForRepurchase(self: CashFlowStatement) -> ChangeInFederalFundsAndSecuritiesSoldForRepurchaseCashFlowStatement



Set: ChangeInFederalFundsAndSecuritiesSoldForRepurchase(self: CashFlowStatement) = value

"""

    ChangeinFinancialAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The increase or decrease between periods of the financial assets.



Get: ChangeinFinancialAssets(self: CashFlowStatement) -> ChangeinFinancialAssetsCashFlowStatement



Set: ChangeinFinancialAssets(self: CashFlowStatement) = value

"""

    ChangeinFinancialLiabilities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The increase or decrease between periods of the financial liabilities.



Get: ChangeinFinancialLiabilities(self: CashFlowStatement) -> ChangeinFinancialLiabilitiesCashFlowStatement



Set: ChangeinFinancialLiabilities(self: CashFlowStatement) = value

"""

    ChangeInFundsWithheld = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The net change during the reporting period associated with funds withheld.



Get: ChangeInFundsWithheld(self: CashFlowStatement) -> ChangeInFundsWithheldCashFlowStatement



Set: ChangeInFundsWithheld(self: CashFlowStatement) = value

"""

    ChangeInIncomeTaxPayable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The increase or decrease between periods of the income tax payables.



Get: ChangeInIncomeTaxPayable(self: CashFlowStatement) -> ChangeInIncomeTaxPayableCashFlowStatement



Set: ChangeInIncomeTaxPayable(self: CashFlowStatement) = value

"""

    ChangeinInsuranceContractAssets = property(lambda self: object(), lambda self, v: None,
                                               lambda self: None)  # default
    """The increase or decrease between periods of the contract assets.



Get: ChangeinInsuranceContractAssets(self: CashFlowStatement) -> ChangeinInsuranceContractAssetsCashFlowStatement



Set: ChangeinInsuranceContractAssets(self: CashFlowStatement) = value

"""

    ChangeinInsuranceContractLiabilities = property(lambda self: object(), lambda self, v: None,
                                                    lambda self: None)  # default
    """The increase or decrease between periods of the insurance contract liabilities.



Get: ChangeinInsuranceContractLiabilities(self: CashFlowStatement) -> ChangeinInsuranceContractLiabilitiesCashFlowStatement



Set: ChangeinInsuranceContractLiabilities(self: CashFlowStatement) = value

"""

    ChangeinInsuranceFunds = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The increase or decrease between periods of the insurance funds.



Get: ChangeinInsuranceFunds(self: CashFlowStatement) -> ChangeinInsuranceFundsCashFlowStatement



Set: ChangeinInsuranceFunds(self: CashFlowStatement) = value

"""

    ChangeInInterestPayable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The increase or decrease between periods of the interest payable. Interest payable means carrying value as of the balance sheet

            date of interest payable on all forms of debt.



Get: ChangeInInterestPayable(self: CashFlowStatement) -> ChangeInInterestPayableCashFlowStatement



Set: ChangeInInterestPayable(self: CashFlowStatement) = value

"""

    ChangeInInventory = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The increase or decrease between periods of the Inventories. Inventories represent merchandise bought for resale and supplies and

            raw materials purchased for use in revenue producing operations.



Get: ChangeInInventory(self: CashFlowStatement) -> ChangeInInventoryCashFlowStatement



Set: ChangeInInventory(self: CashFlowStatement) = value

"""

    ChangeinInvestmentContractLiabilities = property(lambda self: object(), lambda self, v: None,
                                                     lambda self: None)  # default
    """The increase or decrease between periods of the investment contract liabilities.



Get: ChangeinInvestmentContractLiabilities(self: CashFlowStatement) -> ChangeinInvestmentContractLiabilitiesCashFlowStatement



Set: ChangeinInvestmentContractLiabilities(self: CashFlowStatement) = value

"""

    ChangeInLoans = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The net change that a lender gives money or property to a borrower and the borrower agrees to return the property or repay the

            borrowed money, along with interest, at a predetermined date in the future.



Get: ChangeInLoans(self: CashFlowStatement) -> ChangeInLoansCashFlowStatement



Set: ChangeInLoans(self: CashFlowStatement) = value

"""

    ChangeInLossAndLossAdjustmentExpenseReserves = property(lambda self: object(), lambda self, v: None,
                                                            lambda self: None)  # default
    """The net change during the reporting period in the reserve account established to account for expected but unspecified losses.



Get: ChangeInLossAndLossAdjustmentExpenseReserves(self: CashFlowStatement) -> ChangeInLossAndLossAdjustmentExpenseReservesCashFlowStatement



Set: ChangeInLossAndLossAdjustmentExpenseReserves(self: CashFlowStatement) = value

"""

    ChangeInOtherCurrentAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The increase or decrease between periods of the Other Current Assets. This category typically includes prepayments, deferred

            charges, and amounts (other than trade accounts) due from parents and subsidiaries.



Get: ChangeInOtherCurrentAssets(self: CashFlowStatement) -> ChangeInOtherCurrentAssetsCashFlowStatement



Set: ChangeInOtherCurrentAssets(self: CashFlowStatement) = value

"""

    ChangeInOtherCurrentLiabilities = property(lambda self: object(), lambda self, v: None,
                                               lambda self: None)  # default
    """The increase or decrease between periods of the Other Current liabilities. Other Current liabilities is a balance sheet entry used by

            companies to group together current liabilities that are not assigned to common liabilities such as debt obligations or accounts

            payable.



Get: ChangeInOtherCurrentLiabilities(self: CashFlowStatement) -> ChangeInOtherCurrentLiabilitiesCashFlowStatement



Set: ChangeInOtherCurrentLiabilities(self: CashFlowStatement) = value

"""

    ChangeInOtherWorkingCapital = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The increase or decrease between periods of the other working capital.



Get: ChangeInOtherWorkingCapital(self: CashFlowStatement) -> ChangeInOtherWorkingCapitalCashFlowStatement



Set: ChangeInOtherWorkingCapital(self: CashFlowStatement) = value

"""

    ChangeInPayable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The increase or decrease between periods of the payables.



Get: ChangeInPayable(self: CashFlowStatement) -> ChangeInPayableCashFlowStatement



Set: ChangeInPayable(self: CashFlowStatement) = value

"""

    ChangeInPayablesAndAccruedExpense = property(lambda self: object(), lambda self, v: None,
                                                 lambda self: None)  # default
    """The increase or decrease between periods of the payables and accrued expenses. Accrued expenses represent expenses incurred

            at the end of the reporting period but not yet paid; also called accrued liabilities. The accrued liability is shown under current

            liabilities in the balance sheet.



Get: ChangeInPayablesAndAccruedExpense(self: CashFlowStatement) -> ChangeInPayablesAndAccruedExpenseCashFlowStatement



Set: ChangeInPayablesAndAccruedExpense(self: CashFlowStatement) = value

"""

    ChangeInPrepaidAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The increase or decrease between periods of the prepaid assets.



Get: ChangeInPrepaidAssets(self: CashFlowStatement) -> ChangeInPrepaidAssetsCashFlowStatement



Set: ChangeInPrepaidAssets(self: CashFlowStatement) = value

"""

    ChangeInReceivables = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The increase or decrease between periods of the receivables. Receivables are amounts due to be paid to the company from clients

            and other.



Get: ChangeInReceivables(self: CashFlowStatement) -> ChangeInReceivablesCashFlowStatement



Set: ChangeInReceivables(self: CashFlowStatement) = value

"""

    ChangeinReinsuranceReceivables = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The increase or decrease between periods of the reinsurance receivable.



Get: ChangeinReinsuranceReceivables(self: CashFlowStatement) -> ChangeinReinsuranceReceivablesCashFlowStatement



Set: ChangeinReinsuranceReceivables(self: CashFlowStatement) = value

"""

    ChangeInReinsuranceRecoverableOnPaidAndUnpaidLosses = property(lambda self: object(), lambda self, v: None,
                                                                   lambda self: None)  # default
    """The net change during the reporting period in the amount of benefits the ceding insurer expects to recover on insurance policies

            ceded to other insurance entities as of the balance sheet date for all guaranteed benefit types.



Get: ChangeInReinsuranceRecoverableOnPaidAndUnpaidLosses(self: CashFlowStatement) -> ChangeInReinsuranceRecoverableOnPaidAndUnpaidLossesCashFlowStatement



Set: ChangeInReinsuranceRecoverableOnPaidAndUnpaidLosses(self: CashFlowStatement) = value

"""

    ChangeInRestrictedCash = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The net cash inflow (outflow) for the net change associated with funds that are not available for withdrawal or use (such as funds

            held in escrow).



Get: ChangeInRestrictedCash(self: CashFlowStatement) -> ChangeInRestrictedCashCashFlowStatement



Set: ChangeInRestrictedCash(self: CashFlowStatement) = value

"""

    ChangeInTaxPayable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The increase or decrease between periods of the tax payables.



Get: ChangeInTaxPayable(self: CashFlowStatement) -> ChangeInTaxPayableCashFlowStatement



Set: ChangeInTaxPayable(self: CashFlowStatement) = value

"""

    ChangeInTradingAccountSecurities = property(lambda self: object(), lambda self, v: None,
                                                lambda self: None)  # default
    """The net change during the reporting period associated with trading account assets. Trading account assets are bought and held

            principally for the purpose of selling them in the near term (thus held for only a short period of time). Unrealized holding gains and

            losses for trading securities are included in earnings.



Get: ChangeInTradingAccountSecurities(self: CashFlowStatement) -> ChangeInTradingAccountSecuritiesCashFlowStatement



Set: ChangeInTradingAccountSecurities(self: CashFlowStatement) = value

"""

    ChangeInUnearnedPremiums = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The change during the period in the unearned portion of premiums written, excluding the portion amortized into income. This item is

            usually only available for insurance industry.



Get: ChangeInUnearnedPremiums(self: CashFlowStatement) -> ChangeInUnearnedPremiumsCashFlowStatement



Set: ChangeInUnearnedPremiums(self: CashFlowStatement) = value

"""

    ChangeInWorkingCapital = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The increase or decrease between periods of the working capital.  Working Capital is the amount left to the company to finance

            operations and expansion after current liabilities have been covered.



Get: ChangeInWorkingCapital(self: CashFlowStatement) -> ChangeInWorkingCapitalCashFlowStatement



Set: ChangeInWorkingCapital(self: CashFlowStatement) = value

"""

    ChangesInAccountReceivables = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The increase or decrease between periods of the accounts receivables.



Get: ChangesInAccountReceivables(self: CashFlowStatement) -> ChangesInAccountReceivablesCashFlowStatement



Set: ChangesInAccountReceivables(self: CashFlowStatement) = value

"""

    ChangesInCash = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The net change between the beginning and ending balance of cash and cash equivalents.



Get: ChangesInCash(self: CashFlowStatement) -> ChangesInCashCashFlowStatement



Set: ChangesInCash(self: CashFlowStatement) = value

"""

    ClaimsPaid = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cash paid out for claims by a insurance company during the period in operating cash flow, using the direct method. This item is

            usually only available for insurance industry



Get: ClaimsPaid(self: CashFlowStatement) -> ClaimsPaidCashFlowStatement



Set: ClaimsPaid(self: CashFlowStatement) = value

"""

    ClassesofCashPayments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Sum of total cash payment in the direct cash flow.



Get: ClassesofCashPayments(self: CashFlowStatement) -> ClassesofCashPaymentsCashFlowStatement



Set: ClassesofCashPayments(self: CashFlowStatement) = value

"""

    ClassesofCashReceiptsfromOperatingActivities = property(lambda self: object(), lambda self, v: None,
                                                            lambda self: None)  # default
    """Sum of total cash receipts in the direct cash flow.



Get: ClassesofCashReceiptsfromOperatingActivities(self: CashFlowStatement) -> ClassesofCashReceiptsfromOperatingActivitiesCashFlowStatement



Set: ClassesofCashReceiptsfromOperatingActivities(self: CashFlowStatement) = value

"""

    CommissionPaid = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cash paid for commissions in operating cash flow, using the direct method



Get: CommissionPaid(self: CashFlowStatement) -> CommissionPaidCashFlowStatement



Set: CommissionPaid(self: CashFlowStatement) = value

"""

    CommonStockDividendPaid = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The cash outflow from the distribution of an entity's earnings in the form of dividends to common shareholders.



Get: CommonStockDividendPaid(self: CashFlowStatement) -> CommonStockDividendPaidCashFlowStatement



Set: CommonStockDividendPaid(self: CashFlowStatement) = value

"""

    CommonStockIssuance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The cash inflow from offering common stock, which is the additional capital contribution to the entity during the period.



Get: CommonStockIssuance(self: CashFlowStatement) -> CommonStockIssuanceCashFlowStatement



Set: CommonStockIssuance(self: CashFlowStatement) = value

"""

    CommonStockPayments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The cash outflow to reacquire common stock during the period.



Get: CommonStockPayments(self: CashFlowStatement) -> CommonStockPaymentsCashFlowStatement



Set: CommonStockPayments(self: CashFlowStatement) = value

"""

    DecreaseinInterestBearingDepositsinBank = property(lambda self: object(), lambda self, v: None,
                                                       lambda self: None)  # default
    """The net change on interest-bearing deposits in other financial institutions for relatively short periods of time including, for example,

            certificates of deposits.



Get: DecreaseinInterestBearingDepositsinBank(self: CashFlowStatement) -> DecreaseinInterestBearingDepositsinBankCashFlowStatement



Set: DecreaseinInterestBearingDepositsinBank(self: CashFlowStatement) = value

"""

    DeferredIncomeTax = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The component of income tax expense for the period representing the net change in the entities deferred tax assets and liabilities

            pertaining to continuing operations.



Get: DeferredIncomeTax(self: CashFlowStatement) -> DeferredIncomeTaxCashFlowStatement



Set: DeferredIncomeTax(self: CashFlowStatement) = value

"""

    DeferredTax = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Future tax liability or asset, resulting from temporary differences between book (accounting) value of assets and liabilities, and their

            tax value. This arises due to differences between financial accounting for shareholders and tax accounting.



Get: DeferredTax(self: CashFlowStatement) -> DeferredTaxCashFlowStatement



Set: DeferredTax(self: CashFlowStatement) = value

"""

    Depletion = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Unlike depreciation and amortization, which mainly describe the deduction of expenses due to the aging of equipment and property,

            depletion is the actual physical reduction of natural resources by companies.   For example, coalmines, oil fields and other natural

            resources are depleted on company accounting statements. This reduction in the quantity of resources is meant to assist in

            accurately identifying the value of the asset on the balance sheet.



Get: Depletion(self: CashFlowStatement) -> DepletionCashFlowStatement



Set: Depletion(self: CashFlowStatement) = value

"""

    Depreciation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """An expense recorded to allocate a tangible asset's cost over its useful life. Since it is a non-cash expense, it increases free cash

            flow while decreasing reported earnings.



Get: Depreciation(self: CashFlowStatement) -> DepreciationCashFlowStatement



Set: Depreciation(self: CashFlowStatement) = value

"""

    DepreciationAmortizationDepletion = property(lambda self: object(), lambda self, v: None,
                                                 lambda self: None)  # default
    """It is a non cash charge that represents a reduction in the value of fixed assets due to wear, age or obsolescence. This figure also

            includes amortization of leased property, intangibles, and goodwill, and depletion. This non-cash item is an add-back to the cash

            flow statement.



Get: DepreciationAmortizationDepletion(self: CashFlowStatement) -> DepreciationAmortizationDepletionCashFlowStatement



Set: DepreciationAmortizationDepletion(self: CashFlowStatement) = value

"""

    DepreciationAndAmortization = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The current period expense charged against earnings on long-lived, physical assets used in the normal conduct of business and not

            intended for resale to allocate or recognize the cost of assets over their useful lives; or to record the reduction in book value of an

            intangible asset over the benefit period of such asset.



Get: DepreciationAndAmortization(self: CashFlowStatement) -> DepreciationAndAmortizationCashFlowStatement



Set: DepreciationAndAmortization(self: CashFlowStatement) = value

"""

    DividendPaidCFO = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Dividend paid to the investors, in the Operating Cash Flow section.



Get: DividendPaidCFO(self: CashFlowStatement) -> DividendPaidCFOCashFlowStatement



Set: DividendPaidCFO(self: CashFlowStatement) = value

"""

    DividendReceivedCFO = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Dividend received on investment, in the Operating Cash Flow section.



Get: DividendReceivedCFO(self: CashFlowStatement) -> DividendReceivedCFOCashFlowStatement



Set: DividendReceivedCFO(self: CashFlowStatement) = value

"""

    DividendsPaidDirect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Dividend paid to the investors, for the direct cash flow.



Get: DividendsPaidDirect(self: CashFlowStatement) -> DividendsPaidDirectCashFlowStatement



Set: DividendsPaidDirect(self: CashFlowStatement) = value

"""

    DividendsReceivedCFI = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Dividend received on investment, in the Investing Cash Flow section.



Get: DividendsReceivedCFI(self: CashFlowStatement) -> DividendsReceivedCFICashFlowStatement



Set: DividendsReceivedCFI(self: CashFlowStatement) = value

"""

    DividendsReceivedDirect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Dividend received on the investment, for the direct cash flow.



Get: DividendsReceivedDirect(self: CashFlowStatement) -> DividendsReceivedDirectCashFlowStatement



Set: DividendsReceivedDirect(self: CashFlowStatement) = value

"""

    EarningsLossesFromEquityInvestments = property(lambda self: object(), lambda self, v: None,
                                                   lambda self: None)  # default
    """This item represents the entity's proportionate share for the period of the net income (loss) of its investee (such as unconsolidated

            subsidiaries and joint ventures) to which the equity method of accounting is applied. The amount typically reflects adjustments.



Get: EarningsLossesFromEquityInvestments(self: CashFlowStatement) -> EarningsLossesFromEquityInvestmentsCashFlowStatement



Set: EarningsLossesFromEquityInvestments(self: CashFlowStatement) = value

"""

    EffectOfExchangeRateChanges = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The effect of exchange rate changes on cash balances held in foreign currencies.



Get: EffectOfExchangeRateChanges(self: CashFlowStatement) -> EffectOfExchangeRateChangesCashFlowStatement



Set: EffectOfExchangeRateChanges(self: CashFlowStatement) = value

"""

    EndCashPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The cash and cash equivalents balance at the end of the accounting period, as indicated on the Cash Flow statement. It is equal to

            the Beginning Cash and Equivalents, plus the Net Change in Cash and Equivalents.



Get: EndCashPosition(self: CashFlowStatement) -> EndCashPositionCashFlowStatement



Set: EndCashPosition(self: CashFlowStatement) = value

"""

    ExcessTaxBenefitFromStockBasedCompensation = property(lambda self: object(), lambda self, v: None,
                                                          lambda self: None)  # default
    """Reductions in the entity's income taxes that arise when compensation cost (from non-qualified share-based compensation)

            recognized on the entities tax return exceeds compensation cost from share-based compensation recognized in financial

            statements. This element reduces net cash provided by operating activities.



Get: ExcessTaxBenefitFromStockBasedCompensation(self: CashFlowStatement) -> ExcessTaxBenefitFromStockBasedCompensationCashFlowStatement



Set: ExcessTaxBenefitFromStockBasedCompensation(self: CashFlowStatement) = value

"""

    FinancingCashFlow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The net cash inflow (outflow) from financing activity for the period, which involve changes to the long-term liabilities and

            stockholders' equity.



Get: FinancingCashFlow(self: CashFlowStatement) -> FinancingCashFlowCashFlowStatement



Set: FinancingCashFlow(self: CashFlowStatement) = value

"""

    FreeCashFlow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cash Flow Operations minus Capital Expenditures.



Get: FreeCashFlow(self: CashFlowStatement) -> FreeCashFlowCashFlowStatement



Set: FreeCashFlow(self: CashFlowStatement) = value

"""

    FundFromOperation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Funds from operations; populated only for real estate investment trusts (REITs), defined as the sum of net income, gain/loss

            (realized and unrealized) on investment securities, asset impairment charge, depreciation and amortization and gain/ loss on the

            sale of business and property plant and equipment.



Get: FundFromOperation(self: CashFlowStatement) -> FundFromOperationCashFlowStatement



Set: FundFromOperation(self: CashFlowStatement) = value

"""

    GainLossOnInvestmentSecurities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This item represents the net total realized gain (loss) included in earnings for the period as a result of selling or holding marketable

            securities categorized as trading, available-for-sale, or held-to-maturity, including the unrealized holding gain or loss of held-to-

            maturity securities transferred to the trading security category and the cumulative unrealized gain or loss which was included in

            other comprehensive income (a separate component of shareholders' equity) for available-for-sale securities transferred to trading

            securities during the period. Additionally, this item would include any losses recognized for other than temporary impairments of the

            subject investments in debt and equity securities.



Get: GainLossOnInvestmentSecurities(self: CashFlowStatement) -> GainLossOnInvestmentSecuritiesCashFlowStatement



Set: GainLossOnInvestmentSecurities(self: CashFlowStatement) = value

"""

    GainLossOnSaleOfBusiness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The difference between the sale price or salvage price and the book value of an asset that was sold or retired during the reporting

            period. This element refers to the gain (loss) and not to the cash proceeds of the business. This element is a non-cash adjustment

            to net income when calculating net cash generated by operating activities using the indirect method.



Get: GainLossOnSaleOfBusiness(self: CashFlowStatement) -> GainLossOnSaleOfBusinessCashFlowStatement



Set: GainLossOnSaleOfBusiness(self: CashFlowStatement) = value

"""

    GainLossOnSaleOfPPE = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The difference between the sale price or salvage price and the book value of the property, plant and equipment that was sold or

            retired during the reporting period. Includes the amount received from selling any fixed assets such as property, plant and

            equipment. Usually this section also includes any retirement of equipment. Such as Sale of business segments; Sale of credit and

            receivables; Property disposition; Proceeds from sale or disposition of business or investment; Decrease in excess of purchase price

            over acquired net assets; Abandoned project (expenditures) credit; Allowances for other funds during construction.



Get: GainLossOnSaleOfPPE(self: CashFlowStatement) -> GainLossOnSaleOfPPECashFlowStatement



Set: GainLossOnSaleOfPPE(self: CashFlowStatement) = value

"""

    ImpairmentLossReversalRecognizedinProfitorLoss = property(lambda self: object(), lambda self, v: None,
                                                              lambda self: None)  # default
    """The difference between the future net cash flows expected to be received from the asset and its book value, recognized in the

            Income Statement.



Get: ImpairmentLossReversalRecognizedinProfitorLoss(self: CashFlowStatement) -> ImpairmentLossReversalRecognizedinProfitorLossCashFlowStatement



Set: ImpairmentLossReversalRecognizedinProfitorLoss(self: CashFlowStatement) = value

"""

    IncomeTaxPaidSupplementalData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The amount of cash paid during the current period to foreign, federal state and local authorities as taxes on income.



Get: IncomeTaxPaidSupplementalData(self: CashFlowStatement) -> IncomeTaxPaidSupplementalDataCashFlowStatement



Set: IncomeTaxPaidSupplementalData(self: CashFlowStatement) = value

"""

    IncreaseDecreaseInDeposit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The aggregate net change during the reporting period in moneys given as security, collateral, or margin deposits.



Get: IncreaseDecreaseInDeposit(self: CashFlowStatement) -> IncreaseDecreaseInDepositCashFlowStatement



Set: IncreaseDecreaseInDeposit(self: CashFlowStatement) = value

"""

    IncreaseDecreaseinLeaseFinancing = property(lambda self: object(), lambda self, v: None,
                                                lambda self: None)  # default
    """Change in cash flow resulting from increase/decrease in lease financing.



Get: IncreaseDecreaseinLeaseFinancing(self: CashFlowStatement) -> IncreaseDecreaseinLeaseFinancingCashFlowStatement



Set: IncreaseDecreaseinLeaseFinancing(self: CashFlowStatement) = value

"""

    IncreaseinInterestBearingDepositsinBank = property(lambda self: object(), lambda self, v: None,
                                                       lambda self: None)  # default
    """Increase in interest-bearing deposits in bank.



Get: IncreaseinInterestBearingDepositsinBank(self: CashFlowStatement) -> IncreaseinInterestBearingDepositsinBankCashFlowStatement



Set: IncreaseinInterestBearingDepositsinBank(self: CashFlowStatement) = value

"""

    IncreaseinLeaseFinancing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The cash inflow from increase in lease financing.



Get: IncreaseinLeaseFinancing(self: CashFlowStatement) -> IncreaseinLeaseFinancingCashFlowStatement



Set: IncreaseinLeaseFinancing(self: CashFlowStatement) = value

"""

    InterestandCommissionPaid = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cash paid for interest and commission in operating cash flow, using the direct method



Get: InterestandCommissionPaid(self: CashFlowStatement) -> InterestandCommissionPaidCashFlowStatement



Set: InterestandCommissionPaid(self: CashFlowStatement) = value

"""

    InterestCreditedOnPolicyholderDeposits = property(lambda self: object(), lambda self, v: None,
                                                      lambda self: None)  # default
    """An expense reported in the income statement and needs to be removed from net income to arrive at cash provided by (used in)

            operations to the extent that such interest has not been paid. This item is usually only available for insurance industry.



Get: InterestCreditedOnPolicyholderDeposits(self: CashFlowStatement) -> InterestCreditedOnPolicyholderDepositsCashFlowStatement



Set: InterestCreditedOnPolicyholderDeposits(self: CashFlowStatement) = value

"""

    InterestPaidCFF = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Interest paid on loans, debt or borrowings, in the Financing Cash Flow section.



Get: InterestPaidCFF(self: CashFlowStatement) -> InterestPaidCFFCashFlowStatement



Set: InterestPaidCFF(self: CashFlowStatement) = value

"""

    InterestPaidCFO = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Interest paid on loans, debt or borrowings, in the Operating Cash Flow section.



Get: InterestPaidCFO(self: CashFlowStatement) -> InterestPaidCFOCashFlowStatement



Set: InterestPaidCFO(self: CashFlowStatement) = value

"""

    InterestPaidDirect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Interest paid on loans, debt or borrowings, in the direct cash flow.



Get: InterestPaidDirect(self: CashFlowStatement) -> InterestPaidDirectCashFlowStatement



Set: InterestPaidDirect(self: CashFlowStatement) = value

"""

    InterestPaidSupplementalData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The amount of cash paid during the current period for interest owed on money borrowed; including amount of interest capitalized.



Get: InterestPaidSupplementalData(self: CashFlowStatement) -> InterestPaidSupplementalDataCashFlowStatement



Set: InterestPaidSupplementalData(self: CashFlowStatement) = value

"""

    InterestReceivedCFI = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Interest received by the company, in the Investing Cash Flow section.



Get: InterestReceivedCFI(self: CashFlowStatement) -> InterestReceivedCFICashFlowStatement



Set: InterestReceivedCFI(self: CashFlowStatement) = value

"""

    InterestReceivedCFO = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Interest received by the company, in the Operating Cash Flow section.



Get: InterestReceivedCFO(self: CashFlowStatement) -> InterestReceivedCFOCashFlowStatement



Set: InterestReceivedCFO(self: CashFlowStatement) = value

"""

    InterestReceivedDirect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Interest received by the company, in the direct cash flow.



Get: InterestReceivedDirect(self: CashFlowStatement) -> InterestReceivedDirectCashFlowStatement



Set: InterestReceivedDirect(self: CashFlowStatement) = value

"""

    InvestingCashFlow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """An item on the cash flow statement that reports the aggregate change in a company's cash position resulting from any gains (or

            losses) from investments in the financial markets and operating subsidiaries, and changes resulting from amounts spent on

            investments in capital assets such as plant and equipment.



Get: InvestingCashFlow(self: CashFlowStatement) -> InvestingCashFlowCashFlowStatement



Set: InvestingCashFlow(self: CashFlowStatement) = value

"""

    IssuanceOfCapitalStock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The cash inflow from offering common stock, which is the additional capital contribution to the entity during the period.



Get: IssuanceOfCapitalStock(self: CashFlowStatement) -> IssuanceOfCapitalStockCashFlowStatement



Set: IssuanceOfCapitalStock(self: CashFlowStatement) = value

"""

    IssuanceOfDebt = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The cash inflow due to an increase in long term debt.



Get: IssuanceOfDebt(self: CashFlowStatement) -> IssuanceOfDebtCashFlowStatement



Set: IssuanceOfDebt(self: CashFlowStatement) = value

"""

    IssueExpenses = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cost associated with issuance of debt/equity capital in the Financing Cash Flow section.



Get: IssueExpenses(self: CashFlowStatement) -> IssueExpensesCashFlowStatement



Set: IssueExpenses(self: CashFlowStatement) = value

"""

    LongTermDebtIssuance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The cash inflow from a debt initially having maturity due after one year or beyond the operating cycle, if longer.



Get: LongTermDebtIssuance(self: CashFlowStatement) -> LongTermDebtIssuanceCashFlowStatement



Set: LongTermDebtIssuance(self: CashFlowStatement) = value

"""

    LongTermDebtPayments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The cash outflow for debt initially having maturity due after one year or beyond the normal operating cycle, if longer.



Get: LongTermDebtPayments(self: CashFlowStatement) -> LongTermDebtPaymentsCashFlowStatement



Set: LongTermDebtPayments(self: CashFlowStatement) = value

"""

    MinorityInterest = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Amount of net income (loss) for the period allocated to non-controlling shareholders, partners, or other equity holders in one or

            more of the entities included.



Get: MinorityInterest(self: CashFlowStatement) -> MinorityInterestCashFlowStatement



Set: MinorityInterest(self: CashFlowStatement) = value

"""

    NetBusinessPurchaseAndSale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The net change between Purchases/Sales of Business.



Get: NetBusinessPurchaseAndSale(self: CashFlowStatement) -> NetBusinessPurchaseAndSaleCashFlowStatement



Set: NetBusinessPurchaseAndSale(self: CashFlowStatement) = value

"""

    NetCashFromDiscontinuedOperations = property(lambda self: object(), lambda self, v: None,
                                                 lambda self: None)  # default
    """The net cash from (used in) all of the entity's discontinued operating activities, excluding those of continued operations, of the

            reporting entity.



Get: NetCashFromDiscontinuedOperations(self: CashFlowStatement) -> NetCashFromDiscontinuedOperationsCashFlowStatement



Set: NetCashFromDiscontinuedOperations(self: CashFlowStatement) = value

"""

    NetCommonStockIssuance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The increase or decrease between periods of common stock.



Get: NetCommonStockIssuance(self: CashFlowStatement) -> NetCommonStockIssuanceCashFlowStatement



Set: NetCommonStockIssuance(self: CashFlowStatement) = value

"""

    NetForeignCurrencyExchangeGainLoss = property(lambda self: object(), lambda self, v: None,
                                                  lambda self: None)  # default
    """The aggregate amount of realized and unrealized gain or loss resulting from changes in exchange rates between currencies.

            (Excludes foreign currency transactions designated as hedges of net investment in a foreign entity and inter-company foreign

            currency transactions that are of a long-term nature, when the entities to the transaction are consolidated, combined, or accounted

            for by the equity method in the reporting entity's financial statements. For certain entities, primarily banks, which are dealers in

            foreign exchange, foreign currency transaction gains or losses, may be disclosed as dealer gains or losses.)



Get: NetForeignCurrencyExchangeGainLoss(self: CashFlowStatement) -> NetForeignCurrencyExchangeGainLossCashFlowStatement



Set: NetForeignCurrencyExchangeGainLoss(self: CashFlowStatement) = value

"""

    NetIncomeFromContinuingOperations = property(lambda self: object(), lambda self, v: None,
                                                 lambda self: None)  # default
    """Revenue less expenses and taxes from the entity's ongoing operations and before income (loss) from discontinued operations,

            extraordinary items, impact of changes in accounting principles, minority interest, and various other reconciling adjustments;

            represents the starting line for Operating Cash Flow.



Get: NetIncomeFromContinuingOperations(self: CashFlowStatement) -> NetIncomeFromContinuingOperationsCashFlowStatement



Set: NetIncomeFromContinuingOperations(self: CashFlowStatement) = value

"""

    NetIntangiblesPurchaseAndSale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The net change between Purchases/Sales of Intangibles.



Get: NetIntangiblesPurchaseAndSale(self: CashFlowStatement) -> NetIntangiblesPurchaseAndSaleCashFlowStatement



Set: NetIntangiblesPurchaseAndSale(self: CashFlowStatement) = value

"""

    NetInvestmentPropertiesPurchaseAndSale = property(lambda self: object(), lambda self, v: None,
                                                      lambda self: None)  # default
    """Net increase or decrease in cash due to purchases or sales of investment properties during the accounting period.



Get: NetInvestmentPropertiesPurchaseAndSale(self: CashFlowStatement) -> NetInvestmentPropertiesPurchaseAndSaleCashFlowStatement



Set: NetInvestmentPropertiesPurchaseAndSale(self: CashFlowStatement) = value

"""

    NetInvestmentPurchaseAndSale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The net change between Purchases/Sales of Investments.



Get: NetInvestmentPurchaseAndSale(self: CashFlowStatement) -> NetInvestmentPurchaseAndSaleCashFlowStatement



Set: NetInvestmentPurchaseAndSale(self: CashFlowStatement) = value

"""

    NetIssuancePaymentsOfDebt = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The increase or decrease between periods of debt.



Get: NetIssuancePaymentsOfDebt(self: CashFlowStatement) -> NetIssuancePaymentsOfDebtCashFlowStatement



Set: NetIssuancePaymentsOfDebt(self: CashFlowStatement) = value

"""

    NetLongTermDebtIssuance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The increase or decrease between periods of long term debt. Long term debt includes notes payable, bonds payable, mortgage

            loans, convertible debt, subordinated debt and other types of long term debt.



Get: NetLongTermDebtIssuance(self: CashFlowStatement) -> NetLongTermDebtIssuanceCashFlowStatement



Set: NetLongTermDebtIssuance(self: CashFlowStatement) = value

"""

    NetOtherFinancingCharges = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Miscellaneous charges incurred due to Financing activities.



Get: NetOtherFinancingCharges(self: CashFlowStatement) -> NetOtherFinancingChargesCashFlowStatement



Set: NetOtherFinancingCharges(self: CashFlowStatement) = value

"""

    NetOtherInvestingChanges = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Miscellaneous charges incurred due to Investing activities.



Get: NetOtherInvestingChanges(self: CashFlowStatement) -> NetOtherInvestingChangesCashFlowStatement



Set: NetOtherInvestingChanges(self: CashFlowStatement) = value

"""

    NetOutwardLoans = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Adjustments due to net loans to/from outsiders in the Investing Cash Flow section.



Get: NetOutwardLoans(self: CashFlowStatement) -> NetOutwardLoansCashFlowStatement



Set: NetOutwardLoans(self: CashFlowStatement) = value

"""

    NetPPEPurchaseAndSale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The net change between Purchases/Sales of PPE.



Get: NetPPEPurchaseAndSale(self: CashFlowStatement) -> NetPPEPurchaseAndSaleCashFlowStatement



Set: NetPPEPurchaseAndSale(self: CashFlowStatement) = value

"""

    NetPreferredStockIssuance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The increase or decrease between periods of preferred stock.



Get: NetPreferredStockIssuance(self: CashFlowStatement) -> NetPreferredStockIssuanceCashFlowStatement



Set: NetPreferredStockIssuance(self: CashFlowStatement) = value

"""

    NetProceedsPaymentForLoan = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The net value of proceeds or payments of loans.



Get: NetProceedsPaymentForLoan(self: CashFlowStatement) -> NetProceedsPaymentForLoanCashFlowStatement



Set: NetProceedsPaymentForLoan(self: CashFlowStatement) = value

"""

    NetShortTermDebtIssuance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The increase or decrease between periods of short term debt.



Get: NetShortTermDebtIssuance(self: CashFlowStatement) -> NetShortTermDebtIssuanceCashFlowStatement



Set: NetShortTermDebtIssuance(self: CashFlowStatement) = value

"""

    OperatingCashFlow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The net cash from (used in) all of the entity's operating activities, including those of discontinued operations, of the reporting entity.

            Operating activities include all transactions and events that are not defined as investing or financing activities. Operating activities

            generally involve producing and delivering goods and providing services. Cash flows from operating activities are generally the cash

            effects of transactions and other events that enter into the determination of net income.



Get: OperatingCashFlow(self: CashFlowStatement) -> OperatingCashFlowCashFlowStatement



Set: OperatingCashFlow(self: CashFlowStatement) = value

"""

    OperatingGainsLosses = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The gain or loss from the entity's ongoing operations.



Get: OperatingGainsLosses(self: CashFlowStatement) -> OperatingGainsLossesCashFlowStatement



Set: OperatingGainsLosses(self: CashFlowStatement) = value

"""

    OtherCashAdjustExcludeFromChangeinCash = property(lambda self: object(), lambda self, v: None,
                                                      lambda self: None)  # default
    """Other changes to cash and cash equivalents during the accounting period.



Get: OtherCashAdjustExcludeFromChangeinCash(self: CashFlowStatement) -> OtherCashAdjustExcludeFromChangeinCashCashFlowStatement



Set: OtherCashAdjustExcludeFromChangeinCash(self: CashFlowStatement) = value

"""

    OtherCashAdjustIncludedIntoChangeinCash = property(lambda self: object(), lambda self, v: None,
                                                       lambda self: None)  # default
    """Other cash adjustments included in change in cash not categorized above.



Get: OtherCashAdjustIncludedIntoChangeinCash(self: CashFlowStatement) -> OtherCashAdjustIncludedIntoChangeinCashCashFlowStatement



Set: OtherCashAdjustIncludedIntoChangeinCash(self: CashFlowStatement) = value

"""

    OtherCashPaymentsfromOperatingActivities = property(lambda self: object(), lambda self, v: None,
                                                        lambda self: None)  # default
    """Other cash payments for the direct cash flow.



Get: OtherCashPaymentsfromOperatingActivities(self: CashFlowStatement) -> OtherCashPaymentsfromOperatingActivitiesCashFlowStatement



Set: OtherCashPaymentsfromOperatingActivities(self: CashFlowStatement) = value

"""

    OtherCashReceiptsfromOperatingActivities = property(lambda self: object(), lambda self, v: None,
                                                        lambda self: None)  # default
    """Other cash receipts for the direct cash flow.



Get: OtherCashReceiptsfromOperatingActivities(self: CashFlowStatement) -> OtherCashReceiptsfromOperatingActivitiesCashFlowStatement



Set: OtherCashReceiptsfromOperatingActivities(self: CashFlowStatement) = value

"""

    OtherNonCashItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Items which adjusted back from net income but without real cash outflow or inflow.



Get: OtherNonCashItems(self: CashFlowStatement) -> OtherNonCashItemsCashFlowStatement



Set: OtherNonCashItems(self: CashFlowStatement) = value

"""

    OtherOperatingInflowsOutflowsofCash = property(lambda self: object(), lambda self, v: None,
                                                   lambda self: None)  # default
    """Any other cash inflows or outflows in the Operating Cash Flow section, not accounted for in the other specified items.



Get: OtherOperatingInflowsOutflowsofCash(self: CashFlowStatement) -> OtherOperatingInflowsOutflowsofCashCashFlowStatement



Set: OtherOperatingInflowsOutflowsofCash(self: CashFlowStatement) = value

"""

    OtherUnderwritingExpensesPaid = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cash paid out for underwriting expenses, such as the acquisition of new and renewal insurance contracts, in operating cash flow,

            using the direct method. This item is usually only available for insurance industry



Get: OtherUnderwritingExpensesPaid(self: CashFlowStatement) -> OtherUnderwritingExpensesPaidCashFlowStatement



Set: OtherUnderwritingExpensesPaid(self: CashFlowStatement) = value

"""

    PaymentForLoans = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Payment from a bank or insurance company to the lender who lends money or property based on the agreement, along with

            interest, at a predetermined date in the future.



Get: PaymentForLoans(self: CashFlowStatement) -> PaymentForLoansCashFlowStatement



Set: PaymentForLoans(self: CashFlowStatement) = value

"""

    PaymentsonBehalfofEmployees = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cash paid in a form of salaries or other benefits to employees of the company, in the direct cash flow.



Get: PaymentsonBehalfofEmployees(self: CashFlowStatement) -> PaymentsonBehalfofEmployeesCashFlowStatement



Set: PaymentsonBehalfofEmployees(self: CashFlowStatement) = value

"""

    PaymentstoSuppliersforGoodsandServices = property(lambda self: object(), lambda self, v: None,
                                                      lambda self: None)  # default
    """Cash paid to suppliers when purchasing goods or services by the company, in the direct cash flow.



Get: PaymentstoSuppliersforGoodsandServices(self: CashFlowStatement) -> PaymentstoSuppliersforGoodsandServicesCashFlowStatement



Set: PaymentstoSuppliersforGoodsandServices(self: CashFlowStatement) = value

"""

    PensionAndEmployeeBenefitExpense = property(lambda self: object(), lambda self, v: None,
                                                lambda self: None)  # default
    """The amount of pension and other (such as medical, dental and life insurance) postretirement benefit costs recognized during the

            period.



Get: PensionAndEmployeeBenefitExpense(self: CashFlowStatement) -> PensionAndEmployeeBenefitExpenseCashFlowStatement



Set: PensionAndEmployeeBenefitExpense(self: CashFlowStatement) = value

"""

    PolicyholderDepositInvestmentReceived = property(lambda self: object(), lambda self, v: None,
                                                     lambda self: None)  # default
    """Cash received from policyholder deposit investment activities in operating cash flow, using the direct method. This item is usually

            only available for insurance industry



Get: PolicyholderDepositInvestmentReceived(self: CashFlowStatement) -> PolicyholderDepositInvestmentReceivedCashFlowStatement



Set: PolicyholderDepositInvestmentReceived(self: CashFlowStatement) = value

"""

    PreferredStockDividendPaid = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Pay for the amount of dividends declared or paid in the period to preferred shareholders or the amount for which the obligation to

            pay them dividends rose in the period.



Get: PreferredStockDividendPaid(self: CashFlowStatement) -> PreferredStockDividendPaidCashFlowStatement



Set: PreferredStockDividendPaid(self: CashFlowStatement) = value

"""

    PreferredStockIssuance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The cash inflow from offering preferred stock.



Get: PreferredStockIssuance(self: CashFlowStatement) -> PreferredStockIssuanceCashFlowStatement



Set: PreferredStockIssuance(self: CashFlowStatement) = value

"""

    PreferredStockPayments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The cash outflow to reacquire preferred stock during the period.



Get: PreferredStockPayments(self: CashFlowStatement) -> PreferredStockPaymentsCashFlowStatement



Set: PreferredStockPayments(self: CashFlowStatement) = value

"""

    PremiumReceived = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cash received from premium income in operating cash flow, using the direct method. This item is usually only available for

            insurance industry



Get: PremiumReceived(self: CashFlowStatement) -> PremiumReceivedCashFlowStatement



Set: PremiumReceived(self: CashFlowStatement) = value

"""

    ProceedsFromLoans = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The cash inflow from borrowing money or property for a bank or insurance company.



Get: ProceedsFromLoans(self: CashFlowStatement) -> ProceedsFromLoansCashFlowStatement



Set: ProceedsFromLoans(self: CashFlowStatement) = value

"""

    ProceedsFromStockOptionExercised = property(lambda self: object(), lambda self, v: None,
                                                lambda self: None)  # default
    """The cash inflow associated with the amount received from holders exercising their stock options.



Get: ProceedsFromStockOptionExercised(self: CashFlowStatement) -> ProceedsFromStockOptionExercisedCashFlowStatement



Set: ProceedsFromStockOptionExercised(self: CashFlowStatement) = value

"""

    ProceedsPaymentFederalFundsSoldAndSecuritiesPurchasedUnderAgreementToResell = property(lambda self: object(),
                                                                                           lambda self, v: None,
                                                                                           lambda self: None)  # default
    """The aggregate amount change of (1) the lending of excess federal funds to another commercial bank requiring such for its legal

            reserve requirements and (2) securities purchased under agreements to resell. This item is usually only available for bank industry.



Get: ProceedsPaymentFederalFundsSoldAndSecuritiesPurchasedUnderAgreementToResell(self: CashFlowStatement) -> ProceedsPaymentFederalFundsSoldAndSecuritiesPurchasedUnderAgreementToResellCashFlowStatement



Set: ProceedsPaymentFederalFundsSoldAndSecuritiesPurchasedUnderAgreementToResell(self: CashFlowStatement) = value

"""

    ProceedsPaymentInInterestBearingDepositsInBank = property(lambda self: object(), lambda self, v: None,
                                                              lambda self: None)  # default
    """The net change on interest-bearing deposits in other financial institutions for relatively short periods of time including, for example,

            certificates of deposits.



Get: ProceedsPaymentInInterestBearingDepositsInBank(self: CashFlowStatement) -> ProceedsPaymentInInterestBearingDepositsInBankCashFlowStatement



Set: ProceedsPaymentInInterestBearingDepositsInBank(self: CashFlowStatement) = value

"""

    ProfitonDisposals = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The difference between the sale price or salvage price and the book value of an asset that was sold or retired during the reporting

            period.



Get: ProfitonDisposals(self: CashFlowStatement) -> ProfitonDisposalsCashFlowStatement



Set: ProfitonDisposals(self: CashFlowStatement) = value

"""

    ProvisionandWriteOffofAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A non-cash adjustment for total provision and write off on assets & liabilities.



Get: ProvisionandWriteOffofAssets(self: CashFlowStatement) -> ProvisionandWriteOffofAssetsCashFlowStatement



Set: ProvisionandWriteOffofAssets(self: CashFlowStatement) = value

"""

    ProvisionForLoanLeaseAndOtherLosses = property(lambda self: object(), lambda self, v: None,
                                                   lambda self: None)  # default
    """The sum of the periodic provision charged to earnings, based on an assessment of uncollectible from the counterparty on account

            of loan, lease or other credit losses, to reduce these accounts to the amount that approximates their net realizable value. This item

            is usually only available for bank industry.



Get: ProvisionForLoanLeaseAndOtherLosses(self: CashFlowStatement) -> ProvisionForLoanLeaseAndOtherLossesCashFlowStatement



Set: ProvisionForLoanLeaseAndOtherLosses(self: CashFlowStatement) = value

"""

    PurchaseOfBusiness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """All the purchases of business including business acquisitions, investment in subsidiary; investing in affiliated companies, and join

            venture.



Get: PurchaseOfBusiness(self: CashFlowStatement) -> PurchaseOfBusinessCashFlowStatement



Set: PurchaseOfBusiness(self: CashFlowStatement) = value

"""

    PurchaseOfIntangibles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The amount of capital outlays undertaken to increase, construct or improve intangible assets.



Get: PurchaseOfIntangibles(self: CashFlowStatement) -> PurchaseOfIntangiblesCashFlowStatement



Set: PurchaseOfIntangibles(self: CashFlowStatement) = value

"""

    PurchaseOfInvestment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """All purchases of investments, including both long term and short term.



Get: PurchaseOfInvestment(self: CashFlowStatement) -> PurchaseOfInvestmentCashFlowStatement



Set: PurchaseOfInvestment(self: CashFlowStatement) = value

"""

    PurchaseOfInvestmentProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cash outflow for purchases of investment properties during the accounting period.



Get: PurchaseOfInvestmentProperties(self: CashFlowStatement) -> PurchaseOfInvestmentPropertiesCashFlowStatement



Set: PurchaseOfInvestmentProperties(self: CashFlowStatement) = value

"""

    PurchaseofJointVentureAssociate = property(lambda self: object(), lambda self, v: None,
                                               lambda self: None)  # default
    """Purchase of joint venture/associates (investment below 50%).



Get: PurchaseofJointVentureAssociate(self: CashFlowStatement) -> PurchaseofJointVentureAssociateCashFlowStatement



Set: PurchaseofJointVentureAssociate(self: CashFlowStatement) = value

"""

    PurchaseOfPPE = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The amount of capital outlays undertaken to increase, construct or improve capital assets. This category includes property, plant

            equipment, furniture, fixed assets, buildings, and improvement.



Get: PurchaseOfPPE(self: CashFlowStatement) -> PurchaseOfPPECashFlowStatement



Set: PurchaseOfPPE(self: CashFlowStatement) = value

"""

    PurchaseofSubsidiaries = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Purchase of subsidiaries or interest in subsidiaries (investments 51% and above).



Get: PurchaseofSubsidiaries(self: CashFlowStatement) -> PurchaseofSubsidiariesCashFlowStatement



Set: PurchaseofSubsidiaries(self: CashFlowStatement) = value

"""

    RealizedGainLossOnSaleOfLoansAndLease = property(lambda self: object(), lambda self, v: None,
                                                     lambda self: None)  # default
    """The gains and losses included in earnings that represent the difference between the sale price and the carrying value of loans and

            leases that were sold during the reporting period. This element refers to the gain (loss) and not to the cash proceeds of the sales.

            This element is a non-cash adjustment to net income when calculating net cash generated by operating activities using the indirect

            method. This item is usually only available for bank industry.



Get: RealizedGainLossOnSaleOfLoansAndLease(self: CashFlowStatement) -> RealizedGainLossOnSaleOfLoansAndLeaseCashFlowStatement



Set: RealizedGainLossOnSaleOfLoansAndLease(self: CashFlowStatement) = value

"""

    ReceiptsfromCustomers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Payment received from customers in the Direct Cash Flow.



Get: ReceiptsfromCustomers(self: CashFlowStatement) -> ReceiptsfromCustomersCashFlowStatement



Set: ReceiptsfromCustomers(self: CashFlowStatement) = value

"""

    ReceiptsfromGovernmentGrants = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cash received from governments in the form of grants in the Direct Cash Flow.



Get: ReceiptsfromGovernmentGrants(self: CashFlowStatement) -> ReceiptsfromGovernmentGrantsCashFlowStatement



Set: ReceiptsfromGovernmentGrants(self: CashFlowStatement) = value

"""

    ReinsuranceandOtherRecoveriesReceived = property(lambda self: object(), lambda self, v: None,
                                                     lambda self: None)  # default
    """Cash received from reinsurance income or other recoveries income in operating cash flow, using the direct method. This item is

            usually only available for insurance industry



Get: ReinsuranceandOtherRecoveriesReceived(self: CashFlowStatement) -> ReinsuranceandOtherRecoveriesReceivedCashFlowStatement



Set: ReinsuranceandOtherRecoveriesReceived(self: CashFlowStatement) = value

"""

    ReorganizationOtherCosts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A non-cash adjustment relating to restructuring costs.



Get: ReorganizationOtherCosts(self: CashFlowStatement) -> ReorganizationOtherCostsCashFlowStatement



Set: ReorganizationOtherCosts(self: CashFlowStatement) = value

"""

    RepaymentinLeaseFinancing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The cash outflow to repay lease financing during the period.



Get: RepaymentinLeaseFinancing(self: CashFlowStatement) -> RepaymentinLeaseFinancingCashFlowStatement



Set: RepaymentinLeaseFinancing(self: CashFlowStatement) = value

"""

    RepaymentOfDebt = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Payments to Settle Long Term Debt plus Payments to Settle Short Term Debt.



Get: RepaymentOfDebt(self: CashFlowStatement) -> RepaymentOfDebtCashFlowStatement



Set: RepaymentOfDebt(self: CashFlowStatement) = value

"""

    RepurchaseOfCapitalStock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Payments for Common Stock plus Payments for Preferred Stock.



Get: RepurchaseOfCapitalStock(self: CashFlowStatement) -> RepurchaseOfCapitalStockCashFlowStatement



Set: RepurchaseOfCapitalStock(self: CashFlowStatement) = value

"""

    SaleOfBusiness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Proceeds received from selling a business including proceeds from a subsidiary, and proceeds from an affiliated company.



Get: SaleOfBusiness(self: CashFlowStatement) -> SaleOfBusinessCashFlowStatement



Set: SaleOfBusiness(self: CashFlowStatement) = value

"""

    SaleOfIntangibles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The amount of capital inflow from the sale of all kinds of intangible assets.



Get: SaleOfIntangibles(self: CashFlowStatement) -> SaleOfIntangiblesCashFlowStatement



Set: SaleOfIntangibles(self: CashFlowStatement) = value

"""

    SaleOfInvestment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Proceeds received from selling all kind of investments, including both long term and short term.



Get: SaleOfInvestment(self: CashFlowStatement) -> SaleOfInvestmentCashFlowStatement



Set: SaleOfInvestment(self: CashFlowStatement) = value

"""

    SaleOfInvestmentProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cash inflow from sale of investment properties during the accounting period.



Get: SaleOfInvestmentProperties(self: CashFlowStatement) -> SaleOfInvestmentPropertiesCashFlowStatement



Set: SaleOfInvestmentProperties(self: CashFlowStatement) = value

"""

    SaleofJointVentureAssociate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cash inflow from the disposal of joint venture/associates (investment below 50%).



Get: SaleofJointVentureAssociate(self: CashFlowStatement) -> SaleofJointVentureAssociateCashFlowStatement



Set: SaleofJointVentureAssociate(self: CashFlowStatement) = value

"""

    SaleOfPPE = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Proceeds from selling any fixed assets such as property, plant and equipment, which also includes retirement of equipment.



Get: SaleOfPPE(self: CashFlowStatement) -> SaleOfPPECashFlowStatement



Set: SaleOfPPE(self: CashFlowStatement) = value

"""

    SaleofSubsidiaries = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cash inflow from the disposal of any subsidiaries.



Get: SaleofSubsidiaries(self: CashFlowStatement) -> SaleofSubsidiariesCashFlowStatement



Set: SaleofSubsidiaries(self: CashFlowStatement) = value

"""

    ShareofAssociates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A non-cash adjustment for share of associates' income in respect of operating activities.



Get: ShareofAssociates(self: CashFlowStatement) -> ShareofAssociatesCashFlowStatement



Set: ShareofAssociates(self: CashFlowStatement) = value

"""

    ShortTermDebtIssuance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The cash inflow from a debt initially having maturity due within one year or the normal operating cycle, if longer.



Get: ShortTermDebtIssuance(self: CashFlowStatement) -> ShortTermDebtIssuanceCashFlowStatement



Set: ShortTermDebtIssuance(self: CashFlowStatement) = value

"""

    ShortTermDebtPayments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The cash outflow for a borrowing having initial term of repayment within one year or the normal operating cycle, if longer.



Get: ShortTermDebtPayments(self: CashFlowStatement) -> ShortTermDebtPaymentsCashFlowStatement



Set: ShortTermDebtPayments(self: CashFlowStatement) = value

"""

    StockBasedCompensation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Value of stock issued during the period as a result of any share-based compensation plan other than an employee stock ownership

            plan (ESOP).



Get: StockBasedCompensation(self: CashFlowStatement) -> StockBasedCompensationCashFlowStatement



Set: StockBasedCompensation(self: CashFlowStatement) = value

"""

    TaxesRefundPaid = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Total tax paid or received on operating activities.



Get: TaxesRefundPaid(self: CashFlowStatement) -> TaxesRefundPaidCashFlowStatement



Set: TaxesRefundPaid(self: CashFlowStatement) = value

"""

    TaxesRefundPaidDirect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Tax paid/refund related to operating activities, for the direct cash flow.



Get: TaxesRefundPaidDirect(self: CashFlowStatement) -> TaxesRefundPaidDirectCashFlowStatement



Set: TaxesRefundPaidDirect(self: CashFlowStatement) = value

"""

    TotalAdjustmentsforNonCashItems = property(lambda self: object(), lambda self, v: None,
                                               lambda self: None)  # default
    """Sum of all adjustments back from net income but without real cash outflow or inflow.



Get: TotalAdjustmentsforNonCashItems(self: CashFlowStatement) -> TotalAdjustmentsforNonCashItemsCashFlowStatement



Set: TotalAdjustmentsforNonCashItems(self: CashFlowStatement) = value

"""

    UnrealizedGainLossOnInvestmentSecurities = property(lambda self: object(), lambda self, v: None,
                                                        lambda self: None)  # default
    """The increases (decreases) in the market value of unsold securities whose gains (losses) were included in earnings.



Get: UnrealizedGainLossOnInvestmentSecurities(self: CashFlowStatement) -> UnrealizedGainLossOnInvestmentSecuritiesCashFlowStatement



Set: UnrealizedGainLossOnInvestmentSecurities(self: CashFlowStatement) = value

"""

    UnrealizedGainsLossesOnDerivatives = property(lambda self: object(), lambda self, v: None,
                                                  lambda self: None)  # default
    """The gross gains and losses on derivatives. This item is usually only available for insurance industry.



Get: UnrealizedGainsLossesOnDerivatives(self: CashFlowStatement) -> UnrealizedGainsLossesOnDerivativesCashFlowStatement



Set: UnrealizedGainsLossesOnDerivatives(self: CashFlowStatement) = value

"""


class CashFromDiscontinuedFinancingActivitiesCashFlowStatement(MultiPeriodField):
    """
    Cash generated by or used in financing activities of discontinued operations; excludes cash flows from continued operations.



    CashFromDiscontinuedFinancingActivitiesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CashFromDiscontinuedFinancingActivitiesCashFlowStatement) -> Decimal



Set: NineMonths(self: CashFromDiscontinuedFinancingActivitiesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashFromDiscontinuedFinancingActivitiesCashFlowStatement) -> Decimal



Set: SixMonths(self: CashFromDiscontinuedFinancingActivitiesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashFromDiscontinuedFinancingActivitiesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: CashFromDiscontinuedFinancingActivitiesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashFromDiscontinuedFinancingActivitiesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CashFromDiscontinuedFinancingActivitiesCashFlowStatement) = value

"""

    Store = None


class CashFromDiscontinuedFinancingCashFlowStatement(MultiPeriodField):
    """
    Cash generated by or used in financing activities of discontinued operations; excludes cash flows from continued operations.



    CashFromDiscontinuedFinancingCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CashFromDiscontinuedFinancingCashFlowStatement) -> Decimal



Set: NineMonths(self: CashFromDiscontinuedFinancingCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashFromDiscontinuedFinancingCashFlowStatement) -> Decimal



Set: SixMonths(self: CashFromDiscontinuedFinancingCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashFromDiscontinuedFinancingCashFlowStatement) -> Decimal



Set: ThreeMonths(self: CashFromDiscontinuedFinancingCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashFromDiscontinuedFinancingCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CashFromDiscontinuedFinancingCashFlowStatement) = value

"""

    Store = None


class CashFromDiscontinuedInvestingActivitiesCashFlowStatement(MultiPeriodField):
    """
    The net cash inflow (outflow) from discontinued investing activities over the designated time PeriodAsByte.



    CashFromDiscontinuedInvestingActivitiesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CashFromDiscontinuedInvestingActivitiesCashFlowStatement) -> Decimal



Set: NineMonths(self: CashFromDiscontinuedInvestingActivitiesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashFromDiscontinuedInvestingActivitiesCashFlowStatement) -> Decimal



Set: SixMonths(self: CashFromDiscontinuedInvestingActivitiesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashFromDiscontinuedInvestingActivitiesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: CashFromDiscontinuedInvestingActivitiesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashFromDiscontinuedInvestingActivitiesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CashFromDiscontinuedInvestingActivitiesCashFlowStatement) = value

"""

    Store = None


class CashFromDiscontinuedInvestingCashFlowStatement(MultiPeriodField):
    """
    The net cash inflow (outflow) from discontinued investing activities over the designated time PeriodAsByte.



    CashFromDiscontinuedInvestingCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CashFromDiscontinuedInvestingCashFlowStatement) -> Decimal



Set: NineMonths(self: CashFromDiscontinuedInvestingCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashFromDiscontinuedInvestingCashFlowStatement) -> Decimal



Set: SixMonths(self: CashFromDiscontinuedInvestingCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashFromDiscontinuedInvestingCashFlowStatement) -> Decimal



Set: ThreeMonths(self: CashFromDiscontinuedInvestingCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashFromDiscontinuedInvestingCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CashFromDiscontinuedInvestingCashFlowStatement) = value

"""

    Store = None


class CashFromDiscontinuedOperatingActivitiesCashFlowStatement(MultiPeriodField):
    """
    The net cash from (used in) all of the entity's discontinued operating activities, excluding those of continued operations, of the

                reporting entity.



    CashFromDiscontinuedOperatingActivitiesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CashFromDiscontinuedOperatingActivitiesCashFlowStatement) -> Decimal



Set: NineMonths(self: CashFromDiscontinuedOperatingActivitiesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashFromDiscontinuedOperatingActivitiesCashFlowStatement) -> Decimal



Set: SixMonths(self: CashFromDiscontinuedOperatingActivitiesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashFromDiscontinuedOperatingActivitiesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: CashFromDiscontinuedOperatingActivitiesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashFromDiscontinuedOperatingActivitiesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CashFromDiscontinuedOperatingActivitiesCashFlowStatement) = value

"""

    Store = None


class CashFromDiscontinuedOperatingCashFlowStatement(MultiPeriodField):
    """
    The net cash from (used in) all of the entity's discontinued operating activities, excluding those of continued operations, of the

                reporting entity.



    CashFromDiscontinuedOperatingCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CashFromDiscontinuedOperatingCashFlowStatement) -> Decimal



Set: NineMonths(self: CashFromDiscontinuedOperatingCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashFromDiscontinuedOperatingCashFlowStatement) -> Decimal



Set: SixMonths(self: CashFromDiscontinuedOperatingCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashFromDiscontinuedOperatingCashFlowStatement) -> Decimal



Set: ThreeMonths(self: CashFromDiscontinuedOperatingCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashFromDiscontinuedOperatingCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CashFromDiscontinuedOperatingCashFlowStatement) = value

"""

    Store = None


class CashGeneratedfromOperatingActivitiesCashFlowStatement(MultiPeriodField):
    """
    The net cash from an entity's operating activities before real cash inflow or outflow for Dividend, Interest, Tax, or other unclassified

                operating activities.



    CashGeneratedfromOperatingActivitiesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CashGeneratedfromOperatingActivitiesCashFlowStatement) -> Decimal



Set: NineMonths(self: CashGeneratedfromOperatingActivitiesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashGeneratedfromOperatingActivitiesCashFlowStatement) -> Decimal



Set: SixMonths(self: CashGeneratedfromOperatingActivitiesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashGeneratedfromOperatingActivitiesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: CashGeneratedfromOperatingActivitiesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashGeneratedfromOperatingActivitiesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CashGeneratedfromOperatingActivitiesCashFlowStatement) = value

"""

    Store = None


class CashPaidforInsuranceActivitiesCashFlowStatement(MultiPeriodField):
    """
    Cash paid out for insurance activities during the period in operating cash flow, using the direct method. This item is usually only

                available for insurance industry



    CashPaidforInsuranceActivitiesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CashPaidforInsuranceActivitiesCashFlowStatement) -> Decimal



Set: NineMonths(self: CashPaidforInsuranceActivitiesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashPaidforInsuranceActivitiesCashFlowStatement) -> Decimal



Set: SixMonths(self: CashPaidforInsuranceActivitiesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashPaidforInsuranceActivitiesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: CashPaidforInsuranceActivitiesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashPaidforInsuranceActivitiesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CashPaidforInsuranceActivitiesCashFlowStatement) = value

"""

    Store = None


class CashPaidtoReinsurersCashFlowStatement(MultiPeriodField):
    """
    Cash paid out to reinsurers in operating cash flow, using the direct method. This item is usually only available for insurance industry



    CashPaidtoReinsurersCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CashPaidtoReinsurersCashFlowStatement) -> Decimal



Set: NineMonths(self: CashPaidtoReinsurersCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashPaidtoReinsurersCashFlowStatement) -> Decimal



Set: SixMonths(self: CashPaidtoReinsurersCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashPaidtoReinsurersCashFlowStatement) -> Decimal



Set: ThreeMonths(self: CashPaidtoReinsurersCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashPaidtoReinsurersCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CashPaidtoReinsurersCashFlowStatement) = value

"""

    Store = None


class CashPaymentsforDepositsbyBanksandCustomersCashFlowStatement(MultiPeriodField):
    """
    Cash paid for deposits by banks and customers in operating cash flow, using the direct method. This item is usually only available

                for bank industry



    CashPaymentsforDepositsbyBanksandCustomersCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CashPaymentsforDepositsbyBanksandCustomersCashFlowStatement) -> Decimal



Set: NineMonths(self: CashPaymentsforDepositsbyBanksandCustomersCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CashPaymentsforDepositsbyBanksandCustomersCashFlowStatement) -> Decimal



Set: OneMonth(self: CashPaymentsforDepositsbyBanksandCustomersCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashPaymentsforDepositsbyBanksandCustomersCashFlowStatement) -> Decimal



Set: SixMonths(self: CashPaymentsforDepositsbyBanksandCustomersCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashPaymentsforDepositsbyBanksandCustomersCashFlowStatement) -> Decimal



Set: ThreeMonths(self: CashPaymentsforDepositsbyBanksandCustomersCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashPaymentsforDepositsbyBanksandCustomersCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CashPaymentsforDepositsbyBanksandCustomersCashFlowStatement) = value

"""

    Store = None


class CashPaymentsforLoansCashFlowStatement(MultiPeriodField):
    """
    Cash paid for loans in operating cash flow, using the direct method. This item is usually only available for bank industry



    CashPaymentsforLoansCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CashPaymentsforLoansCashFlowStatement) -> Decimal



Set: NineMonths(self: CashPaymentsforLoansCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashPaymentsforLoansCashFlowStatement) -> Decimal



Set: SixMonths(self: CashPaymentsforLoansCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashPaymentsforLoansCashFlowStatement) -> Decimal



Set: ThreeMonths(self: CashPaymentsforLoansCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashPaymentsforLoansCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CashPaymentsforLoansCashFlowStatement) = value

"""

    Store = None


class CashRatio(MultiPeriodField):
    """
    Indicates a company's short-term liquidity, defined as short term liquid investments (cash, cash equivalents, short term

                investments) divided by current liabilities.



    CashRatio(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: CashRatio) -> Decimal



Set: OneYear(self: CashRatio) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashRatio) -> Decimal



Set: ThreeMonths(self: CashRatio) = value

"""

    Store = None


class CashRatioGrowth(MultiPeriodField):
    """
    The growth in the company's cash ratio on a percentage basis. Morningstar calculates the growth percentage based on the short

                term liquid investments (cash, cash equivalents, short term investments) divided by current liabilities reported in the Balance Sheet

                within the company filings or reports.



    CashRatioGrowth(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: CashRatioGrowth) -> Decimal



Set: FiveYears(self: CashRatioGrowth) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: CashRatioGrowth) -> Decimal



Set: OneYear(self: CashRatioGrowth) = value

"""

    ThreeYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeYears period value for the field



Get: ThreeYears(self: CashRatioGrowth) -> Decimal



Set: ThreeYears(self: CashRatioGrowth) = value

"""

    Store = None


class CashReceiptsfromDepositsbyBanksandCustomersCashFlowStatement(MultiPeriodField):
    """
    Cash received from banks and customer deposits in operating cash flow, using the direct method. This item is usually only available

                for bank industry



    CashReceiptsfromDepositsbyBanksandCustomersCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CashReceiptsfromDepositsbyBanksandCustomersCashFlowStatement) -> Decimal



Set: NineMonths(self: CashReceiptsfromDepositsbyBanksandCustomersCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CashReceiptsfromDepositsbyBanksandCustomersCashFlowStatement) -> Decimal



Set: OneMonth(self: CashReceiptsfromDepositsbyBanksandCustomersCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashReceiptsfromDepositsbyBanksandCustomersCashFlowStatement) -> Decimal



Set: SixMonths(self: CashReceiptsfromDepositsbyBanksandCustomersCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashReceiptsfromDepositsbyBanksandCustomersCashFlowStatement) -> Decimal



Set: ThreeMonths(self: CashReceiptsfromDepositsbyBanksandCustomersCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashReceiptsfromDepositsbyBanksandCustomersCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CashReceiptsfromDepositsbyBanksandCustomersCashFlowStatement) = value

"""

    Store = None


class CashReceiptsfromFeesandCommissionsCashFlowStatement(MultiPeriodField):
    """
    Cash received from agency fees and commissions in operating cash flow, using the direct method. This item is usually available for

                bank and insurance industries



    CashReceiptsfromFeesandCommissionsCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CashReceiptsfromFeesandCommissionsCashFlowStatement) -> Decimal



Set: NineMonths(self: CashReceiptsfromFeesandCommissionsCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashReceiptsfromFeesandCommissionsCashFlowStatement) -> Decimal



Set: SixMonths(self: CashReceiptsfromFeesandCommissionsCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashReceiptsfromFeesandCommissionsCashFlowStatement) -> Decimal



Set: ThreeMonths(self: CashReceiptsfromFeesandCommissionsCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashReceiptsfromFeesandCommissionsCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CashReceiptsfromFeesandCommissionsCashFlowStatement) = value

"""

    Store = None


class CashReceiptsfromLoansCashFlowStatement(MultiPeriodField):
    """
    Cash received from loans in operating cash flow, using the direct method. This item is usually only available for bank industry



    CashReceiptsfromLoansCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CashReceiptsfromLoansCashFlowStatement) -> Decimal



Set: NineMonths(self: CashReceiptsfromLoansCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CashReceiptsfromLoansCashFlowStatement) -> Decimal



Set: OneMonth(self: CashReceiptsfromLoansCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashReceiptsfromLoansCashFlowStatement) -> Decimal



Set: SixMonths(self: CashReceiptsfromLoansCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashReceiptsfromLoansCashFlowStatement) -> Decimal



Set: ThreeMonths(self: CashReceiptsfromLoansCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashReceiptsfromLoansCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CashReceiptsfromLoansCashFlowStatement) = value

"""

    Store = None


class CashReceiptsfromRepaymentofAdvancesandLoansMadetoOtherPartiesCashFlowStatement(MultiPeriodField):
    """
    Cash received from the repayment of advances and loans made to other parties, in the Investing Cash Flow section.



    CashReceiptsfromRepaymentofAdvancesandLoansMadetoOtherPartiesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashReceiptsfromRepaymentofAdvancesandLoansMadetoOtherPartiesCashFlowStatement) -> Decimal



Set: SixMonths(self: CashReceiptsfromRepaymentofAdvancesandLoansMadetoOtherPartiesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashReceiptsfromRepaymentofAdvancesandLoansMadetoOtherPartiesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CashReceiptsfromRepaymentofAdvancesandLoansMadetoOtherPartiesCashFlowStatement) = value

"""

    Store = None


class CashReceiptsfromSecuritiesRelatedActivitiesCashFlowStatement(MultiPeriodField):
    """
    Cash received from the trading of securities in operating cash flow, using the direct method. This item is usually only available for

                bank and insurance industries



    CashReceiptsfromSecuritiesRelatedActivitiesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CashReceiptsfromSecuritiesRelatedActivitiesCashFlowStatement) -> Decimal



Set: NineMonths(self: CashReceiptsfromSecuritiesRelatedActivitiesCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CashReceiptsfromSecuritiesRelatedActivitiesCashFlowStatement) -> Decimal



Set: OneMonth(self: CashReceiptsfromSecuritiesRelatedActivitiesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashReceiptsfromSecuritiesRelatedActivitiesCashFlowStatement) -> Decimal



Set: SixMonths(self: CashReceiptsfromSecuritiesRelatedActivitiesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashReceiptsfromSecuritiesRelatedActivitiesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: CashReceiptsfromSecuritiesRelatedActivitiesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashReceiptsfromSecuritiesRelatedActivitiesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CashReceiptsfromSecuritiesRelatedActivitiesCashFlowStatement) = value

"""

    Store = None


class CashReceiptsfromTaxRefundsCashFlowStatement(MultiPeriodField):
    """
    Cash received as refunds from tax authorities in operating cash flow, using the direct method



    CashReceiptsfromTaxRefundsCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CashReceiptsfromTaxRefundsCashFlowStatement) -> Decimal



Set: NineMonths(self: CashReceiptsfromTaxRefundsCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashReceiptsfromTaxRefundsCashFlowStatement) -> Decimal



Set: SixMonths(self: CashReceiptsfromTaxRefundsCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashReceiptsfromTaxRefundsCashFlowStatement) -> Decimal



Set: ThreeMonths(self: CashReceiptsfromTaxRefundsCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashReceiptsfromTaxRefundsCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CashReceiptsfromTaxRefundsCashFlowStatement) = value

"""

    Store = None


class CashReceivedfromInsuranceActivitiesCashFlowStatement(MultiPeriodField):
    """
    Cash received from insurance activities in operating cash flow, using the direct method. This item is usually only available for

                insurance industry



    CashReceivedfromInsuranceActivitiesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CashReceivedfromInsuranceActivitiesCashFlowStatement) -> Decimal



Set: NineMonths(self: CashReceivedfromInsuranceActivitiesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CashReceivedfromInsuranceActivitiesCashFlowStatement) -> Decimal



Set: SixMonths(self: CashReceivedfromInsuranceActivitiesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashReceivedfromInsuranceActivitiesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: CashReceivedfromInsuranceActivitiesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashReceivedfromInsuranceActivitiesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CashReceivedfromInsuranceActivitiesCashFlowStatement) = value

"""

    Store = None


class CashRestrictedOrPledgedBalanceSheet(MultiPeriodField):
    """
    Cash that the company can use only for specific purposes or cash deposit or placing of owned property by a debtor (the pledger) to

                a creditor (the pledgee) as a security for a loan or obligation.



    CashRestrictedOrPledgedBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashRestrictedOrPledgedBalanceSheet) -> Decimal



Set: ThreeMonths(self: CashRestrictedOrPledgedBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CashRestrictedOrPledgedBalanceSheet) -> Decimal



Set: TwelveMonths(self: CashRestrictedOrPledgedBalanceSheet) = value

"""

    Store = None


class CashtoTotalAssets(MultiPeriodField):
    """
    Represents the percentage of a company's total assets is in cash.



    CashtoTotalAssets(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: CashtoTotalAssets) -> Decimal



Set: OneYear(self: CashtoTotalAssets) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CashtoTotalAssets) -> Decimal



Set: ThreeMonths(self: CashtoTotalAssets) = value

"""

    Store = None


class CededPremiumsIncomeStatement(MultiPeriodField):
    """
    The amount of premiums paid and payable to another insurer as a result of reinsurance arrangements in order to exchange for that

                company accepting all or part of insurance on a risk or exposure. This item is usually only available for insurance industry.



    CededPremiumsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CededPremiumsIncomeStatement) -> Decimal



Set: NineMonths(self: CededPremiumsIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CededPremiumsIncomeStatement) -> Decimal



Set: SixMonths(self: CededPremiumsIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CededPremiumsIncomeStatement) -> Decimal



Set: ThreeMonths(self: CededPremiumsIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CededPremiumsIncomeStatement) -> Decimal



Set: TwelveMonths(self: CededPremiumsIncomeStatement) = value

"""

    Store = None


class CFOGrowth(MultiPeriodField):
    """
    The growth in the company's cash flow from operations on a percentage basis. Morningstar calculates the growth percentage

                based on the underlying cash flow from operations data reported in the Cash Flow Statement within the company filings or reports.



    CFOGrowth(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: CFOGrowth) -> Decimal



Set: FiveYears(self: CFOGrowth) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: CFOGrowth) -> Decimal



Set: OneYear(self: CFOGrowth) = value

"""

    ThreeYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeYears period value for the field



Get: ThreeYears(self: CFOGrowth) -> Decimal



Set: ThreeYears(self: CFOGrowth) = value

"""

    Store = None


class ChangeInAccountPayableCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods of the account payables.



    ChangeInAccountPayableCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeInAccountPayableCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeInAccountPayableCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: ChangeInAccountPayableCashFlowStatement) -> Decimal



Set: OneMonth(self: ChangeInAccountPayableCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeInAccountPayableCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeInAccountPayableCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeInAccountPayableCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeInAccountPayableCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeInAccountPayableCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeInAccountPayableCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: ChangeInAccountPayableCashFlowStatement) -> Decimal



Set: TwoMonths(self: ChangeInAccountPayableCashFlowStatement) = value

"""

    Store = None


class ChangeInAccruedExpenseCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods of the accrued expenses.



    ChangeInAccruedExpenseCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeInAccruedExpenseCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeInAccruedExpenseCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: ChangeInAccruedExpenseCashFlowStatement) -> Decimal



Set: OneMonth(self: ChangeInAccruedExpenseCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeInAccruedExpenseCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeInAccruedExpenseCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeInAccruedExpenseCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeInAccruedExpenseCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeInAccruedExpenseCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeInAccruedExpenseCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: ChangeInAccruedExpenseCashFlowStatement) -> Decimal



Set: TwoMonths(self: ChangeInAccruedExpenseCashFlowStatement) = value

"""

    Store = None


class ChangeinAccruedIncomeCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods in the amount of outstanding money owed by a customer for goods or services provided

                by the company.



    ChangeinAccruedIncomeCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeinAccruedIncomeCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeinAccruedIncomeCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeinAccruedIncomeCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeinAccruedIncomeCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeinAccruedIncomeCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeinAccruedIncomeCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeinAccruedIncomeCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeinAccruedIncomeCashFlowStatement) = value

"""

    Store = None


class ChangeInAccruedInvestmentIncomeCashFlowStatement(MultiPeriodField):
    """
    The net change during the reporting period in investment income that has been earned but not yet received in cash.



    ChangeInAccruedInvestmentIncomeCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeInAccruedInvestmentIncomeCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeInAccruedInvestmentIncomeCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeInAccruedInvestmentIncomeCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeInAccruedInvestmentIncomeCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeInAccruedInvestmentIncomeCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeInAccruedInvestmentIncomeCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeInAccruedInvestmentIncomeCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeInAccruedInvestmentIncomeCashFlowStatement) = value

"""

    Store = None


class ChangeinAdvancesfromCentralBanksCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods of the advances from central banks.



    ChangeinAdvancesfromCentralBanksCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeinAdvancesfromCentralBanksCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeinAdvancesfromCentralBanksCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeinAdvancesfromCentralBanksCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeinAdvancesfromCentralBanksCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeinAdvancesfromCentralBanksCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeinAdvancesfromCentralBanksCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeinAdvancesfromCentralBanksCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeinAdvancesfromCentralBanksCashFlowStatement) = value

"""

    Store = None


class ChangeinCashSupplementalAsReportedCashFlowStatement(MultiPeriodField):
    """
    The change in cash flow from the previous period to the current, as reported by the company, may be the same or not the same as

                Morningstar's standardized definition. It is a supplemental value which would be reported outside consolidated statements.



    ChangeinCashSupplementalAsReportedCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeinCashSupplementalAsReportedCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeinCashSupplementalAsReportedCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeinCashSupplementalAsReportedCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeinCashSupplementalAsReportedCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeinCashSupplementalAsReportedCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeinCashSupplementalAsReportedCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeinCashSupplementalAsReportedCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeinCashSupplementalAsReportedCashFlowStatement) = value

"""

    Store = None


class ChangeInDeferredAcquisitionCostsCashFlowStatement(MultiPeriodField):
    """
    The change of the unamortized portion as of the balance sheet date of capitalized costs that vary with and are primarily related to

                the acquisition of new and renewal insurance contracts.



    ChangeInDeferredAcquisitionCostsCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeInDeferredAcquisitionCostsCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeInDeferredAcquisitionCostsCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeInDeferredAcquisitionCostsCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeInDeferredAcquisitionCostsCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeInDeferredAcquisitionCostsCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeInDeferredAcquisitionCostsCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeInDeferredAcquisitionCostsCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeInDeferredAcquisitionCostsCashFlowStatement) = value

"""

    Store = None


class ChangeinDeferredAcquisitionCostsNetCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods of the deferred acquisition costs.



    ChangeinDeferredAcquisitionCostsNetCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeinDeferredAcquisitionCostsNetCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeinDeferredAcquisitionCostsNetCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeinDeferredAcquisitionCostsNetCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeinDeferredAcquisitionCostsNetCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeinDeferredAcquisitionCostsNetCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeinDeferredAcquisitionCostsNetCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeinDeferredAcquisitionCostsNetCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeinDeferredAcquisitionCostsNetCashFlowStatement) = value

"""

    Store = None


class ChangeInDeferredChargesCashFlowStatement(MultiPeriodField):
    """
    The net change during the reporting period in the value of expenditures made during the current reporting period for benefits that

                will be received over a period of years. This item is usually only available for bank industry.



    ChangeInDeferredChargesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeInDeferredChargesCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeInDeferredChargesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeInDeferredChargesCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeInDeferredChargesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeInDeferredChargesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeInDeferredChargesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeInDeferredChargesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeInDeferredChargesCashFlowStatement) = value

"""

    Store = None


class ChangeinDepositsbyBanksandCustomersCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods of the deposits by banks and customers.



    ChangeinDepositsbyBanksandCustomersCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeinDepositsbyBanksandCustomersCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeinDepositsbyBanksandCustomersCashFlowStatement) = value

"""

    Store = None


class ChangeInDividendPayableCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods of the dividend payables.



    ChangeInDividendPayableCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeInDividendPayableCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeInDividendPayableCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeInDividendPayableCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeInDividendPayableCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeInDividendPayableCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeInDividendPayableCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeInDividendPayableCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeInDividendPayableCashFlowStatement) = value

"""

    Store = None


class ChangeInFederalFundsAndSecuritiesSoldForRepurchaseCashFlowStatement(MultiPeriodField):
    """
    The amount shown on the books that a bank with insufficient reserves borrows, at the federal funds rate, from another bank to

                meet its reserve requirements and the amount of securities that an institution sells and agrees to repurchase at a specified date for

                a specified price, net of any reductions or offsets.



    ChangeInFederalFundsAndSecuritiesSoldForRepurchaseCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeInFederalFundsAndSecuritiesSoldForRepurchaseCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeInFederalFundsAndSecuritiesSoldForRepurchaseCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeInFederalFundsAndSecuritiesSoldForRepurchaseCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeInFederalFundsAndSecuritiesSoldForRepurchaseCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeInFederalFundsAndSecuritiesSoldForRepurchaseCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeInFederalFundsAndSecuritiesSoldForRepurchaseCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeInFederalFundsAndSecuritiesSoldForRepurchaseCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeInFederalFundsAndSecuritiesSoldForRepurchaseCashFlowStatement) = value

"""

    Store = None


class ChangeinFinancialAssetsCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods of the financial assets.



    ChangeinFinancialAssetsCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeinFinancialAssetsCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeinFinancialAssetsCashFlowStatement) = value

"""

    Store = None


class ChangeinFinancialLiabilitiesCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods of the financial liabilities.



    ChangeinFinancialLiabilitiesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeinFinancialLiabilitiesCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeinFinancialLiabilitiesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeinFinancialLiabilitiesCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeinFinancialLiabilitiesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeinFinancialLiabilitiesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeinFinancialLiabilitiesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeinFinancialLiabilitiesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeinFinancialLiabilitiesCashFlowStatement) = value

"""

    Store = None


class ChangeInFundsWithheldCashFlowStatement(MultiPeriodField):
    """
    The net change during the reporting period associated with funds withheld.



    ChangeInFundsWithheldCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeInFundsWithheldCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeInFundsWithheldCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeInFundsWithheldCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeInFundsWithheldCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeInFundsWithheldCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeInFundsWithheldCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeInFundsWithheldCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeInFundsWithheldCashFlowStatement) = value

"""

    Store = None


class ChangeInIncomeTaxPayableCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods of the income tax payables.



    ChangeInIncomeTaxPayableCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeInIncomeTaxPayableCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeInIncomeTaxPayableCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: ChangeInIncomeTaxPayableCashFlowStatement) -> Decimal



Set: OneMonth(self: ChangeInIncomeTaxPayableCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeInIncomeTaxPayableCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeInIncomeTaxPayableCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeInIncomeTaxPayableCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeInIncomeTaxPayableCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeInIncomeTaxPayableCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeInIncomeTaxPayableCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: ChangeInIncomeTaxPayableCashFlowStatement) -> Decimal



Set: TwoMonths(self: ChangeInIncomeTaxPayableCashFlowStatement) = value

"""

    Store = None


class ChangeinInsuranceContractAssetsCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods of the contract assets.



    ChangeinInsuranceContractAssetsCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeinInsuranceContractAssetsCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeinInsuranceContractAssetsCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeinInsuranceContractAssetsCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeinInsuranceContractAssetsCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeinInsuranceContractAssetsCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeinInsuranceContractAssetsCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeinInsuranceContractAssetsCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeinInsuranceContractAssetsCashFlowStatement) = value

"""

    Store = None


class ChangeinInsuranceContractLiabilitiesCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods of the insurance contract liabilities.



    ChangeinInsuranceContractLiabilitiesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeinInsuranceContractLiabilitiesCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeinInsuranceContractLiabilitiesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeinInsuranceContractLiabilitiesCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeinInsuranceContractLiabilitiesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeinInsuranceContractLiabilitiesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeinInsuranceContractLiabilitiesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeinInsuranceContractLiabilitiesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeinInsuranceContractLiabilitiesCashFlowStatement) = value

"""

    Store = None


class ChangeinInsuranceFundsCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods of the insurance funds.



    ChangeinInsuranceFundsCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeinInsuranceFundsCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeinInsuranceFundsCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeinInsuranceFundsCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeinInsuranceFundsCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeinInsuranceFundsCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeinInsuranceFundsCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeinInsuranceFundsCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeinInsuranceFundsCashFlowStatement) = value

"""

    Store = None


class ChangeinInsuranceLiabilitiesNetofReinsuranceIncomeStatement(MultiPeriodField):
    """
    Income/Expense due to changes between periods in insurance liabilities.



    ChangeinInsuranceLiabilitiesNetofReinsuranceIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeinInsuranceLiabilitiesNetofReinsuranceIncomeStatement) -> Decimal



Set: NineMonths(self: ChangeinInsuranceLiabilitiesNetofReinsuranceIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeinInsuranceLiabilitiesNetofReinsuranceIncomeStatement) -> Decimal



Set: SixMonths(self: ChangeinInsuranceLiabilitiesNetofReinsuranceIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeinInsuranceLiabilitiesNetofReinsuranceIncomeStatement) -> Decimal



Set: ThreeMonths(self: ChangeinInsuranceLiabilitiesNetofReinsuranceIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeinInsuranceLiabilitiesNetofReinsuranceIncomeStatement) -> Decimal



Set: TwelveMonths(self: ChangeinInsuranceLiabilitiesNetofReinsuranceIncomeStatement) = value

"""

    Store = None


class ChangeInInterestPayableCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods of the interest payable. Interest payable means carrying value as of the balance sheet

                date of interest payable on all forms of debt.



    ChangeInInterestPayableCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeInInterestPayableCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeInInterestPayableCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: ChangeInInterestPayableCashFlowStatement) -> Decimal



Set: OneMonth(self: ChangeInInterestPayableCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeInInterestPayableCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeInInterestPayableCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeInInterestPayableCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeInInterestPayableCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeInInterestPayableCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeInInterestPayableCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: ChangeInInterestPayableCashFlowStatement) -> Decimal



Set: TwoMonths(self: ChangeInInterestPayableCashFlowStatement) = value

"""

    Store = None


class ChangeInInventoryCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods of the Inventories. Inventories represent merchandise bought for resale and supplies and

                raw materials purchased for use in revenue producing operations.



    ChangeInInventoryCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeInInventoryCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeInInventoryCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: ChangeInInventoryCashFlowStatement) -> Decimal



Set: OneMonth(self: ChangeInInventoryCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeInInventoryCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeInInventoryCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeInInventoryCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeInInventoryCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeInInventoryCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeInInventoryCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: ChangeInInventoryCashFlowStatement) -> Decimal



Set: TwoMonths(self: ChangeInInventoryCashFlowStatement) = value

"""

    Store = None


class ChangeinInvestmentContractIncomeStatement(MultiPeriodField):
    """
    Income/Expense due to changes between periods in Investment Contracts.



    ChangeinInvestmentContractIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeinInvestmentContractIncomeStatement) -> Decimal



Set: NineMonths(self: ChangeinInvestmentContractIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeinInvestmentContractIncomeStatement) -> Decimal



Set: SixMonths(self: ChangeinInvestmentContractIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeinInvestmentContractIncomeStatement) -> Decimal



Set: ThreeMonths(self: ChangeinInvestmentContractIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeinInvestmentContractIncomeStatement) -> Decimal



Set: TwelveMonths(self: ChangeinInvestmentContractIncomeStatement) = value

"""

    Store = None


class ChangeinInvestmentContractLiabilitiesCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods of the investment contract liabilities.



    ChangeinInvestmentContractLiabilitiesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeinInvestmentContractLiabilitiesCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeinInvestmentContractLiabilitiesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeinInvestmentContractLiabilitiesCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeinInvestmentContractLiabilitiesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeinInvestmentContractLiabilitiesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeinInvestmentContractLiabilitiesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeinInvestmentContractLiabilitiesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeinInvestmentContractLiabilitiesCashFlowStatement) = value

"""

    Store = None


class ChangeInLoansCashFlowStatement(MultiPeriodField):
    """
    The net change that a lender gives money or property to a borrower and the borrower agrees to return the property or repay the

                borrowed money, along with interest, at a predetermined date in the future.



    ChangeInLoansCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeInLoansCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeInLoansCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeInLoansCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeInLoansCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeInLoansCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeInLoansCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeInLoansCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeInLoansCashFlowStatement) = value

"""

    Store = None


class ChangeInLossAndLossAdjustmentExpenseReservesCashFlowStatement(MultiPeriodField):
    """
    The net change during the reporting period in the reserve account established to account for expected but unspecified losses.



    ChangeInLossAndLossAdjustmentExpenseReservesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeInLossAndLossAdjustmentExpenseReservesCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeInLossAndLossAdjustmentExpenseReservesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeInLossAndLossAdjustmentExpenseReservesCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeInLossAndLossAdjustmentExpenseReservesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeInLossAndLossAdjustmentExpenseReservesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeInLossAndLossAdjustmentExpenseReservesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeInLossAndLossAdjustmentExpenseReservesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeInLossAndLossAdjustmentExpenseReservesCashFlowStatement) = value

"""

    Store = None


class ChangeInOtherCurrentAssetsCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods of the Other Current Assets. This category typically includes prepayments, deferred

                charges, and amounts (other than trade accounts) due from parents and subsidiaries.



    ChangeInOtherCurrentAssetsCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeInOtherCurrentAssetsCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeInOtherCurrentAssetsCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: ChangeInOtherCurrentAssetsCashFlowStatement) -> Decimal



Set: OneMonth(self: ChangeInOtherCurrentAssetsCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeInOtherCurrentAssetsCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeInOtherCurrentAssetsCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeInOtherCurrentAssetsCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeInOtherCurrentAssetsCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeInOtherCurrentAssetsCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeInOtherCurrentAssetsCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: ChangeInOtherCurrentAssetsCashFlowStatement) -> Decimal



Set: TwoMonths(self: ChangeInOtherCurrentAssetsCashFlowStatement) = value

"""

    Store = None


class ChangeInOtherCurrentLiabilitiesCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods of the Other Current liabilities. Other Current liabilities is a balance sheet entry used by

                companies to group together current liabilities that are not assigned to common liabilities such as debt obligations or accounts

                payable.



    ChangeInOtherCurrentLiabilitiesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeInOtherCurrentLiabilitiesCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeInOtherCurrentLiabilitiesCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: ChangeInOtherCurrentLiabilitiesCashFlowStatement) -> Decimal



Set: OneMonth(self: ChangeInOtherCurrentLiabilitiesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeInOtherCurrentLiabilitiesCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeInOtherCurrentLiabilitiesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeInOtherCurrentLiabilitiesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeInOtherCurrentLiabilitiesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeInOtherCurrentLiabilitiesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeInOtherCurrentLiabilitiesCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: ChangeInOtherCurrentLiabilitiesCashFlowStatement) -> Decimal



Set: TwoMonths(self: ChangeInOtherCurrentLiabilitiesCashFlowStatement) = value

"""

    Store = None


class ChangeInOtherWorkingCapitalCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods of the other working capital.



    ChangeInOtherWorkingCapitalCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeInOtherWorkingCapitalCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeInOtherWorkingCapitalCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: ChangeInOtherWorkingCapitalCashFlowStatement) -> Decimal



Set: OneMonth(self: ChangeInOtherWorkingCapitalCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeInOtherWorkingCapitalCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeInOtherWorkingCapitalCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeInOtherWorkingCapitalCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeInOtherWorkingCapitalCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeInOtherWorkingCapitalCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeInOtherWorkingCapitalCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: ChangeInOtherWorkingCapitalCashFlowStatement) -> Decimal



Set: TwoMonths(self: ChangeInOtherWorkingCapitalCashFlowStatement) = value

"""

    Store = None


class ChangeInPayableCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods of the payables.



    ChangeInPayableCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeInPayableCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeInPayableCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: ChangeInPayableCashFlowStatement) -> Decimal



Set: OneMonth(self: ChangeInPayableCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeInPayableCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeInPayableCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeInPayableCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeInPayableCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeInPayableCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeInPayableCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: ChangeInPayableCashFlowStatement) -> Decimal



Set: TwoMonths(self: ChangeInPayableCashFlowStatement) = value

"""

    Store = None


class ChangeInPayablesAndAccruedExpenseCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods of the payables and accrued expenses. Accrued expenses represent expenses incurred

                at the end of the reporting period but not yet paid; also called accrued liabilities. The accrued liability is shown under current

                liabilities in the balance sheet.



    ChangeInPayablesAndAccruedExpenseCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeInPayablesAndAccruedExpenseCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeInPayablesAndAccruedExpenseCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: ChangeInPayablesAndAccruedExpenseCashFlowStatement) -> Decimal



Set: OneMonth(self: ChangeInPayablesAndAccruedExpenseCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeInPayablesAndAccruedExpenseCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeInPayablesAndAccruedExpenseCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeInPayablesAndAccruedExpenseCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeInPayablesAndAccruedExpenseCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeInPayablesAndAccruedExpenseCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeInPayablesAndAccruedExpenseCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: ChangeInPayablesAndAccruedExpenseCashFlowStatement) -> Decimal



Set: TwoMonths(self: ChangeInPayablesAndAccruedExpenseCashFlowStatement) = value

"""

    Store = None


class ChangeInPrepaidAssetsCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods of the prepaid assets.



    ChangeInPrepaidAssetsCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeInPrepaidAssetsCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeInPrepaidAssetsCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: ChangeInPrepaidAssetsCashFlowStatement) -> Decimal



Set: OneMonth(self: ChangeInPrepaidAssetsCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeInPrepaidAssetsCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeInPrepaidAssetsCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeInPrepaidAssetsCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeInPrepaidAssetsCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeInPrepaidAssetsCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeInPrepaidAssetsCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: ChangeInPrepaidAssetsCashFlowStatement) -> Decimal



Set: TwoMonths(self: ChangeInPrepaidAssetsCashFlowStatement) = value

"""

    Store = None


class ChangeInReceivablesCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods of the receivables. Receivables are amounts due to be paid to the company from clients

                and other.



    ChangeInReceivablesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeInReceivablesCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeInReceivablesCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: ChangeInReceivablesCashFlowStatement) -> Decimal



Set: OneMonth(self: ChangeInReceivablesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeInReceivablesCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeInReceivablesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeInReceivablesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeInReceivablesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeInReceivablesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeInReceivablesCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: ChangeInReceivablesCashFlowStatement) -> Decimal



Set: TwoMonths(self: ChangeInReceivablesCashFlowStatement) = value

"""

    Store = None


class ChangeinReinsuranceReceivablesCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods of the reinsurance receivable.



    ChangeinReinsuranceReceivablesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeinReinsuranceReceivablesCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeinReinsuranceReceivablesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeinReinsuranceReceivablesCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeinReinsuranceReceivablesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeinReinsuranceReceivablesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeinReinsuranceReceivablesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeinReinsuranceReceivablesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeinReinsuranceReceivablesCashFlowStatement) = value

"""

    Store = None


class ChangeInReinsuranceRecoverableOnPaidAndUnpaidLossesCashFlowStatement(MultiPeriodField):
    """
    The net change during the reporting period in the amount of benefits the ceding insurer expects to recover on insurance policies

                ceded to other insurance entities as of the balance sheet date for all guaranteed benefit types.



    ChangeInReinsuranceRecoverableOnPaidAndUnpaidLossesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeInReinsuranceRecoverableOnPaidAndUnpaidLossesCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeInReinsuranceRecoverableOnPaidAndUnpaidLossesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeInReinsuranceRecoverableOnPaidAndUnpaidLossesCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeInReinsuranceRecoverableOnPaidAndUnpaidLossesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeInReinsuranceRecoverableOnPaidAndUnpaidLossesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeInReinsuranceRecoverableOnPaidAndUnpaidLossesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeInReinsuranceRecoverableOnPaidAndUnpaidLossesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeInReinsuranceRecoverableOnPaidAndUnpaidLossesCashFlowStatement) = value

"""

    Store = None


class ChangeInRestrictedCashCashFlowStatement(MultiPeriodField):
    """
    The net cash inflow (outflow) for the net change associated with funds that are not available for withdrawal or use (such as funds

                held in escrow).



    ChangeInRestrictedCashCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeInRestrictedCashCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeInRestrictedCashCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeInRestrictedCashCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeInRestrictedCashCashFlowStatement) = value

"""

    Store = None


class ChangeInTaxPayableCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods of the tax payables.



    ChangeInTaxPayableCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeInTaxPayableCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeInTaxPayableCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: ChangeInTaxPayableCashFlowStatement) -> Decimal



Set: OneMonth(self: ChangeInTaxPayableCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeInTaxPayableCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeInTaxPayableCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeInTaxPayableCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeInTaxPayableCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeInTaxPayableCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeInTaxPayableCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: ChangeInTaxPayableCashFlowStatement) -> Decimal



Set: TwoMonths(self: ChangeInTaxPayableCashFlowStatement) = value

"""

    Store = None


class ChangeinTheGrossProvisionforUnearnedPremiumsIncomeStatement(MultiPeriodField):
    """
    The change in the amount of the unearned premium reserves maintained by insurers.



    ChangeinTheGrossProvisionforUnearnedPremiumsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeinTheGrossProvisionforUnearnedPremiumsIncomeStatement) -> Decimal



Set: NineMonths(self: ChangeinTheGrossProvisionforUnearnedPremiumsIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeinTheGrossProvisionforUnearnedPremiumsIncomeStatement) -> Decimal



Set: SixMonths(self: ChangeinTheGrossProvisionforUnearnedPremiumsIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeinTheGrossProvisionforUnearnedPremiumsIncomeStatement) -> Decimal



Set: ThreeMonths(self: ChangeinTheGrossProvisionforUnearnedPremiumsIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeinTheGrossProvisionforUnearnedPremiumsIncomeStatement) -> Decimal



Set: TwelveMonths(self: ChangeinTheGrossProvisionforUnearnedPremiumsIncomeStatement) = value

"""

    Store = None


class ChangeinTheGrossProvisionforUnearnedPremiumsReinsurersShareIncomeStatement(MultiPeriodField):
    """
    The change in the amount of unearned premium reserve to be covered by reinsurers.



    ChangeinTheGrossProvisionforUnearnedPremiumsReinsurersShareIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeinTheGrossProvisionforUnearnedPremiumsReinsurersShareIncomeStatement) -> Decimal



Set: NineMonths(self: ChangeinTheGrossProvisionforUnearnedPremiumsReinsurersShareIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeinTheGrossProvisionforUnearnedPremiumsReinsurersShareIncomeStatement) -> Decimal



Set: SixMonths(self: ChangeinTheGrossProvisionforUnearnedPremiumsReinsurersShareIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeinTheGrossProvisionforUnearnedPremiumsReinsurersShareIncomeStatement) -> Decimal



Set: ThreeMonths(self: ChangeinTheGrossProvisionforUnearnedPremiumsReinsurersShareIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeinTheGrossProvisionforUnearnedPremiumsReinsurersShareIncomeStatement) -> Decimal



Set: TwelveMonths(self: ChangeinTheGrossProvisionforUnearnedPremiumsReinsurersShareIncomeStatement) = value

"""

    Store = None


class ChangeInTradingAccountSecuritiesCashFlowStatement(MultiPeriodField):
    """
    The net change during the reporting period associated with trading account assets. Trading account assets are bought and held

                principally for the purpose of selling them in the near term (thus held for only a short period of time). Unrealized holding gains and

                losses for trading securities are included in earnings.



    ChangeInTradingAccountSecuritiesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeInTradingAccountSecuritiesCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeInTradingAccountSecuritiesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeInTradingAccountSecuritiesCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeInTradingAccountSecuritiesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeInTradingAccountSecuritiesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeInTradingAccountSecuritiesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeInTradingAccountSecuritiesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeInTradingAccountSecuritiesCashFlowStatement) = value

"""

    Store = None


class ChangeInUnearnedPremiumsCashFlowStatement(MultiPeriodField):
    """
    The change during the period in the unearned portion of premiums written, excluding the portion amortized into income. This item is

                usually only available for insurance industry.



    ChangeInUnearnedPremiumsCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeInUnearnedPremiumsCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeInUnearnedPremiumsCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeInUnearnedPremiumsCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeInUnearnedPremiumsCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeInUnearnedPremiumsCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeInUnearnedPremiumsCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeInUnearnedPremiumsCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeInUnearnedPremiumsCashFlowStatement) = value

"""

    Store = None


class ChangeInWorkingCapitalCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods of the working capital.  Working Capital is the amount left to the company to finance

                operations and expansion after current liabilities have been covered.



    ChangeInWorkingCapitalCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangeInWorkingCapitalCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangeInWorkingCapitalCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: ChangeInWorkingCapitalCashFlowStatement) -> Decimal



Set: OneMonth(self: ChangeInWorkingCapitalCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangeInWorkingCapitalCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangeInWorkingCapitalCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangeInWorkingCapitalCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangeInWorkingCapitalCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangeInWorkingCapitalCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangeInWorkingCapitalCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: ChangeInWorkingCapitalCashFlowStatement) -> Decimal



Set: TwoMonths(self: ChangeInWorkingCapitalCashFlowStatement) = value

"""

    Store = None


class ChangesInAccountReceivablesCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods of the accounts receivables.



    ChangesInAccountReceivablesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangesInAccountReceivablesCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangesInAccountReceivablesCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: ChangesInAccountReceivablesCashFlowStatement) -> Decimal



Set: OneMonth(self: ChangesInAccountReceivablesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangesInAccountReceivablesCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangesInAccountReceivablesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangesInAccountReceivablesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangesInAccountReceivablesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangesInAccountReceivablesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangesInAccountReceivablesCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: ChangesInAccountReceivablesCashFlowStatement) -> Decimal



Set: TwoMonths(self: ChangesInAccountReceivablesCashFlowStatement) = value

"""

    Store = None


class ChangesInCashCashFlowStatement(MultiPeriodField):
    """
    The net change between the beginning and ending balance of cash and cash equivalents.



    ChangesInCashCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ChangesInCashCashFlowStatement) -> Decimal



Set: NineMonths(self: ChangesInCashCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: ChangesInCashCashFlowStatement) -> Decimal



Set: OneMonth(self: ChangesInCashCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ChangesInCashCashFlowStatement) -> Decimal



Set: SixMonths(self: ChangesInCashCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ChangesInCashCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ChangesInCashCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ChangesInCashCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ChangesInCashCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: ChangesInCashCashFlowStatement) -> Decimal



Set: TwoMonths(self: ChangesInCashCashFlowStatement) = value

"""

    Store = None


class ClaimsandChangeinInsuranceLiabilitiesIncomeStatement(MultiPeriodField):
    """
    Income/Expense due to the insurer's changes in insurance liabilities.



    ClaimsandChangeinInsuranceLiabilitiesIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ClaimsandChangeinInsuranceLiabilitiesIncomeStatement) -> Decimal



Set: NineMonths(self: ClaimsandChangeinInsuranceLiabilitiesIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ClaimsandChangeinInsuranceLiabilitiesIncomeStatement) -> Decimal



Set: SixMonths(self: ClaimsandChangeinInsuranceLiabilitiesIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ClaimsandChangeinInsuranceLiabilitiesIncomeStatement) -> Decimal



Set: ThreeMonths(self: ClaimsandChangeinInsuranceLiabilitiesIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ClaimsandChangeinInsuranceLiabilitiesIncomeStatement) -> Decimal



Set: TwelveMonths(self: ClaimsandChangeinInsuranceLiabilitiesIncomeStatement) = value

"""

    Store = None


class ClaimsandPaidIncurredIncomeStatement(MultiPeriodField):
    """
    All reported claims arising out of incidents in that year are considered incurred grouped with claims paid out.



    ClaimsandPaidIncurredIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ClaimsandPaidIncurredIncomeStatement) -> Decimal



Set: NineMonths(self: ClaimsandPaidIncurredIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ClaimsandPaidIncurredIncomeStatement) -> Decimal



Set: SixMonths(self: ClaimsandPaidIncurredIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ClaimsandPaidIncurredIncomeStatement) -> Decimal



Set: ThreeMonths(self: ClaimsandPaidIncurredIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ClaimsandPaidIncurredIncomeStatement) -> Decimal



Set: TwelveMonths(self: ClaimsandPaidIncurredIncomeStatement) = value

"""

    Store = None


class ClaimsOutstandingBalanceSheet(MultiPeriodField):
    """
    Amounts owing to policy holders who have filed claims but have not yet been settled or paid.



    ClaimsOutstandingBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ClaimsOutstandingBalanceSheet) -> Decimal



Set: ThreeMonths(self: ClaimsOutstandingBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ClaimsOutstandingBalanceSheet) -> Decimal



Set: TwelveMonths(self: ClaimsOutstandingBalanceSheet) = value

"""

    Store = None


class ClaimsPaidCashFlowStatement(MultiPeriodField):
    """
    Cash paid out for claims by a insurance company during the period in operating cash flow, using the direct method. This item is

                usually only available for insurance industry



    ClaimsPaidCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ClaimsPaidCashFlowStatement) -> Decimal



Set: NineMonths(self: ClaimsPaidCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ClaimsPaidCashFlowStatement) -> Decimal



Set: SixMonths(self: ClaimsPaidCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ClaimsPaidCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ClaimsPaidCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ClaimsPaidCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ClaimsPaidCashFlowStatement) = value

"""

    Store = None


class ClassesofCashPaymentsCashFlowStatement(MultiPeriodField):
    """
    Sum of total cash payment in the direct cash flow.



    ClassesofCashPaymentsCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ClassesofCashPaymentsCashFlowStatement) -> Decimal



Set: NineMonths(self: ClassesofCashPaymentsCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: ClassesofCashPaymentsCashFlowStatement) -> Decimal



Set: OneMonth(self: ClassesofCashPaymentsCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ClassesofCashPaymentsCashFlowStatement) -> Decimal



Set: SixMonths(self: ClassesofCashPaymentsCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ClassesofCashPaymentsCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ClassesofCashPaymentsCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ClassesofCashPaymentsCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ClassesofCashPaymentsCashFlowStatement) = value

"""

    Store = None


class ClassesofCashReceiptsfromOperatingActivitiesCashFlowStatement(MultiPeriodField):
    """
    Sum of total cash receipts in the direct cash flow.



    ClassesofCashReceiptsfromOperatingActivitiesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ClassesofCashReceiptsfromOperatingActivitiesCashFlowStatement) -> Decimal



Set: NineMonths(self: ClassesofCashReceiptsfromOperatingActivitiesCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: ClassesofCashReceiptsfromOperatingActivitiesCashFlowStatement) -> Decimal



Set: OneMonth(self: ClassesofCashReceiptsfromOperatingActivitiesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ClassesofCashReceiptsfromOperatingActivitiesCashFlowStatement) -> Decimal



Set: SixMonths(self: ClassesofCashReceiptsfromOperatingActivitiesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ClassesofCashReceiptsfromOperatingActivitiesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ClassesofCashReceiptsfromOperatingActivitiesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ClassesofCashReceiptsfromOperatingActivitiesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ClassesofCashReceiptsfromOperatingActivitiesCashFlowStatement) = value

"""

    Store = None


class CommercialLoanBalanceSheet(MultiPeriodField):
    """
    Short-term loan, typically 90 days, used by a company to finance seasonal working capital needs.



    CommercialLoanBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CommercialLoanBalanceSheet) -> Decimal



Set: NineMonths(self: CommercialLoanBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CommercialLoanBalanceSheet) -> Decimal



Set: SixMonths(self: CommercialLoanBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CommercialLoanBalanceSheet) -> Decimal



Set: ThreeMonths(self: CommercialLoanBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CommercialLoanBalanceSheet) -> Decimal



Set: TwelveMonths(self: CommercialLoanBalanceSheet) = value

"""

    Store = None


class CommercialPaperBalanceSheet(MultiPeriodField):
    """
    Commercial paper is a money-market security issued by large banks and corporations. It represents the current obligation for the

                company. There are four basic kinds of commercial paper: promissory notes, drafts, checks, and certificates of deposit. The

                maturities of these money market securities generally do not exceed 270 days.



    CommercialPaperBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CommercialPaperBalanceSheet) -> Decimal



Set: ThreeMonths(self: CommercialPaperBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CommercialPaperBalanceSheet) -> Decimal



Set: TwelveMonths(self: CommercialPaperBalanceSheet) = value

"""

    Store = None


class CommissionExpensesIncomeStatement(MultiPeriodField):
    """ CommissionExpensesIncomeStatement(store: IDictionary[str, Decimal]) """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CommissionExpensesIncomeStatement) -> Decimal



Set: NineMonths(self: CommissionExpensesIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CommissionExpensesIncomeStatement) -> Decimal



Set: OneMonth(self: CommissionExpensesIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CommissionExpensesIncomeStatement) -> Decimal



Set: SixMonths(self: CommissionExpensesIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CommissionExpensesIncomeStatement) -> Decimal



Set: ThreeMonths(self: CommissionExpensesIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CommissionExpensesIncomeStatement) -> Decimal



Set: TwelveMonths(self: CommissionExpensesIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CommissionExpensesIncomeStatement) -> Decimal



Set: TwoMonths(self: CommissionExpensesIncomeStatement) = value

"""

    Store = None


class CommissionPaidCashFlowStatement(MultiPeriodField):
    """
    Cash paid for commissions in operating cash flow, using the direct method



    CommissionPaidCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CommissionPaidCashFlowStatement) -> Decimal



Set: NineMonths(self: CommissionPaidCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CommissionPaidCashFlowStatement) -> Decimal



Set: SixMonths(self: CommissionPaidCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CommissionPaidCashFlowStatement) -> Decimal



Set: ThreeMonths(self: CommissionPaidCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CommissionPaidCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CommissionPaidCashFlowStatement) = value

"""

    Store = None


class CommonEquityToAssets(MultiPeriodField):
    """
    This is a financial ratio of common stock equity to total assets that indicates the relative proportion of equity used to finance a

                company's assets.



    CommonEquityToAssets(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CommonEquityToAssets) -> Decimal



Set: NineMonths(self: CommonEquityToAssets) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CommonEquityToAssets) -> Decimal



Set: OneMonth(self: CommonEquityToAssets) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: CommonEquityToAssets) -> Decimal



Set: OneYear(self: CommonEquityToAssets) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CommonEquityToAssets) -> Decimal



Set: SixMonths(self: CommonEquityToAssets) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CommonEquityToAssets) -> Decimal



Set: ThreeMonths(self: CommonEquityToAssets) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CommonEquityToAssets) -> Decimal



Set: TwoMonths(self: CommonEquityToAssets) = value

"""

    Store = None


class CommonStockBalanceSheet(MultiPeriodField):
    """
    Common stock (all issues) at par value, as reported within the Stockholder's Equity section of the balance sheet; i.e. it is one

                component of Common Stockholder's Equity



    CommonStockBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CommonStockBalanceSheet) -> Decimal



Set: NineMonths(self: CommonStockBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CommonStockBalanceSheet) -> Decimal



Set: OneMonth(self: CommonStockBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CommonStockBalanceSheet) -> Decimal



Set: SixMonths(self: CommonStockBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CommonStockBalanceSheet) -> Decimal



Set: ThreeMonths(self: CommonStockBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CommonStockBalanceSheet) -> Decimal



Set: TwelveMonths(self: CommonStockBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CommonStockBalanceSheet) -> Decimal



Set: TwoMonths(self: CommonStockBalanceSheet) = value

"""

    Store = None


class CommonStockDividendPaidCashFlowStatement(MultiPeriodField):
    """
    The cash outflow from the distribution of an entity's earnings in the form of dividends to common shareholders.



    CommonStockDividendPaidCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CommonStockDividendPaidCashFlowStatement) -> Decimal



Set: NineMonths(self: CommonStockDividendPaidCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CommonStockDividendPaidCashFlowStatement) -> Decimal



Set: OneMonth(self: CommonStockDividendPaidCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CommonStockDividendPaidCashFlowStatement) -> Decimal



Set: SixMonths(self: CommonStockDividendPaidCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CommonStockDividendPaidCashFlowStatement) -> Decimal



Set: ThreeMonths(self: CommonStockDividendPaidCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CommonStockDividendPaidCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CommonStockDividendPaidCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CommonStockDividendPaidCashFlowStatement) -> Decimal



Set: TwoMonths(self: CommonStockDividendPaidCashFlowStatement) = value

"""

    Store = None


class CommonStockEquityBalanceSheet(MultiPeriodField):
    """
    The portion of the Stockholders' Equity that reflects the amount of common stock, which are units of ownership.



    CommonStockEquityBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CommonStockEquityBalanceSheet) -> Decimal



Set: NineMonths(self: CommonStockEquityBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CommonStockEquityBalanceSheet) -> Decimal



Set: OneMonth(self: CommonStockEquityBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CommonStockEquityBalanceSheet) -> Decimal



Set: SixMonths(self: CommonStockEquityBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CommonStockEquityBalanceSheet) -> Decimal



Set: ThreeMonths(self: CommonStockEquityBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CommonStockEquityBalanceSheet) -> Decimal



Set: TwelveMonths(self: CommonStockEquityBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CommonStockEquityBalanceSheet) -> Decimal



Set: TwoMonths(self: CommonStockEquityBalanceSheet) = value

"""

    Store = None


class CommonStockIssuanceCashFlowStatement(MultiPeriodField):
    """
    The cash inflow from offering common stock, which is the additional capital contribution to the entity during the PeriodAsByte.



    CommonStockIssuanceCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CommonStockIssuanceCashFlowStatement) -> Decimal



Set: NineMonths(self: CommonStockIssuanceCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CommonStockIssuanceCashFlowStatement) -> Decimal



Set: OneMonth(self: CommonStockIssuanceCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CommonStockIssuanceCashFlowStatement) -> Decimal



Set: SixMonths(self: CommonStockIssuanceCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CommonStockIssuanceCashFlowStatement) -> Decimal



Set: ThreeMonths(self: CommonStockIssuanceCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CommonStockIssuanceCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CommonStockIssuanceCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CommonStockIssuanceCashFlowStatement) -> Decimal



Set: TwoMonths(self: CommonStockIssuanceCashFlowStatement) = value

"""

    Store = None


class CommonStockPaymentsCashFlowStatement(MultiPeriodField):
    """
    The cash outflow to reacquire common stock during the PeriodAsByte.



    CommonStockPaymentsCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CommonStockPaymentsCashFlowStatement) -> Decimal



Set: NineMonths(self: CommonStockPaymentsCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CommonStockPaymentsCashFlowStatement) -> Decimal



Set: OneMonth(self: CommonStockPaymentsCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CommonStockPaymentsCashFlowStatement) -> Decimal



Set: SixMonths(self: CommonStockPaymentsCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CommonStockPaymentsCashFlowStatement) -> Decimal



Set: ThreeMonths(self: CommonStockPaymentsCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CommonStockPaymentsCashFlowStatement) -> Decimal



Set: TwelveMonths(self: CommonStockPaymentsCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CommonStockPaymentsCashFlowStatement) -> Decimal



Set: TwoMonths(self: CommonStockPaymentsCashFlowStatement) = value

"""

    Store = None


class CommonUtilityPlantBalanceSheet(MultiPeriodField):
    """
    The amount for the other plant related to the utility industry fix assets.



    CommonUtilityPlantBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CommonUtilityPlantBalanceSheet) -> Decimal



Set: NineMonths(self: CommonUtilityPlantBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CommonUtilityPlantBalanceSheet) -> Decimal



Set: ThreeMonths(self: CommonUtilityPlantBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CommonUtilityPlantBalanceSheet) -> Decimal



Set: TwelveMonths(self: CommonUtilityPlantBalanceSheet) = value

"""

    Store = None


class CompanyProfile(object):
    """
    Definition of the CompanyProfile class



    CompanyProfile()
    """

    def UpdateValues(self, update):
        """
        UpdateValues(self: CompanyProfile, update: CompanyProfile)

            Applies updated values from update to this

             instance





            update: The next data update for this instance
        """
        pass

    AverageEmployeeNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Average number of employees from Annual Report



Get: AverageEmployeeNumber(self: CompanyProfile) -> int



Set: AverageEmployeeNumber(self: CompanyProfile) = value

"""

    ContactEmail = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Company's contact email address



Get: ContactEmail(self: CompanyProfile) -> str



Set: ContactEmail(self: CompanyProfile) = value

"""

    EnterpriseValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This number tells you what cash return you would get if you bought the entire company, including its debt.        Enterprise Value =

            Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital Lease + Securities Sold But

            Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with Agreement to Resell - Securities

            Borrowed.



Get: EnterpriseValue(self: CompanyProfile) -> Int64



Set: EnterpriseValue(self: CompanyProfile) = value

"""

    HeadquarterAddressLine1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The headquarter address as given in the latest report



Get: HeadquarterAddressLine1(self: CompanyProfile) -> str



Set: HeadquarterAddressLine1(self: CompanyProfile) = value

"""

    HeadquarterAddressLine2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The headquarter address as given in the latest report



Get: HeadquarterAddressLine2(self: CompanyProfile) -> str



Set: HeadquarterAddressLine2(self: CompanyProfile) = value

"""

    HeadquarterAddressLine3 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The headquarter address as given in the latest report



Get: HeadquarterAddressLine3(self: CompanyProfile) -> str



Set: HeadquarterAddressLine3(self: CompanyProfile) = value

"""

    HeadquarterAddressLine4 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The headquarter address as given in the latest report



Get: HeadquarterAddressLine4(self: CompanyProfile) -> str



Set: HeadquarterAddressLine4(self: CompanyProfile) = value

"""

    HeadquarterAddressLine5 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The headquarter address as given in the latest report



Get: HeadquarterAddressLine5(self: CompanyProfile) -> str



Set: HeadquarterAddressLine5(self: CompanyProfile) = value

"""

    HeadquarterCity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The headquarter city as given in the latest report



Get: HeadquarterCity(self: CompanyProfile) -> str



Set: HeadquarterCity(self: CompanyProfile) = value

"""

    HeadquarterCountry = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The headquarter country as given in the latest report



Get: HeadquarterCountry(self: CompanyProfile) -> str



Set: HeadquarterCountry(self: CompanyProfile) = value

"""

    HeadquarterFax = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The headquarter fax number as given in the latest report



Get: HeadquarterFax(self: CompanyProfile) -> str



Set: HeadquarterFax(self: CompanyProfile) = value

"""

    HeadquarterHomepage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The headquarters' website address as given in the latest report



Get: HeadquarterHomepage(self: CompanyProfile) -> str



Set: HeadquarterHomepage(self: CompanyProfile) = value

"""

    HeadquarterPhone = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The headquarter phone number as given in the latest report



Get: HeadquarterPhone(self: CompanyProfile) -> str



Set: HeadquarterPhone(self: CompanyProfile) = value

"""

    HeadquarterPostalCode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The headquarter postal code as given in the latest report



Get: HeadquarterPostalCode(self: CompanyProfile) -> str



Set: HeadquarterPostalCode(self: CompanyProfile) = value

"""

    HeadquarterProvince = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The headquarter state or province as given in the latest report



Get: HeadquarterProvince(self: CompanyProfile) -> str



Set: HeadquarterProvince(self: CompanyProfile) = value

"""

    IsHeadOfficeSameWithRegisteredOfficeFlag = property(lambda self: object(), lambda self, v: None,
                                                        lambda self: None)  # default
    """Flag to denote whether head and registered offices are the same



Get: IsHeadOfficeSameWithRegisteredOfficeFlag(self: CompanyProfile) -> bool



Set: IsHeadOfficeSameWithRegisteredOfficeFlag(self: CompanyProfile) = value

"""

    MarketCap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Price * Total SharesOutstanding.

            The most current market cap for example, would be the most recent closing price x the most recent reported shares outstanding.

            For ADR share classes, market cap is price * (ordinary shares outstanding / adr ratio).



Get: MarketCap(self: CompanyProfile) -> Int64



Set: MarketCap(self: CompanyProfile) = value

"""

    ReasonofSharesChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The reason for the change in a company's total shares outstanding from the previous record. Examples could be share issuances or

            share buy-back. This field will only be populated when total shares outstanding is collected from a press release.



Get: ReasonofSharesChange(self: CompanyProfile) -> str



Set: ReasonofSharesChange(self: CompanyProfile) = value

"""

    RegisteredAddressLine1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Details for registered office contact information including address full details, phone and



Get: RegisteredAddressLine1(self: CompanyProfile) -> str



Set: RegisteredAddressLine1(self: CompanyProfile) = value

"""

    RegisteredAddressLine2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Address for registered office



Get: RegisteredAddressLine2(self: CompanyProfile) -> str



Set: RegisteredAddressLine2(self: CompanyProfile) = value

"""

    RegisteredAddressLine3 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Address for registered office



Get: RegisteredAddressLine3(self: CompanyProfile) -> str



Set: RegisteredAddressLine3(self: CompanyProfile) = value

"""

    RegisteredAddressLine4 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Address for registered office



Get: RegisteredAddressLine4(self: CompanyProfile) -> str



Set: RegisteredAddressLine4(self: CompanyProfile) = value

"""

    RegisteredCity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """City for registered office



Get: RegisteredCity(self: CompanyProfile) -> str



Set: RegisteredCity(self: CompanyProfile) = value

"""

    RegisteredCountry = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Country for registered office



Get: RegisteredCountry(self: CompanyProfile) -> str



Set: RegisteredCountry(self: CompanyProfile) = value

"""

    RegisteredFax = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Fax number for registered office



Get: RegisteredFax(self: CompanyProfile) -> str



Set: RegisteredFax(self: CompanyProfile) = value

"""

    RegisteredPhone = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Phone number for registered office



Get: RegisteredPhone(self: CompanyProfile) -> str



Set: RegisteredPhone(self: CompanyProfile) = value

"""

    RegisteredPostalCode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Postal Code for registered office



Get: RegisteredPostalCode(self: CompanyProfile) -> str



Set: RegisteredPostalCode(self: CompanyProfile) = value

"""

    RegisteredProvince = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Province for registered office



Get: RegisteredProvince(self: CompanyProfile) -> str



Set: RegisteredProvince(self: CompanyProfile) = value

"""

    ShareClassLevelSharesOutstanding = property(lambda self: object(), lambda self, v: None,
                                                lambda self: None)  # default
    """The latest shares outstanding reported by the company of a particular share class; most common source of this information is from

            the cover of the 10K, 10Q, or 20F filing. This figure is an aggregated shares outstanding number for a particular share class of the

            company.



Get: ShareClassLevelSharesOutstanding(self: CompanyProfile) -> Int64



Set: ShareClassLevelSharesOutstanding(self: CompanyProfile) = value

"""

    SharesOutstanding = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The latest total shares outstanding reported by the company; most common source of this information is from the cover of the 10K,

            10Q, or 20F filing. This figure is an aggregated shares outstanding number for a company. It can be used to calculate the most

            accurate market cap, based on each individual share's trading price and the total aggregated shares outstanding figure.



Get: SharesOutstanding(self: CompanyProfile) -> Int64



Set: SharesOutstanding(self: CompanyProfile) = value

"""

    SharesOutstandingWithBalanceSheetEndingDate = property(lambda self: object(), lambda self, v: None,
                                                           lambda self: None)  # default
    """Total shares outstanding reported by the company as of the balance sheet period ended date. The most common source of this

            information is from the 10K, 10Q, or 20F filing. This figure is an aggregated shares outstanding number for a company.



Get: SharesOutstandingWithBalanceSheetEndingDate(self: CompanyProfile) -> Int64



Set: SharesOutstandingWithBalanceSheetEndingDate(self: CompanyProfile) = value

"""

    TotalEmployeeNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of employees as indicated on the latest Annual Report, 10-K filing, Form 20-F or equivalent report indicating the

            employee count at the end of latest fiscal year.



Get: TotalEmployeeNumber(self: CompanyProfile) -> int



Set: TotalEmployeeNumber(self: CompanyProfile) = value

"""


class CompanyReference(object):
    """
    Definition of the CompanyReference class



    CompanyReference()
    """

    def UpdateValues(self, update):
        """
        UpdateValues(self: CompanyReference, update: CompanyReference)

            Applies updated values from update to this

             instance





            update: The next data update for this instance
        """
        pass

    Advisor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The legal (registered) name of the current legal Advisor of the company.



Get: Advisor(self: CompanyReference) -> str



Set: Advisor(self: CompanyReference) = value

"""

    AdvisorLanguageCode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ISO code denoting the language text for Advisor's name and contact information.



Get: AdvisorLanguageCode(self: CompanyReference) -> str



Set: AdvisorLanguageCode(self: CompanyReference) = value

"""

    Auditor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The legal (registered) name of the company's current auditor. Distinct from DataID 28000 Period Auditor that identifies the Auditor

            related to that period's financial statements.



Get: Auditor(self: CompanyReference) -> str



Set: Auditor(self: CompanyReference) = value

"""

    AuditorLanguageCode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ISO code denoting the language text for Auditor's name and contact information.



Get: AuditorLanguageCode(self: CompanyReference) -> str



Set: AuditorLanguageCode(self: CompanyReference) = value

"""

    BusinessCountryID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """In some cases, different from the country of domicile (CountryId; DataID 5).  This element is a three (3) Character ISO code of the

            business country of the security.  It is determined by a few factors, including:



Get: BusinessCountryID(self: CompanyReference) -> str



Set: BusinessCountryID(self: CompanyReference) = value

"""

    CIK = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Central Index Key; a corporate identifier assigned by the Securities and Exchange Commission (SEC).



Get: CIK(self: CompanyReference) -> str



Set: CIK(self: CompanyReference) = value

"""

    CompanyId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """10-digit unique and unchanging Morningstar identifier assigned to every company.



Get: CompanyId(self: CompanyReference) -> str



Set: CompanyId(self: CompanyReference) = value

"""

    CompanyStatus = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """At the Company level; each company is assigned to 1 of 3 possible status classifications; (U) Public, (V) Private, or (O) Obsolete:

            - Public-Firm is operating and currently has at least one common share class that is currently trading on a public exchange.

            - Private-Firm is operating but does not have any common share classes currently trading on a public exchange.

            - Obsolete-Firm is no longer operating because it closed its business, or was acquired.



Get: CompanyStatus(self: CompanyReference) -> str



Set: CompanyStatus(self: CompanyReference) = value

"""

    CountryId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """3 Character ISO code of the country where the firm is domiciled. See separate reference document for Country Mappings.



Get: CountryId(self: CompanyReference) -> str



Set: CountryId(self: CompanyReference) = value

"""

    ExpectedFiscalYearEnd = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The upcoming expected year end for the company. It is calculated based on current year end (from latest available annual report)

            + 1 year.



Get: ExpectedFiscalYearEnd(self: CompanyReference) -> DateTime



Set: ExpectedFiscalYearEnd(self: CompanyReference) = value

"""

    FiscalYearEnd = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Month of the company's latest fiscal year.



Get: FiscalYearEnd(self: CompanyReference) -> int



Set: FiscalYearEnd(self: CompanyReference) = value

"""

    IndustryTemplateCode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This indicator will denote which one of the six industry data collection templates applies to the company.  Each industry data

            collection template includes data elements that are commonly reported by companies in that industry.  N=Normal

            (Manufacturing), M=Mining,  U=Utility, T=Transportation, B=Bank, I=Insurance



Get: IndustryTemplateCode(self: CompanyReference) -> str



Set: IndustryTemplateCode(self: CompanyReference) = value

"""

    IsLimitedLiabilityCompany = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicator to denote if the company is a limited liability company. 1 denotes it is a LLC; otherwise 0.



Get: IsLimitedLiabilityCompany(self: CompanyReference) -> bool



Set: IsLimitedLiabilityCompany(self: CompanyReference) = value

"""

    IsLimitedPartnership = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicator to denote if the company is a limited partnership, which is a form of business structure comprised of a general partner and

            limited partners. 1 denotes it is a LP; otherwise 0.



Get: IsLimitedPartnership(self: CompanyReference) -> bool



Set: IsLimitedPartnership(self: CompanyReference) = value

"""

    IsREIT = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicator to denote if the company is a real estate investment trust (REIT). 1 denotes it is a REIT; otherwise 0.



Get: IsREIT(self: CompanyReference) -> bool



Set: IsREIT(self: CompanyReference) = value

"""

    LegalName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The full name of the registrant as specified in its charter, and most often found on the front cover of the 10K/10Q/20F filing.



Get: LegalName(self: CompanyReference) -> str



Set: LegalName(self: CompanyReference) = value

"""

    LegalNameLanguageCode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The language code for the foreign legal name if/when applicable.  Related to  DataID 4 (LegalName).



Get: LegalNameLanguageCode(self: CompanyReference) -> str



Set: LegalNameLanguageCode(self: CompanyReference) = value

"""

    PrimaryExchangeID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Id representing the stock exchange of the Primary Share of the company.  See separate reference document for Exchange

            Mappings. The primary share of a company is defined as the first share that was traded publicly with and is still actively trading. If

            this share is no longer trading, the primary share will be the share with the highest volume.



Get: PrimaryExchangeID(self: CompanyReference) -> str



Set: PrimaryExchangeID(self: CompanyReference) = value

"""

    PrimaryMIC = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The MIC (market identifier code) of the PrimarySymbol of the company. See Data Appendix A for the relevant MIC to exchange

            name mapping.



Get: PrimaryMIC(self: CompanyReference) -> str



Set: PrimaryMIC(self: CompanyReference) = value

"""

    PrimaryShareClassID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The 10-digit unique and unchanging Morningstar identifier assigned to the Primary Share class of a company. The primary share of a

            company is defined as the first share that was traded publicly and is still actively trading. If this share is no longer trading, the

            primary share will be the share with the highest volume.



Get: PrimaryShareClassID(self: CompanyReference) -> str



Set: PrimaryShareClassID(self: CompanyReference) = value

"""

    PrimarySymbol = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The symbol of the Primary Share of the company, composed of an arrangement of characters (often letters) representing a

            particular security listed on an exchange or otherwise traded publicly.   The primary share of a company is defined as the first share

            that was traded publicly and is still actively trading. If this share is no longer trading, the primary share will be the share with the

            highest volume. Note: Morningstar's multi-share class symbols will often contain a "period" within the symbol; e.g. BRK.B for

            Berkshire Hathaway Class B.



Get: PrimarySymbol(self: CompanyReference) -> str



Set: PrimarySymbol(self: CompanyReference) = value

"""

    ReportStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This refers to the financial template used to collect the company's financial statements. There are two report styles representing

            two different financial template structures. Report style "1" is most commonly used by US and Canadian companies, and Report

            style "3" is most commonly used by the rest of the universe. Contact your client manager for access to the respective templates.



Get: ReportStyle(self: CompanyReference) -> int



Set: ReportStyle(self: CompanyReference) = value

"""

    ShortName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """25-character max abbreviated name of the firm.  In most cases, the short name will simply be the Legal Name less the

            "Corporation", "Corp.", "Inc.", "Incorporated", etc...



Get: ShortName(self: CompanyReference) -> str



Set: ShortName(self: CompanyReference) = value

"""

    StandardName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The English translation of the foreign legal name if/when applicable.



Get: StandardName(self: CompanyReference) -> str



Set: StandardName(self: CompanyReference) = value

"""

    YearofEstablishment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The year a company was founded.



Get: YearofEstablishment(self: CompanyReference) -> str



Set: YearofEstablishment(self: CompanyReference) = value

"""


class ComTreShaNumBalanceSheet(MultiPeriodField):
    """
    The treasury stock number of common shares. This represents the number of common shares owned by the company as a result of

                share repurchase programs or donations.



    ComTreShaNumBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ComTreShaNumBalanceSheet) -> Decimal



Set: ThreeMonths(self: ComTreShaNumBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ComTreShaNumBalanceSheet) -> Decimal



Set: TwelveMonths(self: ComTreShaNumBalanceSheet) = value

"""

    Store = None


class ConstructionInProgressBalanceSheet(MultiPeriodField):
    """
    It represents carrying amount of long-lived asset under construction that includes construction costs to date on capital projects.

                Assets constructed, but not completed.



    ConstructionInProgressBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ConstructionInProgressBalanceSheet) -> Decimal



Set: NineMonths(self: ConstructionInProgressBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: ConstructionInProgressBalanceSheet) -> Decimal



Set: OneMonth(self: ConstructionInProgressBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ConstructionInProgressBalanceSheet) -> Decimal



Set: SixMonths(self: ConstructionInProgressBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ConstructionInProgressBalanceSheet) -> Decimal



Set: ThreeMonths(self: ConstructionInProgressBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ConstructionInProgressBalanceSheet) -> Decimal



Set: TwelveMonths(self: ConstructionInProgressBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: ConstructionInProgressBalanceSheet) -> Decimal



Set: TwoMonths(self: ConstructionInProgressBalanceSheet) = value

"""

    Store = None


class ConsumerLoanBalanceSheet(MultiPeriodField):
    """
    A loan that establishes consumer credit that is granted for personal use; usually unsecured and based on the borrower's integrity

                and ability to pay.



    ConsumerLoanBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ConsumerLoanBalanceSheet) -> Decimal



Set: NineMonths(self: ConsumerLoanBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ConsumerLoanBalanceSheet) -> Decimal



Set: SixMonths(self: ConsumerLoanBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ConsumerLoanBalanceSheet) -> Decimal



Set: ThreeMonths(self: ConsumerLoanBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ConsumerLoanBalanceSheet) -> Decimal



Set: TwelveMonths(self: ConsumerLoanBalanceSheet) = value

"""

    Store = None


class ContinuingAndDiscontinuedBasicEPS(MultiPeriodField):
    """
    Basic EPS from Continuing Operations plus Basic EPS from Discontinued Operations.



    ContinuingAndDiscontinuedBasicEPS(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ContinuingAndDiscontinuedBasicEPS) -> Decimal



Set: NineMonths(self: ContinuingAndDiscontinuedBasicEPS) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: ContinuingAndDiscontinuedBasicEPS) -> Decimal



Set: OneMonth(self: ContinuingAndDiscontinuedBasicEPS) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ContinuingAndDiscontinuedBasicEPS) -> Decimal



Set: SixMonths(self: ContinuingAndDiscontinuedBasicEPS) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ContinuingAndDiscontinuedBasicEPS) -> Decimal



Set: ThreeMonths(self: ContinuingAndDiscontinuedBasicEPS) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ContinuingAndDiscontinuedBasicEPS) -> Decimal



Set: TwelveMonths(self: ContinuingAndDiscontinuedBasicEPS) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: ContinuingAndDiscontinuedBasicEPS) -> Decimal



Set: TwoMonths(self: ContinuingAndDiscontinuedBasicEPS) = value

"""

    Store = None


class ContinuingAndDiscontinuedDilutedEPS(MultiPeriodField):
    """
    Diluted EPS from Continuing Operations plus Diluted EPS from Discontinued Operations.



    ContinuingAndDiscontinuedDilutedEPS(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ContinuingAndDiscontinuedDilutedEPS) -> Decimal



Set: NineMonths(self: ContinuingAndDiscontinuedDilutedEPS) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: ContinuingAndDiscontinuedDilutedEPS) -> Decimal



Set: OneMonth(self: ContinuingAndDiscontinuedDilutedEPS) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ContinuingAndDiscontinuedDilutedEPS) -> Decimal



Set: SixMonths(self: ContinuingAndDiscontinuedDilutedEPS) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ContinuingAndDiscontinuedDilutedEPS) -> Decimal



Set: ThreeMonths(self: ContinuingAndDiscontinuedDilutedEPS) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ContinuingAndDiscontinuedDilutedEPS) -> Decimal



Set: TwelveMonths(self: ContinuingAndDiscontinuedDilutedEPS) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: ContinuingAndDiscontinuedDilutedEPS) -> Decimal



Set: TwoMonths(self: ContinuingAndDiscontinuedDilutedEPS) = value

"""

    Store = None


class ConvertibleLoansCurrentBalanceSheet(MultiPeriodField):
    """
    This represents loans that entitle the lender (or the holder of loan debenture) to convert the loan to common or preferred stock

                (ordinary or preference shares) within the next 12 months or operating cycle.



    ConvertibleLoansCurrentBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ConvertibleLoansCurrentBalanceSheet) -> Decimal



Set: TwelveMonths(self: ConvertibleLoansCurrentBalanceSheet) = value

"""

    Store = None


class ConvertibleLoansNonCurrentBalanceSheet(MultiPeriodField):
    """
    A long term loan with a warrant attached that gives the debt holder the option to exchange all or a portion of the loan principal for

                an equity position in the company at a predetermined rate of conversion within a specified period of time.



    ConvertibleLoansNonCurrentBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ConvertibleLoansNonCurrentBalanceSheet) -> Decimal



Set: ThreeMonths(self: ConvertibleLoansNonCurrentBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ConvertibleLoansNonCurrentBalanceSheet) -> Decimal



Set: TwelveMonths(self: ConvertibleLoansNonCurrentBalanceSheet) = value

"""

    Store = None


class ConvertibleLoansTotalBalanceSheet(MultiPeriodField):
    """
    Loans that entitles the lender (or the holder of loan debenture) to convert the loan to common or preferred stock (ordinary or

                preference shares) at a specified rate conversion rate and a specified time frame; in a Non-Differentiated Balance Sheet.



    ConvertibleLoansTotalBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ConvertibleLoansTotalBalanceSheet) -> Decimal



Set: ThreeMonths(self: ConvertibleLoansTotalBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ConvertibleLoansTotalBalanceSheet) -> Decimal



Set: TwelveMonths(self: ConvertibleLoansTotalBalanceSheet) = value

"""

    Store = None


class CostOfRevenueIncomeStatement(MultiPeriodField):
    """
    The aggregate cost of goods produced and sold and services rendered during the reporting PeriodAsByte. It excludes all operating

                expenses such as depreciation, depletion, amortization, and SG&A. For the must have cost industry, if the number is not reported

                by the company, it will be calculated based on accounting equation.

                Cost of Revenue = Revenue - Operating Expenses - Operating Profit.



    CostOfRevenueIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CostOfRevenueIncomeStatement) -> Decimal



Set: NineMonths(self: CostOfRevenueIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CostOfRevenueIncomeStatement) -> Decimal



Set: OneMonth(self: CostOfRevenueIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CostOfRevenueIncomeStatement) -> Decimal



Set: SixMonths(self: CostOfRevenueIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CostOfRevenueIncomeStatement) -> Decimal



Set: ThreeMonths(self: CostOfRevenueIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CostOfRevenueIncomeStatement) -> Decimal



Set: TwelveMonths(self: CostOfRevenueIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CostOfRevenueIncomeStatement) -> Decimal



Set: TwoMonths(self: CostOfRevenueIncomeStatement) = value

"""

    Store = None


class CreditCardIncomeStatement(MultiPeriodField):
    """
    Income earned from credit card services including late, over limit, and annual fees. This item is usually only available for bank

                industry.



    CreditCardIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CreditCardIncomeStatement) -> Decimal



Set: NineMonths(self: CreditCardIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CreditCardIncomeStatement) -> Decimal



Set: SixMonths(self: CreditCardIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CreditCardIncomeStatement) -> Decimal



Set: ThreeMonths(self: CreditCardIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CreditCardIncomeStatement) -> Decimal



Set: TwelveMonths(self: CreditCardIncomeStatement) = value

"""

    Store = None


class CreditLossesProvisionIncomeStatement(MultiPeriodField):
    """
    A charge to income which represents an expense deemed adequate by management given the composition of a bank's credit

                portfolios, their probability of default, the economic environment and the allowance for credit losses already established. Specific

                provisions are established to reduce the book value of specific assets (primarily loans) to establish the amount expected to be

                recovered on the loans.



    CreditLossesProvisionIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CreditLossesProvisionIncomeStatement) -> Decimal



Set: NineMonths(self: CreditLossesProvisionIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CreditLossesProvisionIncomeStatement) -> Decimal



Set: OneMonth(self: CreditLossesProvisionIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CreditLossesProvisionIncomeStatement) -> Decimal



Set: SixMonths(self: CreditLossesProvisionIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CreditLossesProvisionIncomeStatement) -> Decimal



Set: ThreeMonths(self: CreditLossesProvisionIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CreditLossesProvisionIncomeStatement) -> Decimal



Set: TwelveMonths(self: CreditLossesProvisionIncomeStatement) = value

"""

    Store = None


class CreditRiskProvisionsIncomeStatement(MultiPeriodField):
    """
    Provision for the risk of loss of principal or loss of a financial reward stemming from a borrower's failure to repay a loan or otherwise

                meet a contractual obligation. Credit risk arises whenever a borrower is expecting to use future cash flows to pay a current debt.

                Investors are compensated for assuming credit risk by way of interest payments from the borrower or issuer of a debt obligation.

                This is a contra account under Total Revenue in banks.



    CreditRiskProvisionsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CreditRiskProvisionsIncomeStatement) -> Decimal



Set: NineMonths(self: CreditRiskProvisionsIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CreditRiskProvisionsIncomeStatement) -> Decimal



Set: SixMonths(self: CreditRiskProvisionsIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CreditRiskProvisionsIncomeStatement) -> Decimal



Set: ThreeMonths(self: CreditRiskProvisionsIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CreditRiskProvisionsIncomeStatement) -> Decimal



Set: TwelveMonths(self: CreditRiskProvisionsIncomeStatement) = value

"""

    Store = None


class CurrentAccruedExpensesBalanceSheet(MultiPeriodField):
    """
    An expense recognized before it is paid for. Includes compensation, interest, pensions and all other miscellaneous accruals

                reported by the company. Expenses incurred during the accounting period, but not required to be paid until a later date.



    CurrentAccruedExpensesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CurrentAccruedExpensesBalanceSheet) -> Decimal



Set: NineMonths(self: CurrentAccruedExpensesBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CurrentAccruedExpensesBalanceSheet) -> Decimal



Set: OneMonth(self: CurrentAccruedExpensesBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CurrentAccruedExpensesBalanceSheet) -> Decimal



Set: SixMonths(self: CurrentAccruedExpensesBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CurrentAccruedExpensesBalanceSheet) -> Decimal



Set: ThreeMonths(self: CurrentAccruedExpensesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CurrentAccruedExpensesBalanceSheet) -> Decimal



Set: TwelveMonths(self: CurrentAccruedExpensesBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CurrentAccruedExpensesBalanceSheet) -> Decimal



Set: TwoMonths(self: CurrentAccruedExpensesBalanceSheet) = value

"""

    Store = None


class CurrentAssetsBalanceSheet(MultiPeriodField):
    """
    The total amount of assets considered to be convertible into cash within a relatively short period of time, usually a year.



    CurrentAssetsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CurrentAssetsBalanceSheet) -> Decimal



Set: NineMonths(self: CurrentAssetsBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CurrentAssetsBalanceSheet) -> Decimal



Set: OneMonth(self: CurrentAssetsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CurrentAssetsBalanceSheet) -> Decimal



Set: SixMonths(self: CurrentAssetsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CurrentAssetsBalanceSheet) -> Decimal



Set: ThreeMonths(self: CurrentAssetsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CurrentAssetsBalanceSheet) -> Decimal



Set: TwelveMonths(self: CurrentAssetsBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CurrentAssetsBalanceSheet) -> Decimal



Set: TwoMonths(self: CurrentAssetsBalanceSheet) = value

"""

    Store = None


class CurrentCapitalLeaseObligationBalanceSheet(MultiPeriodField):
    """
    Represents the total amount of long-term capital leases that must be paid within the next accounting PeriodAsByte. Capital lease

                obligations are contractual obligations that arise from obtaining the use of property or equipment via a capital lease contract.



    CurrentCapitalLeaseObligationBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CurrentCapitalLeaseObligationBalanceSheet) -> Decimal



Set: NineMonths(self: CurrentCapitalLeaseObligationBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CurrentCapitalLeaseObligationBalanceSheet) -> Decimal



Set: OneMonth(self: CurrentCapitalLeaseObligationBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CurrentCapitalLeaseObligationBalanceSheet) -> Decimal



Set: SixMonths(self: CurrentCapitalLeaseObligationBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CurrentCapitalLeaseObligationBalanceSheet) -> Decimal



Set: ThreeMonths(self: CurrentCapitalLeaseObligationBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CurrentCapitalLeaseObligationBalanceSheet) -> Decimal



Set: TwelveMonths(self: CurrentCapitalLeaseObligationBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CurrentCapitalLeaseObligationBalanceSheet) -> Decimal



Set: TwoMonths(self: CurrentCapitalLeaseObligationBalanceSheet) = value

"""

    Store = None


class CurrentDebtAndCapitalLeaseObligationBalanceSheet(MultiPeriodField):
    """
    All borrowings due within one year including current portions of long-term debt and capital leases as well as short-term debt such

                as bank loans and commercial paper.



    CurrentDebtAndCapitalLeaseObligationBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CurrentDebtAndCapitalLeaseObligationBalanceSheet) -> Decimal



Set: NineMonths(self: CurrentDebtAndCapitalLeaseObligationBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CurrentDebtAndCapitalLeaseObligationBalanceSheet) -> Decimal



Set: OneMonth(self: CurrentDebtAndCapitalLeaseObligationBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CurrentDebtAndCapitalLeaseObligationBalanceSheet) -> Decimal



Set: SixMonths(self: CurrentDebtAndCapitalLeaseObligationBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CurrentDebtAndCapitalLeaseObligationBalanceSheet) -> Decimal



Set: ThreeMonths(self: CurrentDebtAndCapitalLeaseObligationBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CurrentDebtAndCapitalLeaseObligationBalanceSheet) -> Decimal



Set: TwelveMonths(self: CurrentDebtAndCapitalLeaseObligationBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CurrentDebtAndCapitalLeaseObligationBalanceSheet) -> Decimal



Set: TwoMonths(self: CurrentDebtAndCapitalLeaseObligationBalanceSheet) = value

"""

    Store = None


class CurrentDebtBalanceSheet(MultiPeriodField):
    """
    Represents the total amount of long-term debt such as bank loans and commercial paper, which is due within one year.



    CurrentDebtBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CurrentDebtBalanceSheet) -> Decimal



Set: NineMonths(self: CurrentDebtBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CurrentDebtBalanceSheet) -> Decimal



Set: OneMonth(self: CurrentDebtBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CurrentDebtBalanceSheet) -> Decimal



Set: SixMonths(self: CurrentDebtBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CurrentDebtBalanceSheet) -> Decimal



Set: ThreeMonths(self: CurrentDebtBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CurrentDebtBalanceSheet) -> Decimal



Set: TwelveMonths(self: CurrentDebtBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CurrentDebtBalanceSheet) -> Decimal



Set: TwoMonths(self: CurrentDebtBalanceSheet) = value

"""

    Store = None


class CurrentDeferredAssetsBalanceSheet(MultiPeriodField):
    """
    Payments that will be assigned as expenses with one accounting period, but that are paid in advance and temporarily set up as

                current assets on the balance sheet.



    CurrentDeferredAssetsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CurrentDeferredAssetsBalanceSheet) -> Decimal



Set: NineMonths(self: CurrentDeferredAssetsBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CurrentDeferredAssetsBalanceSheet) -> Decimal



Set: OneMonth(self: CurrentDeferredAssetsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CurrentDeferredAssetsBalanceSheet) -> Decimal



Set: SixMonths(self: CurrentDeferredAssetsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CurrentDeferredAssetsBalanceSheet) -> Decimal



Set: ThreeMonths(self: CurrentDeferredAssetsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CurrentDeferredAssetsBalanceSheet) -> Decimal



Set: TwelveMonths(self: CurrentDeferredAssetsBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CurrentDeferredAssetsBalanceSheet) -> Decimal



Set: TwoMonths(self: CurrentDeferredAssetsBalanceSheet) = value

"""

    Store = None


class CurrentDeferredLiabilitiesBalanceSheet(MultiPeriodField):
    """
    Represents the current portion of obligations, which is a liability that usually would have been paid but is now past due.



    CurrentDeferredLiabilitiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CurrentDeferredLiabilitiesBalanceSheet) -> Decimal



Set: NineMonths(self: CurrentDeferredLiabilitiesBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CurrentDeferredLiabilitiesBalanceSheet) -> Decimal



Set: OneMonth(self: CurrentDeferredLiabilitiesBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CurrentDeferredLiabilitiesBalanceSheet) -> Decimal



Set: SixMonths(self: CurrentDeferredLiabilitiesBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CurrentDeferredLiabilitiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: CurrentDeferredLiabilitiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CurrentDeferredLiabilitiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: CurrentDeferredLiabilitiesBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CurrentDeferredLiabilitiesBalanceSheet) -> Decimal



Set: TwoMonths(self: CurrentDeferredLiabilitiesBalanceSheet) = value

"""

    Store = None


class CurrentDeferredRevenueBalanceSheet(MultiPeriodField):
    """
    Represents collections of cash or other assets related to revenue producing activity for which revenue has not yet been recognized.

                Generally, an entity records deferred revenue when it receives consideration from a customer before achieving certain criteria that

                must be met for revenue to be recognized in conformity with GAAP. It can be either current or non-current item. Also called

                unearned revenue.



    CurrentDeferredRevenueBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CurrentDeferredRevenueBalanceSheet) -> Decimal



Set: NineMonths(self: CurrentDeferredRevenueBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CurrentDeferredRevenueBalanceSheet) -> Decimal



Set: OneMonth(self: CurrentDeferredRevenueBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CurrentDeferredRevenueBalanceSheet) -> Decimal



Set: SixMonths(self: CurrentDeferredRevenueBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CurrentDeferredRevenueBalanceSheet) -> Decimal



Set: ThreeMonths(self: CurrentDeferredRevenueBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CurrentDeferredRevenueBalanceSheet) -> Decimal



Set: TwelveMonths(self: CurrentDeferredRevenueBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CurrentDeferredRevenueBalanceSheet) -> Decimal



Set: TwoMonths(self: CurrentDeferredRevenueBalanceSheet) = value

"""

    Store = None


class CurrentDeferredTaxesAssetsBalanceSheet(MultiPeriodField):
    """
    Meaning a future tax asset, resulting from temporary differences between book (accounting) value of assets and liabilities and their

                tax value, or timing differences between the recognition of gains and losses in financial statements and their recognition in a tax

                computation. It is also called future tax.



    CurrentDeferredTaxesAssetsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CurrentDeferredTaxesAssetsBalanceSheet) -> Decimal



Set: NineMonths(self: CurrentDeferredTaxesAssetsBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CurrentDeferredTaxesAssetsBalanceSheet) -> Decimal



Set: OneMonth(self: CurrentDeferredTaxesAssetsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CurrentDeferredTaxesAssetsBalanceSheet) -> Decimal



Set: SixMonths(self: CurrentDeferredTaxesAssetsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CurrentDeferredTaxesAssetsBalanceSheet) -> Decimal



Set: ThreeMonths(self: CurrentDeferredTaxesAssetsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CurrentDeferredTaxesAssetsBalanceSheet) -> Decimal



Set: TwelveMonths(self: CurrentDeferredTaxesAssetsBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CurrentDeferredTaxesAssetsBalanceSheet) -> Decimal



Set: TwoMonths(self: CurrentDeferredTaxesAssetsBalanceSheet) = value

"""

    Store = None


class CurrentDeferredTaxesLiabilitiesBalanceSheet(MultiPeriodField):
    """
    Meaning a future tax liability, resulting from temporary differences between book (accounting) value of assets and liabilities and

                their tax value, or timing differences between the recognition of gains and losses in financial statements and their recognition in a

                tax computation. Deferred tax liabilities generally arise where tax relief is provided in advance of an accounting expense, or income

                is accrued but not taxed until received.



    CurrentDeferredTaxesLiabilitiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CurrentDeferredTaxesLiabilitiesBalanceSheet) -> Decimal



Set: NineMonths(self: CurrentDeferredTaxesLiabilitiesBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CurrentDeferredTaxesLiabilitiesBalanceSheet) -> Decimal



Set: SixMonths(self: CurrentDeferredTaxesLiabilitiesBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CurrentDeferredTaxesLiabilitiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: CurrentDeferredTaxesLiabilitiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CurrentDeferredTaxesLiabilitiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: CurrentDeferredTaxesLiabilitiesBalanceSheet) = value

"""

    Store = None


class CurrentLiabilitiesBalanceSheet(MultiPeriodField):
    """
    The debts or obligations of the firm that are due within one year.



    CurrentLiabilitiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CurrentLiabilitiesBalanceSheet) -> Decimal



Set: NineMonths(self: CurrentLiabilitiesBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CurrentLiabilitiesBalanceSheet) -> Decimal



Set: OneMonth(self: CurrentLiabilitiesBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CurrentLiabilitiesBalanceSheet) -> Decimal



Set: SixMonths(self: CurrentLiabilitiesBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CurrentLiabilitiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: CurrentLiabilitiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CurrentLiabilitiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: CurrentLiabilitiesBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CurrentLiabilitiesBalanceSheet) -> Decimal



Set: TwoMonths(self: CurrentLiabilitiesBalanceSheet) = value

"""

    Store = None


class CurrentNotesPayableBalanceSheet(MultiPeriodField):
    """
    Written promises to pay a stated sum at one or more specified dates in the future, within the accounting PeriodAsByte.



    CurrentNotesPayableBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CurrentNotesPayableBalanceSheet) -> Decimal



Set: NineMonths(self: CurrentNotesPayableBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CurrentNotesPayableBalanceSheet) -> Decimal



Set: OneMonth(self: CurrentNotesPayableBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CurrentNotesPayableBalanceSheet) -> Decimal



Set: SixMonths(self: CurrentNotesPayableBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CurrentNotesPayableBalanceSheet) -> Decimal



Set: ThreeMonths(self: CurrentNotesPayableBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CurrentNotesPayableBalanceSheet) -> Decimal



Set: TwelveMonths(self: CurrentNotesPayableBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CurrentNotesPayableBalanceSheet) -> Decimal



Set: TwoMonths(self: CurrentNotesPayableBalanceSheet) = value

"""

    Store = None


class CurrentOtherFinancialLiabilitiesBalanceSheet(MultiPeriodField):
    """
    Other short term financial liabilities not categorized and due within one year or a normal operating cycle (whichever is longer).



    CurrentOtherFinancialLiabilitiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CurrentOtherFinancialLiabilitiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: CurrentOtherFinancialLiabilitiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CurrentOtherFinancialLiabilitiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: CurrentOtherFinancialLiabilitiesBalanceSheet) = value

"""

    Store = None


class CurrentProvisionsBalanceSheet(MultiPeriodField):
    """
    Provisions are created to protect the interests of one or both parties named in a contract or legal document which is a preparatory

                action or measure. Current provision is expired within one accounting PeriodAsByte.



    CurrentProvisionsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CurrentProvisionsBalanceSheet) -> Decimal



Set: SixMonths(self: CurrentProvisionsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CurrentProvisionsBalanceSheet) -> Decimal



Set: ThreeMonths(self: CurrentProvisionsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CurrentProvisionsBalanceSheet) -> Decimal



Set: TwelveMonths(self: CurrentProvisionsBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CurrentProvisionsBalanceSheet) -> Decimal



Set: TwoMonths(self: CurrentProvisionsBalanceSheet) = value

"""

    Store = None


class CurrentRatio(MultiPeriodField):
    """
    Refers to the ratio of Current Assets to Current Liabilities. Morningstar calculates the ratio by using the underlying data reported in

                the Balance Sheet within the company filings or reports:     Current Assets / Current Liabilities.



    CurrentRatio(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: CurrentRatio) -> Decimal



Set: NineMonths(self: CurrentRatio) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: CurrentRatio) -> Decimal



Set: OneMonth(self: CurrentRatio) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: CurrentRatio) -> Decimal



Set: OneYear(self: CurrentRatio) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: CurrentRatio) -> Decimal



Set: SixMonths(self: CurrentRatio) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CurrentRatio) -> Decimal



Set: ThreeMonths(self: CurrentRatio) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: CurrentRatio) -> Decimal



Set: TwoMonths(self: CurrentRatio) = value

"""

    Store = None


class CurrentRatioGrowth(MultiPeriodField):
    """
    The growth in the company's current ratio on a percentage basis. Morningstar calculates the growth percentage based on the

                current assets divided by current liabilities reported in the Balance Sheet within the company filings or reports.



    CurrentRatioGrowth(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: CurrentRatioGrowth) -> Decimal



Set: FiveYears(self: CurrentRatioGrowth) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: CurrentRatioGrowth) -> Decimal



Set: OneYear(self: CurrentRatioGrowth) = value

"""

    ThreeYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeYears period value for the field



Get: ThreeYears(self: CurrentRatioGrowth) -> Decimal



Set: ThreeYears(self: CurrentRatioGrowth) = value

"""

    Store = None


class CustomerAcceptancesBalanceSheet(MultiPeriodField):
    """
    Amounts receivable from customers on short-term negotiable time drafts drawn on and accepted by the institution (also known as

                banker's acceptance transactions) that are outstanding on the reporting date.



    CustomerAcceptancesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CustomerAcceptancesBalanceSheet) -> Decimal



Set: ThreeMonths(self: CustomerAcceptancesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CustomerAcceptancesBalanceSheet) -> Decimal



Set: TwelveMonths(self: CustomerAcceptancesBalanceSheet) = value

"""

    Store = None


class CustomerAccountsBalanceSheet(MultiPeriodField):
    """
    Carrying value of amounts transferred by customers to third parties for security purposes that are expected to be returned or

                applied towards payment after one year or beyond the operating cycle, if longer.



    CustomerAccountsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: CustomerAccountsBalanceSheet) -> Decimal



Set: ThreeMonths(self: CustomerAccountsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: CustomerAccountsBalanceSheet) -> Decimal



Set: TwelveMonths(self: CustomerAccountsBalanceSheet) = value

"""

    Store = None


class DaysInInventory(MultiPeriodField):
    """
    365 / Inventory turnover



    DaysInInventory(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: DaysInInventory) -> Decimal



Set: OneYear(self: DaysInInventory) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DaysInInventory) -> Decimal



Set: SixMonths(self: DaysInInventory) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DaysInInventory) -> Decimal



Set: ThreeMonths(self: DaysInInventory) = value

"""

    Store = None


class DaysInPayment(MultiPeriodField):
    """
    365 / Payable turnover



    DaysInPayment(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: DaysInPayment) -> Decimal



Set: OneYear(self: DaysInPayment) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DaysInPayment) -> Decimal



Set: SixMonths(self: DaysInPayment) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DaysInPayment) -> Decimal



Set: ThreeMonths(self: DaysInPayment) = value

"""

    Store = None


class DaysInSales(MultiPeriodField):
    """
    365 / Receivable Turnover



    DaysInSales(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: DaysInSales) -> Decimal



Set: OneYear(self: DaysInSales) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DaysInSales) -> Decimal



Set: SixMonths(self: DaysInSales) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DaysInSales) -> Decimal



Set: ThreeMonths(self: DaysInSales) = value

"""

    Store = None


class DDACostofRevenueIncomeStatement(MultiPeriodField):
    """
    Costs of depreciation and amortization on assets used for the revenue-generating activities during the accounting period



    DDACostofRevenueIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DDACostofRevenueIncomeStatement) -> Decimal



Set: NineMonths(self: DDACostofRevenueIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DDACostofRevenueIncomeStatement) -> Decimal



Set: SixMonths(self: DDACostofRevenueIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DDACostofRevenueIncomeStatement) -> Decimal



Set: ThreeMonths(self: DDACostofRevenueIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DDACostofRevenueIncomeStatement) -> Decimal



Set: TwelveMonths(self: DDACostofRevenueIncomeStatement) = value

"""

    Store = None


class DebtDueBeyondBalanceSheet(MultiPeriodField):
    """
    Debt maturing beyond 5 years (eg. 5-10 years) or with no specified maturity, according to the debt maturity schedule reported by

                the company.



    DebtDueBeyondBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DebtDueBeyondBalanceSheet) -> Decimal



Set: ThreeMonths(self: DebtDueBeyondBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DebtDueBeyondBalanceSheet) -> Decimal



Set: TwelveMonths(self: DebtDueBeyondBalanceSheet) = value

"""

    Store = None


class DebtDueInYear1BalanceSheet(MultiPeriodField):
    """
    Debt due under 1 year according to the debt maturity schedule reported by the company.



    DebtDueInYear1BalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DebtDueInYear1BalanceSheet) -> Decimal



Set: ThreeMonths(self: DebtDueInYear1BalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DebtDueInYear1BalanceSheet) -> Decimal



Set: TwelveMonths(self: DebtDueInYear1BalanceSheet) = value

"""

    Store = None


class DebtDueInYear2BalanceSheet(MultiPeriodField):
    """
    Debt due under 2 years according to the debt maturity schedule reported by the company.



    DebtDueInYear2BalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DebtDueInYear2BalanceSheet) -> Decimal



Set: ThreeMonths(self: DebtDueInYear2BalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DebtDueInYear2BalanceSheet) -> Decimal



Set: TwelveMonths(self: DebtDueInYear2BalanceSheet) = value

"""

    Store = None


class DebtDueInYear5BalanceSheet(MultiPeriodField):
    """
    Debt due within 5 year if the company provide maturity schedule in range e.g. 1-5 years, 2-5 years. Debt due under 5 years

                according to the debt maturity schedule reported by the company. If a range is reported by the company, the value will be collected

                under the maximum number of years (eg. 1-5 years, 3-5 years or 5 years will all be collected under this data point.)



    DebtDueInYear5BalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DebtDueInYear5BalanceSheet) -> Decimal



Set: ThreeMonths(self: DebtDueInYear5BalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DebtDueInYear5BalanceSheet) -> Decimal



Set: TwelveMonths(self: DebtDueInYear5BalanceSheet) = value

"""

    Store = None


class DebtSecuritiesBalanceSheet(MultiPeriodField):
    """
    Debt securities held as investments.



    DebtSecuritiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DebtSecuritiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: DebtSecuritiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DebtSecuritiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: DebtSecuritiesBalanceSheet) = value

"""

    Store = None


class DebtSecuritiesinIssueBalanceSheet(MultiPeriodField):
    """
    Any debt financial instrument issued instead of cash loan.



    DebtSecuritiesinIssueBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DebtSecuritiesinIssueBalanceSheet) -> Decimal



Set: ThreeMonths(self: DebtSecuritiesinIssueBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DebtSecuritiesinIssueBalanceSheet) -> Decimal



Set: TwelveMonths(self: DebtSecuritiesinIssueBalanceSheet) = value

"""

    Store = None


class DebttoAssets(MultiPeriodField):
    """
    This is a leverage ratio used to determine how much debt (a sum of long term and current portion of debt) a company has on its

                balance sheet relative to total assets. This ratio examines the percent of the company that is financed by debt.



    DebttoAssets(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DebttoAssets) -> Decimal



Set: NineMonths(self: DebttoAssets) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: DebttoAssets) -> Decimal



Set: OneMonth(self: DebttoAssets) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: DebttoAssets) -> Decimal



Set: OneYear(self: DebttoAssets) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DebttoAssets) -> Decimal



Set: SixMonths(self: DebttoAssets) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DebttoAssets) -> Decimal



Set: ThreeMonths(self: DebttoAssets) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: DebttoAssets) -> Decimal



Set: TwoMonths(self: DebttoAssets) = value

"""

    Store = None


class DebtTotalBalanceSheet(MultiPeriodField):
    """
    The total aggregate of all written promises and/or agreements to repay a stated amount of borrowed funds at a specified date in

                the future; in a Non-Differentiated Balance Sheet.



    DebtTotalBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DebtTotalBalanceSheet) -> Decimal



Set: ThreeMonths(self: DebtTotalBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DebtTotalBalanceSheet) -> Decimal



Set: TwelveMonths(self: DebtTotalBalanceSheet) = value

"""

    Store = None


class DecreaseinInterestBearingDepositsinBankCashFlowStatement(MultiPeriodField):
    """
    The net change on interest-bearing deposits in other financial institutions for relatively short periods of time including, for example,

                certificates of deposits.



    DecreaseinInterestBearingDepositsinBankCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DecreaseinInterestBearingDepositsinBankCashFlowStatement) -> Decimal



Set: NineMonths(self: DecreaseinInterestBearingDepositsinBankCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DecreaseinInterestBearingDepositsinBankCashFlowStatement) -> Decimal



Set: SixMonths(self: DecreaseinInterestBearingDepositsinBankCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DecreaseinInterestBearingDepositsinBankCashFlowStatement) -> Decimal



Set: ThreeMonths(self: DecreaseinInterestBearingDepositsinBankCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DecreaseinInterestBearingDepositsinBankCashFlowStatement) -> Decimal



Set: TwelveMonths(self: DecreaseinInterestBearingDepositsinBankCashFlowStatement) = value

"""

    Store = None


class DeferredAssetsBalanceSheet(MultiPeriodField):
    """
    An amount owed to a firm that is not expected to be received by the firm within one year from the date of the balance sheet.



    DeferredAssetsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DeferredAssetsBalanceSheet) -> Decimal



Set: NineMonths(self: DeferredAssetsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DeferredAssetsBalanceSheet) -> Decimal



Set: SixMonths(self: DeferredAssetsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DeferredAssetsBalanceSheet) -> Decimal



Set: ThreeMonths(self: DeferredAssetsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DeferredAssetsBalanceSheet) -> Decimal



Set: TwelveMonths(self: DeferredAssetsBalanceSheet) = value

"""

    Store = None


class DeferredCostsBalanceSheet(MultiPeriodField):
    """
    An expenditure not recognized as a cost of operation of the period in which incurred, but carried forward to be written off in future

                periods.



    DeferredCostsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DeferredCostsBalanceSheet) -> Decimal



Set: NineMonths(self: DeferredCostsBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: DeferredCostsBalanceSheet) -> Decimal



Set: OneMonth(self: DeferredCostsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DeferredCostsBalanceSheet) -> Decimal



Set: SixMonths(self: DeferredCostsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DeferredCostsBalanceSheet) -> Decimal



Set: ThreeMonths(self: DeferredCostsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DeferredCostsBalanceSheet) -> Decimal



Set: TwelveMonths(self: DeferredCostsBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: DeferredCostsBalanceSheet) -> Decimal



Set: TwoMonths(self: DeferredCostsBalanceSheet) = value

"""

    Store = None


class DeferredIncomeTaxCashFlowStatement(MultiPeriodField):
    """
    The component of income tax expense for the period representing the net change in the entities deferred tax assets and liabilities

                pertaining to continuing operations.



    DeferredIncomeTaxCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DeferredIncomeTaxCashFlowStatement) -> Decimal



Set: NineMonths(self: DeferredIncomeTaxCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: DeferredIncomeTaxCashFlowStatement) -> Decimal



Set: OneMonth(self: DeferredIncomeTaxCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DeferredIncomeTaxCashFlowStatement) -> Decimal



Set: SixMonths(self: DeferredIncomeTaxCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DeferredIncomeTaxCashFlowStatement) -> Decimal



Set: ThreeMonths(self: DeferredIncomeTaxCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DeferredIncomeTaxCashFlowStatement) -> Decimal



Set: TwelveMonths(self: DeferredIncomeTaxCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: DeferredIncomeTaxCashFlowStatement) -> Decimal



Set: TwoMonths(self: DeferredIncomeTaxCashFlowStatement) = value

"""

    Store = None


class DeferredIncomeTotalBalanceSheet(MultiPeriodField):
    """
    Collections of cash or other assets related to revenue producing activity for which revenue has not yet been recognized on a Non-

                Differentiated Balance Sheet.



    DeferredIncomeTotalBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DeferredIncomeTotalBalanceSheet) -> Decimal



Set: ThreeMonths(self: DeferredIncomeTotalBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DeferredIncomeTotalBalanceSheet) -> Decimal



Set: TwelveMonths(self: DeferredIncomeTotalBalanceSheet) = value

"""

    Store = None


class DeferredPolicyAcquisitionCostsBalanceSheet(MultiPeriodField):
    """
    Net amount of deferred policy acquisition costs capitalized on contracts remaining in force as of the balance sheet date.



    DeferredPolicyAcquisitionCostsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DeferredPolicyAcquisitionCostsBalanceSheet) -> Decimal



Set: NineMonths(self: DeferredPolicyAcquisitionCostsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DeferredPolicyAcquisitionCostsBalanceSheet) -> Decimal



Set: SixMonths(self: DeferredPolicyAcquisitionCostsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DeferredPolicyAcquisitionCostsBalanceSheet) -> Decimal



Set: ThreeMonths(self: DeferredPolicyAcquisitionCostsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DeferredPolicyAcquisitionCostsBalanceSheet) -> Decimal



Set: TwelveMonths(self: DeferredPolicyAcquisitionCostsBalanceSheet) = value

"""

    Store = None


class DeferredTaxAssetsBalanceSheet(MultiPeriodField):
    """
    An asset on a company's balance sheet that may be used to reduce any subsequent period's income tax expense. Deferred tax

                assets can arise due to net loss carryovers, which are only recorded as assets if it is deemed more likely than not that the asset

                will be used in future fiscal periods.



    DeferredTaxAssetsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DeferredTaxAssetsBalanceSheet) -> Decimal



Set: NineMonths(self: DeferredTaxAssetsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DeferredTaxAssetsBalanceSheet) -> Decimal



Set: SixMonths(self: DeferredTaxAssetsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DeferredTaxAssetsBalanceSheet) -> Decimal



Set: ThreeMonths(self: DeferredTaxAssetsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DeferredTaxAssetsBalanceSheet) -> Decimal



Set: TwelveMonths(self: DeferredTaxAssetsBalanceSheet) = value

"""

    Store = None


class DeferredTaxCashFlowStatement(MultiPeriodField):
    """
    Future tax liability or asset, resulting from temporary differences between book (accounting) value of assets and liabilities, and their

                tax value. This arises due to differences between financial accounting for shareholders and tax accounting.



    DeferredTaxCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DeferredTaxCashFlowStatement) -> Decimal



Set: NineMonths(self: DeferredTaxCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: DeferredTaxCashFlowStatement) -> Decimal



Set: OneMonth(self: DeferredTaxCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DeferredTaxCashFlowStatement) -> Decimal



Set: SixMonths(self: DeferredTaxCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DeferredTaxCashFlowStatement) -> Decimal



Set: ThreeMonths(self: DeferredTaxCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DeferredTaxCashFlowStatement) -> Decimal



Set: TwelveMonths(self: DeferredTaxCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: DeferredTaxCashFlowStatement) -> Decimal



Set: TwoMonths(self: DeferredTaxCashFlowStatement) = value

"""

    Store = None


class DeferredTaxLiabilitiesTotalBalanceSheet(MultiPeriodField):
    """
    A future tax liability, resulting from temporary differences between book (accounting) value of assets and liabilities and their tax

                value or timing differences between the recognition of gains and losses in financial statements, on a Non-Differentiated Balance

                Sheet.



    DeferredTaxLiabilitiesTotalBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DeferredTaxLiabilitiesTotalBalanceSheet) -> Decimal



Set: ThreeMonths(self: DeferredTaxLiabilitiesTotalBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DeferredTaxLiabilitiesTotalBalanceSheet) -> Decimal



Set: TwelveMonths(self: DeferredTaxLiabilitiesTotalBalanceSheet) = value

"""

    Store = None


class DefinedPensionBenefitBalanceSheet(MultiPeriodField):
    """
    The recognition of an asset where pension fund assets exceed promised benefits.



    DefinedPensionBenefitBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DefinedPensionBenefitBalanceSheet) -> Decimal



Set: SixMonths(self: DefinedPensionBenefitBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DefinedPensionBenefitBalanceSheet) -> Decimal



Set: ThreeMonths(self: DefinedPensionBenefitBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DefinedPensionBenefitBalanceSheet) -> Decimal



Set: TwelveMonths(self: DefinedPensionBenefitBalanceSheet) = value

"""

    Store = None


class DepletionCashFlowStatement(MultiPeriodField):
    """
    Unlike depreciation and amortization, which mainly describe the deduction of expenses due to the aging of equipment and property,

                depletion is the actual physical reduction of natural resources by companies.   For example, coalmines, oil fields and other natural

                resources are depleted on company accounting statements. This reduction in the quantity of resources is meant to assist in

                accurately identifying the value of the asset on the balance sheet.



    DepletionCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DepletionCashFlowStatement) -> Decimal



Set: NineMonths(self: DepletionCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DepletionCashFlowStatement) -> Decimal



Set: SixMonths(self: DepletionCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DepletionCashFlowStatement) -> Decimal



Set: ThreeMonths(self: DepletionCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DepletionCashFlowStatement) -> Decimal



Set: TwelveMonths(self: DepletionCashFlowStatement) = value

"""

    Store = None


class DepletionIncomeStatement(MultiPeriodField):
    """
    The non-cash expense recognized on natural resources (eg. Oil and mineral deposits) over the benefit period of the asset.



    DepletionIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DepletionIncomeStatement) -> Decimal



Set: NineMonths(self: DepletionIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DepletionIncomeStatement) -> Decimal



Set: SixMonths(self: DepletionIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DepletionIncomeStatement) -> Decimal



Set: ThreeMonths(self: DepletionIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DepletionIncomeStatement) -> Decimal



Set: TwelveMonths(self: DepletionIncomeStatement) = value

"""

    Store = None


class DepositCertificatesBalanceSheet(MultiPeriodField):
    """
    A savings certificate entitling the bearer to receive interest. A CD bears a maturity date, a specified fixed interest rate and can be

                issued in any denomination.



    DepositCertificatesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DepositCertificatesBalanceSheet) -> Decimal



Set: ThreeMonths(self: DepositCertificatesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DepositCertificatesBalanceSheet) -> Decimal



Set: TwelveMonths(self: DepositCertificatesBalanceSheet) = value

"""

    Store = None


class DepositsbyBankBalanceSheet(MultiPeriodField):
    """
    Banks investment in the ongoing entity.



    DepositsbyBankBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DepositsbyBankBalanceSheet) -> Decimal



Set: ThreeMonths(self: DepositsbyBankBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DepositsbyBankBalanceSheet) -> Decimal



Set: TwelveMonths(self: DepositsbyBankBalanceSheet) = value

"""

    Store = None


class DepositsMadeunderAssumedReinsuranceContractBalanceSheet(MultiPeriodField):
    """
    Deposits made under reinsurance.



    DepositsMadeunderAssumedReinsuranceContractBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DepositsMadeunderAssumedReinsuranceContractBalanceSheet) -> Decimal



Set: ThreeMonths(self: DepositsMadeunderAssumedReinsuranceContractBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DepositsMadeunderAssumedReinsuranceContractBalanceSheet) -> Decimal



Set: TwelveMonths(self: DepositsMadeunderAssumedReinsuranceContractBalanceSheet) = value

"""

    Store = None


class DepositsReceivedunderCededInsuranceContractBalanceSheet(MultiPeriodField):
    """
    Deposit received through ceded insurance contract.



    DepositsReceivedunderCededInsuranceContractBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DepositsReceivedunderCededInsuranceContractBalanceSheet) -> Decimal



Set: ThreeMonths(self: DepositsReceivedunderCededInsuranceContractBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DepositsReceivedunderCededInsuranceContractBalanceSheet) -> Decimal



Set: TwelveMonths(self: DepositsReceivedunderCededInsuranceContractBalanceSheet) = value

"""

    Store = None


class DepreciationAmortizationDepletionCashFlowStatement(MultiPeriodField):
    """
    It is a non cash charge that represents a reduction in the value of fixed assets due to wear, age or obsolescence. This figure also

                includes amortization of leased property, intangibles, and goodwill, and depletion. This non-cash item is an add-back to the cash

                flow statement.



    DepreciationAmortizationDepletionCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DepreciationAmortizationDepletionCashFlowStatement) -> Decimal



Set: NineMonths(self: DepreciationAmortizationDepletionCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: DepreciationAmortizationDepletionCashFlowStatement) -> Decimal



Set: OneMonth(self: DepreciationAmortizationDepletionCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DepreciationAmortizationDepletionCashFlowStatement) -> Decimal



Set: SixMonths(self: DepreciationAmortizationDepletionCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DepreciationAmortizationDepletionCashFlowStatement) -> Decimal



Set: ThreeMonths(self: DepreciationAmortizationDepletionCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DepreciationAmortizationDepletionCashFlowStatement) -> Decimal



Set: TwelveMonths(self: DepreciationAmortizationDepletionCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: DepreciationAmortizationDepletionCashFlowStatement) -> Decimal



Set: TwoMonths(self: DepreciationAmortizationDepletionCashFlowStatement) = value

"""

    Store = None


class DepreciationAmortizationDepletionIncomeStatement(MultiPeriodField):
    """
    The sum of depreciation, amortization and depletion expense in the Income Statement.

                Depreciation is the non-cash expense recognized on tangible assets used in the normal course of business, by allocating the cost of

                assets over their useful lives

                Amortization is the non-cash expense recognized on intangible assets over the benefit period of the asset.

                Depletion is the non-cash expense recognized on natural resources (eg. Oil and mineral deposits) over the benefit period of the

                asset.



    DepreciationAmortizationDepletionIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DepreciationAmortizationDepletionIncomeStatement) -> Decimal



Set: NineMonths(self: DepreciationAmortizationDepletionIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: DepreciationAmortizationDepletionIncomeStatement) -> Decimal



Set: OneMonth(self: DepreciationAmortizationDepletionIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DepreciationAmortizationDepletionIncomeStatement) -> Decimal



Set: SixMonths(self: DepreciationAmortizationDepletionIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DepreciationAmortizationDepletionIncomeStatement) -> Decimal



Set: ThreeMonths(self: DepreciationAmortizationDepletionIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DepreciationAmortizationDepletionIncomeStatement) -> Decimal



Set: TwelveMonths(self: DepreciationAmortizationDepletionIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: DepreciationAmortizationDepletionIncomeStatement) -> Decimal



Set: TwoMonths(self: DepreciationAmortizationDepletionIncomeStatement) = value

"""

    Store = None


class DepreciationAndAmortizationCashFlowStatement(MultiPeriodField):
    """
    The current period expense charged against earnings on long-lived, physical assets used in the normal conduct of business and not

                intended for resale to allocate or recognize the cost of assets over their useful lives; or to record the reduction in book value of an

                intangible asset over the benefit period of such asset.



    DepreciationAndAmortizationCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DepreciationAndAmortizationCashFlowStatement) -> Decimal



Set: NineMonths(self: DepreciationAndAmortizationCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: DepreciationAndAmortizationCashFlowStatement) -> Decimal



Set: OneMonth(self: DepreciationAndAmortizationCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DepreciationAndAmortizationCashFlowStatement) -> Decimal



Set: SixMonths(self: DepreciationAndAmortizationCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DepreciationAndAmortizationCashFlowStatement) -> Decimal



Set: ThreeMonths(self: DepreciationAndAmortizationCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DepreciationAndAmortizationCashFlowStatement) -> Decimal



Set: TwelveMonths(self: DepreciationAndAmortizationCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: DepreciationAndAmortizationCashFlowStatement) -> Decimal



Set: TwoMonths(self: DepreciationAndAmortizationCashFlowStatement) = value

"""

    Store = None


class DepreciationAndAmortizationIncomeStatement(MultiPeriodField):
    """
    The sum of depreciation and amortization expense in the Income Statement.

                Depreciation is the non-cash expense recognized on tangible assets used in the normal course of business, by allocating the cost of

                assets over their useful lives

                Amortization is the non-cash expense recognized on intangible assets over the benefit period of the asset.



    DepreciationAndAmortizationIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DepreciationAndAmortizationIncomeStatement) -> Decimal



Set: NineMonths(self: DepreciationAndAmortizationIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: DepreciationAndAmortizationIncomeStatement) -> Decimal



Set: OneMonth(self: DepreciationAndAmortizationIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DepreciationAndAmortizationIncomeStatement) -> Decimal



Set: SixMonths(self: DepreciationAndAmortizationIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DepreciationAndAmortizationIncomeStatement) -> Decimal



Set: ThreeMonths(self: DepreciationAndAmortizationIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DepreciationAndAmortizationIncomeStatement) -> Decimal



Set: TwelveMonths(self: DepreciationAndAmortizationIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: DepreciationAndAmortizationIncomeStatement) -> Decimal



Set: TwoMonths(self: DepreciationAndAmortizationIncomeStatement) = value

"""

    Store = None


class DepreciationCashFlowStatement(MultiPeriodField):
    """
    An expense recorded to allocate a tangible asset's cost over its useful life. Since it is a non-cash expense, it increases free cash

                flow while decreasing reported earnings.



    DepreciationCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DepreciationCashFlowStatement) -> Decimal



Set: NineMonths(self: DepreciationCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: DepreciationCashFlowStatement) -> Decimal



Set: OneMonth(self: DepreciationCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DepreciationCashFlowStatement) -> Decimal



Set: SixMonths(self: DepreciationCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DepreciationCashFlowStatement) -> Decimal



Set: ThreeMonths(self: DepreciationCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DepreciationCashFlowStatement) -> Decimal



Set: TwelveMonths(self: DepreciationCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: DepreciationCashFlowStatement) -> Decimal



Set: TwoMonths(self: DepreciationCashFlowStatement) = value

"""

    Store = None


class DepreciationIncomeStatement(MultiPeriodField):
    """
    The current period non-cash expense recognized on tangible assets used in the normal course of business, by allocating the cost of

                assets over their useful lives, in the Income Statement. Examples of tangible asset include buildings, production and equipment.



    DepreciationIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DepreciationIncomeStatement) -> Decimal



Set: NineMonths(self: DepreciationIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: DepreciationIncomeStatement) -> Decimal



Set: OneMonth(self: DepreciationIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DepreciationIncomeStatement) -> Decimal



Set: SixMonths(self: DepreciationIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DepreciationIncomeStatement) -> Decimal



Set: ThreeMonths(self: DepreciationIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DepreciationIncomeStatement) -> Decimal



Set: TwelveMonths(self: DepreciationIncomeStatement) = value

"""

    Store = None


class DepreciationSupplementalIncomeStatement(MultiPeriodField):
    """
    The current period expense charged against earnings on tangible asset over its useful life. It is a supplemental value which would

                be reported outside consolidated statements.



    DepreciationSupplementalIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DepreciationSupplementalIncomeStatement) -> Decimal



Set: NineMonths(self: DepreciationSupplementalIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DepreciationSupplementalIncomeStatement) -> Decimal



Set: SixMonths(self: DepreciationSupplementalIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DepreciationSupplementalIncomeStatement) -> Decimal



Set: ThreeMonths(self: DepreciationSupplementalIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DepreciationSupplementalIncomeStatement) -> Decimal



Set: TwelveMonths(self: DepreciationSupplementalIncomeStatement) = value

"""

    Store = None


class DerivativeAssetsBalanceSheet(MultiPeriodField):
    """
    Fair values of assets resulting from contracts that meet the criteria of being accounted for as derivative instruments, net of the

                effects of master netting arrangements.



    DerivativeAssetsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DerivativeAssetsBalanceSheet) -> Decimal



Set: SixMonths(self: DerivativeAssetsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DerivativeAssetsBalanceSheet) -> Decimal



Set: ThreeMonths(self: DerivativeAssetsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DerivativeAssetsBalanceSheet) -> Decimal



Set: TwelveMonths(self: DerivativeAssetsBalanceSheet) = value

"""

    Store = None


class DerivativeProductLiabilitiesBalanceSheet(MultiPeriodField):
    """
    Fair values of all liabilities resulting from contracts that meet the criteria of being accounted for as derivative instruments; and

                which are expected to be extinguished or otherwise disposed of after one year or beyond the normal operating cycle.



    DerivativeProductLiabilitiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DerivativeProductLiabilitiesBalanceSheet) -> Decimal



Set: NineMonths(self: DerivativeProductLiabilitiesBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: DerivativeProductLiabilitiesBalanceSheet) -> Decimal



Set: OneMonth(self: DerivativeProductLiabilitiesBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DerivativeProductLiabilitiesBalanceSheet) -> Decimal



Set: SixMonths(self: DerivativeProductLiabilitiesBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DerivativeProductLiabilitiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: DerivativeProductLiabilitiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DerivativeProductLiabilitiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: DerivativeProductLiabilitiesBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: DerivativeProductLiabilitiesBalanceSheet) -> Decimal



Set: TwoMonths(self: DerivativeProductLiabilitiesBalanceSheet) = value

"""

    Store = None


class DilutedAccountingChange(MultiPeriodField):
    """
    Diluted EPS from Cumulative Effect Accounting Changes is the earnings from accounting changes (in the reporting period) divided

                by the common shares outstanding adjusted for the assumed conversion of all potentially dilutive securities. Securities having a

                dilutive effect may include convertible debentures, warrants, options, and convertible preferred stock.



    DilutedAccountingChange(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DilutedAccountingChange) -> Decimal



Set: NineMonths(self: DilutedAccountingChange) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DilutedAccountingChange) -> Decimal



Set: SixMonths(self: DilutedAccountingChange) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DilutedAccountingChange) -> Decimal



Set: ThreeMonths(self: DilutedAccountingChange) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DilutedAccountingChange) -> Decimal



Set: TwelveMonths(self: DilutedAccountingChange) = value

"""

    Store = None


class DilutedAverageShares(MultiPeriodField):
    """
    The shares outstanding used to calculate the diluted EPS, assuming the conversion of all convertible securities and the exercise of

                warrants or stock options. It is the weighted average diluted share outstanding through the whole accounting PeriodAsByte.  Note: If

                Diluted Average Shares are not presented by the firm in the Income Statement and Basic Average Shares are presented, Diluted

                Average Shares will equal Basic Average Shares.  However, if neither value is presented by the firm, Diluted Average Shares will be

                null.



    DilutedAverageShares(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DilutedAverageShares) -> Decimal



Set: NineMonths(self: DilutedAverageShares) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: DilutedAverageShares) -> Decimal



Set: OneMonth(self: DilutedAverageShares) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DilutedAverageShares) -> Decimal



Set: SixMonths(self: DilutedAverageShares) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DilutedAverageShares) -> Decimal



Set: ThreeMonths(self: DilutedAverageShares) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DilutedAverageShares) -> Decimal



Set: TwelveMonths(self: DilutedAverageShares) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: DilutedAverageShares) -> Decimal



Set: TwoMonths(self: DilutedAverageShares) = value

"""

    Store = None


class DilutedContEPSGrowth(MultiPeriodField):
    """
    The growth in the company's diluted EPS from continuing operations on a percentage basis. Morningstar calculates the annualized

                growth percentage based on the underlying diluted EPS from continuing operations reported in the Income Statement within the

                company filings or reports.



    DilutedContEPSGrowth(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: DilutedContEPSGrowth) -> Decimal



Set: FiveYears(self: DilutedContEPSGrowth) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: DilutedContEPSGrowth) -> Decimal



Set: OneYear(self: DilutedContEPSGrowth) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DilutedContEPSGrowth) -> Decimal



Set: ThreeMonths(self: DilutedContEPSGrowth) = value

"""

    ThreeYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeYears period value for the field



Get: ThreeYears(self: DilutedContEPSGrowth) -> Decimal



Set: ThreeYears(self: DilutedContEPSGrowth) = value

"""

    Store = None


class DilutedContinuousOperations(MultiPeriodField):
    """
    Diluted EPS from Continuing Operations is the earnings from continuing operations divided by the common shares outstanding

                adjusted for the assumed conversion of all potentially dilutive securities.  Securities having a dilutive effect may include convertible

                debentures, warrants, options, and convertible preferred stock.



    DilutedContinuousOperations(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DilutedContinuousOperations) -> Decimal



Set: NineMonths(self: DilutedContinuousOperations) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: DilutedContinuousOperations) -> Decimal



Set: OneMonth(self: DilutedContinuousOperations) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DilutedContinuousOperations) -> Decimal



Set: SixMonths(self: DilutedContinuousOperations) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DilutedContinuousOperations) -> Decimal



Set: ThreeMonths(self: DilutedContinuousOperations) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DilutedContinuousOperations) -> Decimal



Set: TwelveMonths(self: DilutedContinuousOperations) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: DilutedContinuousOperations) -> Decimal



Set: TwoMonths(self: DilutedContinuousOperations) = value

"""

    Store = None


class DilutedDiscontinuousOperations(MultiPeriodField):
    """
    Diluted EPS from Discontinued Operations is the earnings from discontinued operations divided by the common shares outstanding

                adjusted for the assumed conversion of all potentially dilutive securities. Securities having a dilutive effect may include convertible

                debentures, warrants, options, and convertible preferred stock. This only includes gain or loss from discontinued operations.



    DilutedDiscontinuousOperations(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DilutedDiscontinuousOperations) -> Decimal



Set: NineMonths(self: DilutedDiscontinuousOperations) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: DilutedDiscontinuousOperations) -> Decimal



Set: OneMonth(self: DilutedDiscontinuousOperations) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DilutedDiscontinuousOperations) -> Decimal



Set: SixMonths(self: DilutedDiscontinuousOperations) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DilutedDiscontinuousOperations) -> Decimal



Set: ThreeMonths(self: DilutedDiscontinuousOperations) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DilutedDiscontinuousOperations) -> Decimal



Set: TwelveMonths(self: DilutedDiscontinuousOperations) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: DilutedDiscontinuousOperations) -> Decimal



Set: TwoMonths(self: DilutedDiscontinuousOperations) = value

"""

    Store = None


class DilutedEPS(MultiPeriodField):
    """
    Diluted EPS is the bottom line net income divided by the common shares outstanding adjusted for the assumed conversion of all

                potentially dilutive securities. Securities having a dilutive effect may include convertible debentures, warrants, options, and

                convertible preferred stock. This value will be derived when not reported for the fourth quarter and will be less than or equal to

                Basic EPS.



    DilutedEPS(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DilutedEPS) -> Decimal



Set: NineMonths(self: DilutedEPS) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: DilutedEPS) -> Decimal



Set: OneMonth(self: DilutedEPS) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DilutedEPS) -> Decimal



Set: SixMonths(self: DilutedEPS) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DilutedEPS) -> Decimal



Set: ThreeMonths(self: DilutedEPS) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DilutedEPS) -> Decimal



Set: TwelveMonths(self: DilutedEPS) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: DilutedEPS) -> Decimal



Set: TwoMonths(self: DilutedEPS) = value

"""

    Store = None


class DilutedEPSGrowth(MultiPeriodField):
    """
    The growth in the company's diluted earnings per share (EPS) on a percentage basis. Morningstar calculates the annualized growth

                percentage based on the underlying diluted EPS reported in the Income Statement within the company filings or reports.



    DilutedEPSGrowth(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: DilutedEPSGrowth) -> Decimal



Set: FiveYears(self: DilutedEPSGrowth) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: DilutedEPSGrowth) -> Decimal



Set: OneYear(self: DilutedEPSGrowth) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DilutedEPSGrowth) -> Decimal



Set: ThreeMonths(self: DilutedEPSGrowth) = value

"""

    ThreeYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeYears period value for the field



Get: ThreeYears(self: DilutedEPSGrowth) -> Decimal



Set: ThreeYears(self: DilutedEPSGrowth) = value

"""

    Store = None


class DilutedEPSOtherGainsLosses(MultiPeriodField):
    """
    The earnings from gains and losses (in the reporting period) divided by the common shares outstanding adjusted for the assumed

                conversion of all potentially dilutive securities. Securities having a dilutive effect may include convertible debentures, warrants,

                options, convertible preferred stock, etc.



    DilutedEPSOtherGainsLosses(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DilutedEPSOtherGainsLosses) -> Decimal



Set: NineMonths(self: DilutedEPSOtherGainsLosses) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DilutedEPSOtherGainsLosses) -> Decimal



Set: SixMonths(self: DilutedEPSOtherGainsLosses) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DilutedEPSOtherGainsLosses) -> Decimal



Set: ThreeMonths(self: DilutedEPSOtherGainsLosses) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DilutedEPSOtherGainsLosses) -> Decimal



Set: TwelveMonths(self: DilutedEPSOtherGainsLosses) = value

"""

    Store = None


class DilutedExtraordinary(MultiPeriodField):
    """
    Diluted EPS from Extraordinary Gain/Losses is the gain or loss from extraordinary items divided by the common shares outstanding

                adjusted for the assumed conversion of all potentially dilutive securities. Securities having a dilutive effect may include convertible

                debentures, warrants, options, and convertible preferred stock.



    DilutedExtraordinary(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DilutedExtraordinary) -> Decimal



Set: NineMonths(self: DilutedExtraordinary) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: DilutedExtraordinary) -> Decimal



Set: OneMonth(self: DilutedExtraordinary) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DilutedExtraordinary) -> Decimal



Set: SixMonths(self: DilutedExtraordinary) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DilutedExtraordinary) -> Decimal



Set: ThreeMonths(self: DilutedExtraordinary) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DilutedExtraordinary) -> Decimal



Set: TwelveMonths(self: DilutedExtraordinary) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: DilutedExtraordinary) -> Decimal



Set: TwoMonths(self: DilutedExtraordinary) = value

"""

    Store = None


class DilutedNIAvailtoComStockholdersIncomeStatement(MultiPeriodField):
    """
    Net income to calculate Diluted EPS, accounting for adjustments assuming that all the convertible instruments are being converted

                to Common Equity.



    DilutedNIAvailtoComStockholdersIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DilutedNIAvailtoComStockholdersIncomeStatement) -> Decimal



Set: NineMonths(self: DilutedNIAvailtoComStockholdersIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DilutedNIAvailtoComStockholdersIncomeStatement) -> Decimal



Set: SixMonths(self: DilutedNIAvailtoComStockholdersIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DilutedNIAvailtoComStockholdersIncomeStatement) -> Decimal



Set: ThreeMonths(self: DilutedNIAvailtoComStockholdersIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DilutedNIAvailtoComStockholdersIncomeStatement) -> Decimal



Set: TwelveMonths(self: DilutedNIAvailtoComStockholdersIncomeStatement) = value

"""

    Store = None


class DividendCoverageRatio(MultiPeriodField):
    """
    Reflects a firm's capacity to pay a dividend, and is defined as Earnings Per Share / Dividend Per Share



    DividendCoverageRatio(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DividendCoverageRatio) -> Decimal



Set: NineMonths(self: DividendCoverageRatio) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DividendCoverageRatio) -> Decimal



Set: SixMonths(self: DividendCoverageRatio) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DividendCoverageRatio) -> Decimal



Set: ThreeMonths(self: DividendCoverageRatio) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DividendCoverageRatio) -> Decimal



Set: TwelveMonths(self: DividendCoverageRatio) = value

"""

    Store = None


class DividendIncomeIncomeStatement(MultiPeriodField):
    """
    Dividends earned from equity investment securities. This item is usually only available for bank industry.



    DividendIncomeIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DividendIncomeIncomeStatement) -> Decimal



Set: NineMonths(self: DividendIncomeIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: DividendIncomeIncomeStatement) -> Decimal



Set: OneMonth(self: DividendIncomeIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DividendIncomeIncomeStatement) -> Decimal



Set: SixMonths(self: DividendIncomeIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DividendIncomeIncomeStatement) -> Decimal



Set: ThreeMonths(self: DividendIncomeIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DividendIncomeIncomeStatement) -> Decimal



Set: TwelveMonths(self: DividendIncomeIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: DividendIncomeIncomeStatement) -> Decimal



Set: TwoMonths(self: DividendIncomeIncomeStatement) = value

"""

    Store = None


class DividendPaidCFOCashFlowStatement(MultiPeriodField):
    """
    Dividend paid to the investors, in the Operating Cash Flow section.



    DividendPaidCFOCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DividendPaidCFOCashFlowStatement) -> Decimal



Set: TwelveMonths(self: DividendPaidCFOCashFlowStatement) = value

"""

    Store = None


class DividendPerShare(MultiPeriodField):
    """
    The amount of dividend that a stockholder will receive for each share of stock held. It can be calculated by taking the total amount

                of dividends paid and dividing it by the total shares outstanding. Dividend per share = total dividend payment/total number of

                outstanding shares



    DividendPerShare(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DividendPerShare) -> Decimal



Set: NineMonths(self: DividendPerShare) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: DividendPerShare) -> Decimal



Set: OneMonth(self: DividendPerShare) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DividendPerShare) -> Decimal



Set: SixMonths(self: DividendPerShare) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DividendPerShare) -> Decimal



Set: ThreeMonths(self: DividendPerShare) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DividendPerShare) -> Decimal



Set: TwelveMonths(self: DividendPerShare) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: DividendPerShare) -> Decimal



Set: TwoMonths(self: DividendPerShare) = value

"""

    Store = None


class DividendReceivedCFOCashFlowStatement(MultiPeriodField):
    """
    Dividend received on investment, in the Operating Cash Flow section.



    DividendReceivedCFOCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DividendReceivedCFOCashFlowStatement) -> Decimal



Set: SixMonths(self: DividendReceivedCFOCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DividendReceivedCFOCashFlowStatement) -> Decimal



Set: TwelveMonths(self: DividendReceivedCFOCashFlowStatement) = value

"""

    Store = None


class DividendsPaidDirectCashFlowStatement(MultiPeriodField):
    """
    Dividend paid to the investors, for the direct cash flow.



    DividendsPaidDirectCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DividendsPaidDirectCashFlowStatement) -> Decimal



Set: TwelveMonths(self: DividendsPaidDirectCashFlowStatement) = value

"""

    Store = None


class DividendsPayableBalanceSheet(MultiPeriodField):
    """
    Sum of the carrying values of dividends declared but unpaid on equity securities issued and outstanding (also includes dividends

                collected on behalf of another owner of securities that are being held by entity) by the entity.



    DividendsPayableBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DividendsPayableBalanceSheet) -> Decimal



Set: NineMonths(self: DividendsPayableBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: DividendsPayableBalanceSheet) -> Decimal



Set: OneMonth(self: DividendsPayableBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DividendsPayableBalanceSheet) -> Decimal



Set: ThreeMonths(self: DividendsPayableBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DividendsPayableBalanceSheet) -> Decimal



Set: TwelveMonths(self: DividendsPayableBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: DividendsPayableBalanceSheet) -> Decimal



Set: TwoMonths(self: DividendsPayableBalanceSheet) = value

"""

    Store = None


class DividendsReceivedCFICashFlowStatement(MultiPeriodField):
    """
    Dividend received on investment, in the Investing Cash Flow section.



    DividendsReceivedCFICashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DividendsReceivedCFICashFlowStatement) -> Decimal



Set: NineMonths(self: DividendsReceivedCFICashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DividendsReceivedCFICashFlowStatement) -> Decimal



Set: SixMonths(self: DividendsReceivedCFICashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DividendsReceivedCFICashFlowStatement) -> Decimal



Set: ThreeMonths(self: DividendsReceivedCFICashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DividendsReceivedCFICashFlowStatement) -> Decimal



Set: TwelveMonths(self: DividendsReceivedCFICashFlowStatement) = value

"""

    Store = None


class DividendsReceivedDirectCashFlowStatement(MultiPeriodField):
    """
    Dividend received on the investment, for the direct cash flow.



    DividendsReceivedDirectCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: DividendsReceivedDirectCashFlowStatement) -> Decimal



Set: NineMonths(self: DividendsReceivedDirectCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: DividendsReceivedDirectCashFlowStatement) -> Decimal



Set: SixMonths(self: DividendsReceivedDirectCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DividendsReceivedDirectCashFlowStatement) -> Decimal



Set: ThreeMonths(self: DividendsReceivedDirectCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DividendsReceivedDirectCashFlowStatement) -> Decimal



Set: TwelveMonths(self: DividendsReceivedDirectCashFlowStatement) = value

"""

    Store = None


class DPSGrowth(MultiPeriodField):
    """
    The growth in the company's dividends per share (DPS) on a percentage basis. Morningstar calculates the annualized growth

                percentage based on the underlying DPS from its dividend database.  Morningstar collects its DPS from company filings and

                reports, as well as from third party sources.



    DPSGrowth(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: DPSGrowth) -> Decimal



Set: FiveYears(self: DPSGrowth) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: DPSGrowth) -> Decimal



Set: OneYear(self: DPSGrowth) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DPSGrowth) -> Decimal



Set: ThreeMonths(self: DPSGrowth) = value

"""

    ThreeYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeYears period value for the field



Get: ThreeYears(self: DPSGrowth) -> Decimal



Set: ThreeYears(self: DPSGrowth) = value

"""

    Store = None


class DueFromRelatedPartiesBalanceSheet(MultiPeriodField):
    """
    For an unclassified balance sheet, carrying amount as of the balance sheet date of obligations due all related parties.



    DueFromRelatedPartiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DueFromRelatedPartiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: DueFromRelatedPartiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DueFromRelatedPartiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: DueFromRelatedPartiesBalanceSheet) = value

"""

    Store = None


class DuefromRelatedPartiesCurrentBalanceSheet(MultiPeriodField):
    """
    Amounts owed to the company from a non-arm's length entity, due within the company's current operating cycle.



    DuefromRelatedPartiesCurrentBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DuefromRelatedPartiesCurrentBalanceSheet) -> Decimal



Set: ThreeMonths(self: DuefromRelatedPartiesCurrentBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DuefromRelatedPartiesCurrentBalanceSheet) -> Decimal



Set: TwelveMonths(self: DuefromRelatedPartiesCurrentBalanceSheet) = value

"""

    Store = None


class DuefromRelatedPartiesNonCurrentBalanceSheet(MultiPeriodField):
    """
    Amounts owed to the company from a non-arm's length entity, due after the company's current operating cycle.



    DuefromRelatedPartiesNonCurrentBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DuefromRelatedPartiesNonCurrentBalanceSheet) -> Decimal



Set: ThreeMonths(self: DuefromRelatedPartiesNonCurrentBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DuefromRelatedPartiesNonCurrentBalanceSheet) -> Decimal



Set: TwelveMonths(self: DuefromRelatedPartiesNonCurrentBalanceSheet) = value

"""

    Store = None


class DuetoRelatedPartiesBalanceSheet(MultiPeriodField):
    """
    Amounts owed by the company to a non-arm's length entity.



    DuetoRelatedPartiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DuetoRelatedPartiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: DuetoRelatedPartiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DuetoRelatedPartiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: DuetoRelatedPartiesBalanceSheet) = value

"""

    Store = None


class DuetoRelatedPartiesCurrentBalanceSheet(MultiPeriodField):
    """
    Amounts owed by the company to a non-arm's length entity that has to be repaid within the company's current operating cycle.



    DuetoRelatedPartiesCurrentBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DuetoRelatedPartiesCurrentBalanceSheet) -> Decimal



Set: ThreeMonths(self: DuetoRelatedPartiesCurrentBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DuetoRelatedPartiesCurrentBalanceSheet) -> Decimal



Set: TwelveMonths(self: DuetoRelatedPartiesCurrentBalanceSheet) = value

"""

    Store = None


class DuetoRelatedPartiesNonCurrentBalanceSheet(MultiPeriodField):
    """
    Amounts owed by the company to a non-arm's length entity that has to be repaid after the company's current operating cycle.



    DuetoRelatedPartiesNonCurrentBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: DuetoRelatedPartiesNonCurrentBalanceSheet) -> Decimal



Set: ThreeMonths(self: DuetoRelatedPartiesNonCurrentBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: DuetoRelatedPartiesNonCurrentBalanceSheet) -> Decimal



Set: TwelveMonths(self: DuetoRelatedPartiesNonCurrentBalanceSheet) = value

"""

    Store = None


class EarningRatios(object):
    """
    Definition of the EarningRatios class



    EarningRatios()
    """

    def UpdateValues(self, update):
        """
        UpdateValues(self: EarningRatios, update: EarningRatios)

            Applies updated values from update to this

             instance





            update: The next data update for this instance
        """
        pass

    BookValuePerShareGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the company's book value per share on a percentage basis. Morningstar calculates the growth percentage based on

            the common shareholder's equity reported in the Balance Sheet divided by the diluted shares outstanding within the company

            filings or reports.



Get: BookValuePerShareGrowth(self: EarningRatios) -> BookValuePerShareGrowth



Set: BookValuePerShareGrowth(self: EarningRatios) = value

"""

    DilutedContEPSGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the company's diluted EPS from continuing operations on a percentage basis. Morningstar calculates the annualized

            growth percentage based on the underlying diluted EPS from continuing operations reported in the Income Statement within the

            company filings or reports.



Get: DilutedContEPSGrowth(self: EarningRatios) -> DilutedContEPSGrowth



Set: DilutedContEPSGrowth(self: EarningRatios) = value

"""

    DilutedEPSGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the company's diluted earnings per share (EPS) on a percentage basis. Morningstar calculates the annualized growth

            percentage based on the underlying diluted EPS reported in the Income Statement within the company filings or reports.



Get: DilutedEPSGrowth(self: EarningRatios) -> DilutedEPSGrowth



Set: DilutedEPSGrowth(self: EarningRatios) = value

"""

    DPSGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the company's dividends per share (DPS) on a percentage basis. Morningstar calculates the annualized growth

            percentage based on the underlying DPS from its dividend database.  Morningstar collects its DPS from company filings and

            reports, as well as from third party sources.



Get: DPSGrowth(self: EarningRatios) -> DPSGrowth



Set: DPSGrowth(self: EarningRatios) = value

"""

    EquityPerShareGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the company's book value per share on a percentage basis. Morningstar calculates the annualized growth

            percentage based on the underlying equity and end of period shares outstanding reported in the company filings or reports.



Get: EquityPerShareGrowth(self: EarningRatios) -> EquityPerShareGrowth



Set: EquityPerShareGrowth(self: EarningRatios) = value

"""

    FCFPerShareGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the company's free cash flow per share on a percentage basis. Morningstar calculates the growth percentage based

            on the free cash flow divided by average diluted shares outstanding reported in the Financial Statements within the company filings

            or reports.



Get: FCFPerShareGrowth(self: EarningRatios) -> FCFPerShareGrowth



Set: FCFPerShareGrowth(self: EarningRatios) = value

"""

    NormalizedBasicEPSGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the company's Normalized Basic EPS on a percentage basis.



Get: NormalizedBasicEPSGrowth(self: EarningRatios) -> NormalizedBasicEPSGrowth



Set: NormalizedBasicEPSGrowth(self: EarningRatios) = value

"""

    NormalizedDilutedEPSGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the company's Normalized Diluted EPS on a percentage basis.



Get: NormalizedDilutedEPSGrowth(self: EarningRatios) -> NormalizedDilutedEPSGrowth



Set: NormalizedDilutedEPSGrowth(self: EarningRatios) = value

"""

    RegressionGrowthofDividends5Years = property(lambda self: object(), lambda self, v: None,
                                                 lambda self: None)  # default
    """The five-year growth rate of dividends per share, calculated using regression analysis.



Get: RegressionGrowthofDividends5Years(self: EarningRatios) -> RegressionGrowthofDividends5Years



Set: RegressionGrowthofDividends5Years(self: EarningRatios) = value

"""


class EarningReports(object):
    """
    Definition of the EarningReports class



    EarningReports()
    """

    def UpdateValues(self, update):
        """
        UpdateValues(self: EarningReports, update: EarningReports)

            Applies updated values from update to this

             instance





            update: The next data update for this instance
        """
        pass

    AccessionNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The accession number is a unique number that EDGAR assigns to each submission as the submission is received.



Get: AccessionNumber(self: EarningReports) -> str



Set: AccessionNumber(self: EarningReports) = value

"""

    BasicAccountingChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Basic EPS from the Cumulative Effect of Accounting Change is the earnings attributable to the accounting change (during the

            reporting period) divided by the weighted average number of common shares outstanding.



Get: BasicAccountingChange(self: EarningReports) -> BasicAccountingChange



Set: BasicAccountingChange(self: EarningReports) = value

"""

    BasicAverageShares = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The shares outstanding used to calculate Basic EPS, which is the weighted average common share outstanding through the whole

            accounting period.  Note: If Basic Average Shares are not presented by the firm in the Income Statement, this data point will be

            null.



Get: BasicAverageShares(self: EarningReports) -> BasicAverageShares



Set: BasicAverageShares(self: EarningReports) = value

"""

    BasicContinuousOperations = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Basic EPS from Continuing Operations is the earnings from continuing operations reported by the company divided by the weighted

            average number of common shares outstanding.



Get: BasicContinuousOperations(self: EarningReports) -> BasicContinuousOperations



Set: BasicContinuousOperations(self: EarningReports) = value

"""

    BasicDiscontinuousOperations = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Basic EPS from Discontinued Operations is the earnings from discontinued operations reported by the company divided by the

            weighted average number of common shares outstanding. This only includes gain or loss from discontinued operations.



Get: BasicDiscontinuousOperations(self: EarningReports) -> BasicDiscontinuousOperations



Set: BasicDiscontinuousOperations(self: EarningReports) = value

"""

    BasicEPS = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Basic EPS is the bottom line net income divided by the weighted average number of common shares outstanding.



Get: BasicEPS(self: EarningReports) -> BasicEPS



Set: BasicEPS(self: EarningReports) = value

"""

    BasicEPSOtherGainsLosses = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Basic EPS from the Other Gains/Losses is the earnings attributable to the other gains/losses (during the reporting period) divided by

            the weighted average number of common shares outstanding.



Get: BasicEPSOtherGainsLosses(self: EarningReports) -> BasicEPSOtherGainsLosses



Set: BasicEPSOtherGainsLosses(self: EarningReports) = value

"""

    BasicExtraordinary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Basic EPS from the Extraordinary Gains/Losses is the earnings attributable to the gains or losses (during the reporting period) from

            extraordinary items divided by the weighted average number of common shares outstanding.



Get: BasicExtraordinary(self: EarningReports) -> BasicExtraordinary



Set: BasicExtraordinary(self: EarningReports) = value

"""

    ContinuingAndDiscontinuedBasicEPS = property(lambda self: object(), lambda self, v: None,
                                                 lambda self: None)  # default
    """Basic EPS from Continuing Operations plus Basic EPS from Discontinued Operations.



Get: ContinuingAndDiscontinuedBasicEPS(self: EarningReports) -> ContinuingAndDiscontinuedBasicEPS



Set: ContinuingAndDiscontinuedBasicEPS(self: EarningReports) = value

"""

    ContinuingAndDiscontinuedDilutedEPS = property(lambda self: object(), lambda self, v: None,
                                                   lambda self: None)  # default
    """Diluted EPS from Continuing Operations plus Diluted EPS from Discontinued Operations.



Get: ContinuingAndDiscontinuedDilutedEPS(self: EarningReports) -> ContinuingAndDiscontinuedDilutedEPS



Set: ContinuingAndDiscontinuedDilutedEPS(self: EarningReports) = value

"""

    DilutedAccountingChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Diluted EPS from Cumulative Effect Accounting Changes is the earnings from accounting changes (in the reporting period) divided

            by the common shares outstanding adjusted for the assumed conversion of all potentially dilutive securities. Securities having a

            dilutive effect may include convertible debentures, warrants, options, and convertible preferred stock.



Get: DilutedAccountingChange(self: EarningReports) -> DilutedAccountingChange



Set: DilutedAccountingChange(self: EarningReports) = value

"""

    DilutedAverageShares = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The shares outstanding used to calculate the diluted EPS, assuming the conversion of all convertible securities and the exercise of

            warrants or stock options. It is the weighted average diluted share outstanding through the whole accounting period.  Note: If

            Diluted Average Shares are not presented by the firm in the Income Statement and Basic Average Shares are presented, Diluted

            Average Shares will equal Basic Average Shares.  However, if neither value is presented by the firm, Diluted Average Shares will be

            null.



Get: DilutedAverageShares(self: EarningReports) -> DilutedAverageShares



Set: DilutedAverageShares(self: EarningReports) = value

"""

    DilutedContinuousOperations = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Diluted EPS from Continuing Operations is the earnings from continuing operations divided by the common shares outstanding

            adjusted for the assumed conversion of all potentially dilutive securities.  Securities having a dilutive effect may include convertible

            debentures, warrants, options, and convertible preferred stock.



Get: DilutedContinuousOperations(self: EarningReports) -> DilutedContinuousOperations



Set: DilutedContinuousOperations(self: EarningReports) = value

"""

    DilutedDiscontinuousOperations = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Diluted EPS from Discontinued Operations is the earnings from discontinued operations divided by the common shares outstanding

            adjusted for the assumed conversion of all potentially dilutive securities. Securities having a dilutive effect may include convertible

            debentures, warrants, options, and convertible preferred stock. This only includes gain or loss from discontinued operations.



Get: DilutedDiscontinuousOperations(self: EarningReports) -> DilutedDiscontinuousOperations



Set: DilutedDiscontinuousOperations(self: EarningReports) = value

"""

    DilutedEPS = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Diluted EPS is the bottom line net income divided by the common shares outstanding adjusted for the assumed conversion of all

            potentially dilutive securities. Securities having a dilutive effect may include convertible debentures, warrants, options, and

            convertible preferred stock. This value will be derived when not reported for the fourth quarter and will be less than or equal to

            Basic EPS.



Get: DilutedEPS(self: EarningReports) -> DilutedEPS



Set: DilutedEPS(self: EarningReports) = value

"""

    DilutedEPSOtherGainsLosses = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The earnings from gains and losses (in the reporting period) divided by the common shares outstanding adjusted for the assumed

            conversion of all potentially dilutive securities. Securities having a dilutive effect may include convertible debentures, warrants,

            options, convertible preferred stock, etc.



Get: DilutedEPSOtherGainsLosses(self: EarningReports) -> DilutedEPSOtherGainsLosses



Set: DilutedEPSOtherGainsLosses(self: EarningReports) = value

"""

    DilutedExtraordinary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Diluted EPS from Extraordinary Gain/Losses is the gain or loss from extraordinary items divided by the common shares outstanding

            adjusted for the assumed conversion of all potentially dilutive securities. Securities having a dilutive effect may include convertible

            debentures, warrants, options, and convertible preferred stock.



Get: DilutedExtraordinary(self: EarningReports) -> DilutedExtraordinary



Set: DilutedExtraordinary(self: EarningReports) = value

"""

    DividendCoverageRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Reflects a firm's capacity to pay a dividend, and is defined as Earnings Per Share / Dividend Per Share



Get: DividendCoverageRatio(self: EarningReports) -> DividendCoverageRatio



Set: DividendCoverageRatio(self: EarningReports) = value

"""

    DividendPerShare = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The amount of dividend that a stockholder will receive for each share of stock held. It can be calculated by taking the total amount

            of dividends paid and dividing it by the total shares outstanding. Dividend per share = total dividend payment/total number of

            outstanding shares



Get: DividendPerShare(self: EarningReports) -> DividendPerShare



Set: DividendPerShare(self: EarningReports) = value

"""

    FileDate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specific date on which a company released its filing to the public.



Get: FileDate(self: EarningReports) -> DateTime



Set: FileDate(self: EarningReports) = value

"""

    FormType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The type of filing of the report: for instance, 10-K (annual report) or 10-Q (quarterly report).



Get: FormType(self: EarningReports) -> str



Set: FormType(self: EarningReports) = value

"""

    NormalizedBasicEPS = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The basic normalized earnings per share. Normalized EPS removes onetime and unusual items from EPS, to provide investors with a

            more accurate measure of the company's true earnings. Normalized Earnings / Basic Weighted Average Shares Outstanding.



Get: NormalizedBasicEPS(self: EarningReports) -> NormalizedBasicEPS



Set: NormalizedBasicEPS(self: EarningReports) = value

"""

    NormalizedDilutedEPS = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The diluted normalized earnings per share. Normalized EPS removes onetime and unusual items from EPS, to provide investors with

            a more accurate measure of the company's true earnings. Normalized Earnings / Diluted Weighted Average Shares Outstanding.



Get: NormalizedDilutedEPS(self: EarningReports) -> NormalizedDilutedEPS



Set: NormalizedDilutedEPS(self: EarningReports) = value

"""

    PeriodEndingDate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The exact date that is given in the financial statements for each quarter's end.



Get: PeriodEndingDate(self: EarningReports) -> DateTime



Set: PeriodEndingDate(self: EarningReports) = value

"""

    PeriodType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The nature of the period covered by an individual set of financial results. The output can be: Quarter, Semi-annual or Annual.

            Assuming a 12-month fiscal year, quarter typically covers a three-month period, semi-annual a six-month period, and annual a

            twelve-month period. Annual could cover results collected either from preliminary results or an annual report



Get: PeriodType(self: EarningReports) -> str



Set: PeriodType(self: EarningReports) = value

"""

    ReportedNormalizedBasicEPS = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Normalized Basic EPS as reported by the company in the financial statements.



Get: ReportedNormalizedBasicEPS(self: EarningReports) -> ReportedNormalizedBasicEPS



Set: ReportedNormalizedBasicEPS(self: EarningReports) = value

"""

    ReportedNormalizedDilutedEPS = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Normalized Diluted EPS as reported by the company in the financial statements.



Get: ReportedNormalizedDilutedEPS(self: EarningReports) -> ReportedNormalizedDilutedEPS



Set: ReportedNormalizedDilutedEPS(self: EarningReports) = value

"""

    TaxLossCarryforwardBasicEPS = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The earnings attributable to the tax loss carry forward (during the reporting period).



Get: TaxLossCarryforwardBasicEPS(self: EarningReports) -> TaxLossCarryforwardBasicEPS



Set: TaxLossCarryforwardBasicEPS(self: EarningReports) = value

"""

    TaxLossCarryforwardDilutedEPS = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The earnings from any tax loss carry forward (in the reporting period).



Get: TaxLossCarryforwardDilutedEPS(self: EarningReports) -> TaxLossCarryforwardDilutedEPS



Set: TaxLossCarryforwardDilutedEPS(self: EarningReports) = value

"""

    TotalDividendPerShare = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Total Dividend Per Share is cash dividends and special cash dividends paid per share over a certain period of time.



Get: TotalDividendPerShare(self: EarningReports) -> TotalDividendPerShare



Set: TotalDividendPerShare(self: EarningReports) = value

"""


class EarningsFromEquityInterestIncomeStatement(MultiPeriodField):
    """
    The earnings from equity interest can be a result of any of the following: Income from earnings distribution of the business, either

                as dividends paid to corporate shareholders or as drawings in a partnership; Capital gain realized upon sale of the business; Capital

                gain realized from selling his or her interest to other partners. This item is usually not available for bank and insurance industries.



    EarningsFromEquityInterestIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: EarningsFromEquityInterestIncomeStatement) -> Decimal



Set: NineMonths(self: EarningsFromEquityInterestIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: EarningsFromEquityInterestIncomeStatement) -> Decimal



Set: OneMonth(self: EarningsFromEquityInterestIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: EarningsFromEquityInterestIncomeStatement) -> Decimal



Set: SixMonths(self: EarningsFromEquityInterestIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: EarningsFromEquityInterestIncomeStatement) -> Decimal



Set: ThreeMonths(self: EarningsFromEquityInterestIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: EarningsFromEquityInterestIncomeStatement) -> Decimal



Set: TwelveMonths(self: EarningsFromEquityInterestIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: EarningsFromEquityInterestIncomeStatement) -> Decimal



Set: TwoMonths(self: EarningsFromEquityInterestIncomeStatement) = value

"""

    Store = None


class EarningsfromEquityInterestNetOfTaxIncomeStatement(MultiPeriodField):
    """
    Income from other equity interest reported after Provision of Tax. This applies to all industries.



    EarningsfromEquityInterestNetOfTaxIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: EarningsfromEquityInterestNetOfTaxIncomeStatement) -> Decimal



Set: NineMonths(self: EarningsfromEquityInterestNetOfTaxIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: EarningsfromEquityInterestNetOfTaxIncomeStatement) -> Decimal



Set: OneMonth(self: EarningsfromEquityInterestNetOfTaxIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: EarningsfromEquityInterestNetOfTaxIncomeStatement) -> Decimal



Set: SixMonths(self: EarningsfromEquityInterestNetOfTaxIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: EarningsfromEquityInterestNetOfTaxIncomeStatement) -> Decimal



Set: ThreeMonths(self: EarningsfromEquityInterestNetOfTaxIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: EarningsfromEquityInterestNetOfTaxIncomeStatement) -> Decimal



Set: TwelveMonths(self: EarningsfromEquityInterestNetOfTaxIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: EarningsfromEquityInterestNetOfTaxIncomeStatement) -> Decimal



Set: TwoMonths(self: EarningsfromEquityInterestNetOfTaxIncomeStatement) = value

"""

    Store = None


class EarningsLossesFromEquityInvestmentsCashFlowStatement(MultiPeriodField):
    """
    This item represents the entity's proportionate share for the period of the net income (loss) of its investee (such as unconsolidated

                subsidiaries and joint ventures) to which the equity method of accounting is applied. The amount typically reflects adjustments.



    EarningsLossesFromEquityInvestmentsCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: EarningsLossesFromEquityInvestmentsCashFlowStatement) -> Decimal



Set: NineMonths(self: EarningsLossesFromEquityInvestmentsCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: EarningsLossesFromEquityInvestmentsCashFlowStatement) -> Decimal



Set: OneMonth(self: EarningsLossesFromEquityInvestmentsCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: EarningsLossesFromEquityInvestmentsCashFlowStatement) -> Decimal



Set: SixMonths(self: EarningsLossesFromEquityInvestmentsCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: EarningsLossesFromEquityInvestmentsCashFlowStatement) -> Decimal



Set: ThreeMonths(self: EarningsLossesFromEquityInvestmentsCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: EarningsLossesFromEquityInvestmentsCashFlowStatement) -> Decimal



Set: TwelveMonths(self: EarningsLossesFromEquityInvestmentsCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: EarningsLossesFromEquityInvestmentsCashFlowStatement) -> Decimal



Set: TwoMonths(self: EarningsLossesFromEquityInvestmentsCashFlowStatement) = value

"""

    Store = None


class EBITDAGrowth(MultiPeriodField):
    """
    The growth in the company's EBITDA on a percentage basis. Morningstar calculates the growth percentage based on the earnings

                minus expenses (excluding interest, tax, depreciation, and amortization expenses) reported in the Financial Statements within the

                company filings or reports.



    EBITDAGrowth(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: EBITDAGrowth) -> Decimal



Set: FiveYears(self: EBITDAGrowth) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: EBITDAGrowth) -> Decimal



Set: OneYear(self: EBITDAGrowth) = value

"""

    ThreeYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeYears period value for the field



Get: ThreeYears(self: EBITDAGrowth) -> Decimal



Set: ThreeYears(self: EBITDAGrowth) = value

"""

    Store = None


class EBITDAIncomeStatement(MultiPeriodField):
    """
    Earnings minus expenses (excluding interest, tax, depreciation, and amortization expenses).



    EBITDAIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: EBITDAIncomeStatement) -> Decimal



Set: NineMonths(self: EBITDAIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: EBITDAIncomeStatement) -> Decimal



Set: OneMonth(self: EBITDAIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: EBITDAIncomeStatement) -> Decimal



Set: SixMonths(self: EBITDAIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: EBITDAIncomeStatement) -> Decimal



Set: ThreeMonths(self: EBITDAIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: EBITDAIncomeStatement) -> Decimal



Set: TwelveMonths(self: EBITDAIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: EBITDAIncomeStatement) -> Decimal



Set: TwoMonths(self: EBITDAIncomeStatement) = value

"""

    Store = None


class EBITDAMargin(MultiPeriodField):
    """
    Refers to the ratio of earnings before interest, taxes and depreciation and amortization to revenue. Morningstar calculates the ratio

                by using the underlying data reported in the company filings or reports:   EBITDA / Revenue.



    EBITDAMargin(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: EBITDAMargin) -> Decimal



Set: NineMonths(self: EBITDAMargin) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: EBITDAMargin) -> Decimal



Set: OneMonth(self: EBITDAMargin) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: EBITDAMargin) -> Decimal



Set: OneYear(self: EBITDAMargin) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: EBITDAMargin) -> Decimal



Set: SixMonths(self: EBITDAMargin) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: EBITDAMargin) -> Decimal



Set: ThreeMonths(self: EBITDAMargin) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: EBITDAMargin) -> Decimal



Set: TwoMonths(self: EBITDAMargin) = value

"""

    Store = None


class EBITIncomeStatement(MultiPeriodField):
    """
    Earnings minus expenses (excluding interest and tax expenses).



    EBITIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: EBITIncomeStatement) -> Decimal



Set: NineMonths(self: EBITIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: EBITIncomeStatement) -> Decimal



Set: OneMonth(self: EBITIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: EBITIncomeStatement) -> Decimal



Set: SixMonths(self: EBITIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: EBITIncomeStatement) -> Decimal



Set: ThreeMonths(self: EBITIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: EBITIncomeStatement) -> Decimal



Set: TwelveMonths(self: EBITIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: EBITIncomeStatement) -> Decimal



Set: TwoMonths(self: EBITIncomeStatement) = value

"""

    Store = None


class EBITMargin(MultiPeriodField):
    """
    Refers to the ratio of earnings before interest and taxes to revenue. Morningstar calculates the ratio by using the underlying data

                reported in the company filings or reports:   EBIT / Revenue.



    EBITMargin(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: EBITMargin) -> Decimal



Set: NineMonths(self: EBITMargin) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: EBITMargin) -> Decimal



Set: OneMonth(self: EBITMargin) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: EBITMargin) -> Decimal



Set: OneYear(self: EBITMargin) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: EBITMargin) -> Decimal



Set: SixMonths(self: EBITMargin) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: EBITMargin) -> Decimal



Set: ThreeMonths(self: EBITMargin) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: EBITMargin) -> Decimal



Set: TwoMonths(self: EBITMargin) = value

"""

    Store = None


class EffectiveTaxRateAsReportedIncomeStatement(MultiPeriodField):
    """
    The average tax rate for the period as reported by the company, may be the same or not the same as Morningstar's standardized

                definition.



    EffectiveTaxRateAsReportedIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: EffectiveTaxRateAsReportedIncomeStatement) -> Decimal



Set: NineMonths(self: EffectiveTaxRateAsReportedIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: EffectiveTaxRateAsReportedIncomeStatement) -> Decimal



Set: SixMonths(self: EffectiveTaxRateAsReportedIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: EffectiveTaxRateAsReportedIncomeStatement) -> Decimal



Set: ThreeMonths(self: EffectiveTaxRateAsReportedIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: EffectiveTaxRateAsReportedIncomeStatement) -> Decimal



Set: TwelveMonths(self: EffectiveTaxRateAsReportedIncomeStatement) = value

"""

    Store = None


class EffectOfExchangeRateChangesCashFlowStatement(MultiPeriodField):
    """
    The effect of exchange rate changes on cash balances held in foreign currencies.



    EffectOfExchangeRateChangesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: EffectOfExchangeRateChangesCashFlowStatement) -> Decimal



Set: NineMonths(self: EffectOfExchangeRateChangesCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: EffectOfExchangeRateChangesCashFlowStatement) -> Decimal



Set: OneMonth(self: EffectOfExchangeRateChangesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: EffectOfExchangeRateChangesCashFlowStatement) -> Decimal



Set: SixMonths(self: EffectOfExchangeRateChangesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: EffectOfExchangeRateChangesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: EffectOfExchangeRateChangesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: EffectOfExchangeRateChangesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: EffectOfExchangeRateChangesCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: EffectOfExchangeRateChangesCashFlowStatement) -> Decimal



Set: TwoMonths(self: EffectOfExchangeRateChangesCashFlowStatement) = value

"""

    Store = None


class ElectricUtilityPlantBalanceSheet(MultiPeriodField):
    """
    The amount for the electric plant related to the utility industry.



    ElectricUtilityPlantBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ElectricUtilityPlantBalanceSheet) -> Decimal



Set: ThreeMonths(self: ElectricUtilityPlantBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ElectricUtilityPlantBalanceSheet) -> Decimal



Set: TwelveMonths(self: ElectricUtilityPlantBalanceSheet) = value

"""

    Store = None


class EmployeeBenefitsBalanceSheet(MultiPeriodField):
    """
    Carrying amount as of the balance sheet date of the portion of the obligations recognized for the various benefits provided to former

                or inactive employees, their beneficiaries, and covered dependents after employment but before retirement.



    EmployeeBenefitsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: EmployeeBenefitsBalanceSheet) -> Decimal



Set: NineMonths(self: EmployeeBenefitsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: EmployeeBenefitsBalanceSheet) -> Decimal



Set: SixMonths(self: EmployeeBenefitsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: EmployeeBenefitsBalanceSheet) -> Decimal



Set: ThreeMonths(self: EmployeeBenefitsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: EmployeeBenefitsBalanceSheet) -> Decimal



Set: TwelveMonths(self: EmployeeBenefitsBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: EmployeeBenefitsBalanceSheet) -> Decimal



Set: TwoMonths(self: EmployeeBenefitsBalanceSheet) = value

"""

    Store = None


class EndCashPositionCashFlowStatement(MultiPeriodField):
    """
    The cash and cash equivalents balance at the end of the accounting period, as indicated on the Cash Flow statement. It is equal to

                the Beginning Cash and Equivalents, plus the Net Change in Cash and Equivalents.



    EndCashPositionCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: EndCashPositionCashFlowStatement) -> Decimal



Set: NineMonths(self: EndCashPositionCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: EndCashPositionCashFlowStatement) -> Decimal



Set: OneMonth(self: EndCashPositionCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: EndCashPositionCashFlowStatement) -> Decimal



Set: SixMonths(self: EndCashPositionCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: EndCashPositionCashFlowStatement) -> Decimal



Set: ThreeMonths(self: EndCashPositionCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: EndCashPositionCashFlowStatement) -> Decimal



Set: TwelveMonths(self: EndCashPositionCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: EndCashPositionCashFlowStatement) -> Decimal



Set: TwoMonths(self: EndCashPositionCashFlowStatement) = value

"""

    Store = None


class EquipmentIncomeStatement(MultiPeriodField):
    """
    Equipment expenses include depreciation, repairs, rentals, and service contract costs. This also includes equipment purchases

                which do not qualify for capitalization in accordance with the entity's accounting policy. This item may also include furniture

                expenses. This item is usually only available for bank industry.



    EquipmentIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: EquipmentIncomeStatement) -> Decimal



Set: NineMonths(self: EquipmentIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: EquipmentIncomeStatement) -> Decimal



Set: SixMonths(self: EquipmentIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: EquipmentIncomeStatement) -> Decimal



Set: ThreeMonths(self: EquipmentIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: EquipmentIncomeStatement) -> Decimal



Set: TwelveMonths(self: EquipmentIncomeStatement) = value

"""

    Store = None


class EquityAttributableToOwnersOfParentBalanceSheet(MultiPeriodField):
    """ EquityAttributableToOwnersOfParentBalanceSheet(store: IDictionary[str, Decimal]) """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: EquityAttributableToOwnersOfParentBalanceSheet) -> Decimal



Set: ThreeMonths(self: EquityAttributableToOwnersOfParentBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: EquityAttributableToOwnersOfParentBalanceSheet) -> Decimal



Set: TwelveMonths(self: EquityAttributableToOwnersOfParentBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: EquityAttributableToOwnersOfParentBalanceSheet) -> Decimal



Set: TwoMonths(self: EquityAttributableToOwnersOfParentBalanceSheet) = value

"""

    Store = None


class EquityInvestmentsBalanceSheet(MultiPeriodField):
    """
    This asset represents equity securities categorized neither as held-to-maturity nor trading.



    EquityInvestmentsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: EquityInvestmentsBalanceSheet) -> Decimal



Set: NineMonths(self: EquityInvestmentsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: EquityInvestmentsBalanceSheet) -> Decimal



Set: ThreeMonths(self: EquityInvestmentsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: EquityInvestmentsBalanceSheet) -> Decimal



Set: TwelveMonths(self: EquityInvestmentsBalanceSheet) = value

"""

    Store = None


class EquityPerShareGrowth(MultiPeriodField):
    """
    The growth in the company's book value per share on a percentage basis. Morningstar calculates the annualized growth

                percentage based on the underlying equity and end of period shares outstanding reported in the company filings or reports.



    EquityPerShareGrowth(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: EquityPerShareGrowth) -> Decimal



Set: FiveYears(self: EquityPerShareGrowth) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: EquityPerShareGrowth) -> Decimal



Set: OneYear(self: EquityPerShareGrowth) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: EquityPerShareGrowth) -> Decimal



Set: ThreeMonths(self: EquityPerShareGrowth) = value

"""

    ThreeYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeYears period value for the field



Get: ThreeYears(self: EquityPerShareGrowth) -> Decimal



Set: ThreeYears(self: EquityPerShareGrowth) = value

"""

    Store = None


class EquitySharesInvestmentsBalanceSheet(MultiPeriodField):
    """
    Investments in shares of a company representing ownership in that company.



    EquitySharesInvestmentsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: EquitySharesInvestmentsBalanceSheet) -> Decimal



Set: ThreeMonths(self: EquitySharesInvestmentsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: EquitySharesInvestmentsBalanceSheet) -> Decimal



Set: TwelveMonths(self: EquitySharesInvestmentsBalanceSheet) = value

"""

    Store = None


class ExcessTaxBenefitFromStockBasedCompensationCashFlowStatement(MultiPeriodField):
    """
    Reductions in the entity's income taxes that arise when compensation cost (from non-qualified share-based compensation)

                recognized on the entities tax return exceeds compensation cost from share-based compensation recognized in financial

                statements. This element reduces net cash provided by operating activities.



    ExcessTaxBenefitFromStockBasedCompensationCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ExcessTaxBenefitFromStockBasedCompensationCashFlowStatement) -> Decimal



Set: NineMonths(self: ExcessTaxBenefitFromStockBasedCompensationCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ExcessTaxBenefitFromStockBasedCompensationCashFlowStatement) -> Decimal



Set: SixMonths(self: ExcessTaxBenefitFromStockBasedCompensationCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ExcessTaxBenefitFromStockBasedCompensationCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ExcessTaxBenefitFromStockBasedCompensationCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ExcessTaxBenefitFromStockBasedCompensationCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ExcessTaxBenefitFromStockBasedCompensationCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: ExcessTaxBenefitFromStockBasedCompensationCashFlowStatement) -> Decimal



Set: TwoMonths(self: ExcessTaxBenefitFromStockBasedCompensationCashFlowStatement) = value

"""

    Store = None


class ExciseTaxesIncomeStatement(MultiPeriodField):
    """
    Excise taxes are taxes paid when purchases are made on a specific good, such as gasoline. Excise taxes are often included in the

                price of the product. There are also excise taxes on activities, such as on wagering or on highway usage by trucks.



    ExciseTaxesIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ExciseTaxesIncomeStatement) -> Decimal



Set: NineMonths(self: ExciseTaxesIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ExciseTaxesIncomeStatement) -> Decimal



Set: SixMonths(self: ExciseTaxesIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ExciseTaxesIncomeStatement) -> Decimal



Set: ThreeMonths(self: ExciseTaxesIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ExciseTaxesIncomeStatement) -> Decimal



Set: TwelveMonths(self: ExciseTaxesIncomeStatement) = value

"""

    Store = None


class ExpenseRatio(MultiPeriodField):
    """
    A measure of operating performance for Insurance companies, as it shows the relationship between the premiums earned and

                administrative expenses related to claims such as fees and commissions. A number of 1 or lower is preferred, as this means the

                premiums exceed the expenses. Calculated as: (Deferred Policy Acquisition Amortization Expense+Fees and Commission

                Expense+Other Underwriting Expenses+Selling, General and Administrative) / Net Premiums Earned



    ExpenseRatio(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: ExpenseRatio) -> Decimal



Set: OneYear(self: ExpenseRatio) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ExpenseRatio) -> Decimal



Set: ThreeMonths(self: ExpenseRatio) = value

"""

    Store = None


class ExplorationDevelopmentAndMineralPropertyLeaseExpensesIncomeStatement(MultiPeriodField):
    """
    Costs incurred in identifying areas that may warrant examination and in examining specific areas that are considered to have

                prospects of containing energy or metal reserves, including costs of drilling exploratory wells. Development expense is the

                capitalized costs incurred to obtain access to proved reserves and to provide facilities for extracting, treating, gathering and storing

                the energy and metal. Mineral property includes oil and gas wells, mines, and other natural deposits (including geothermal

                deposits). The payment for leasing those properties is called mineral property lease expense. Exploration expense is included in

                operation expenses for mining industry.



    ExplorationDevelopmentAndMineralPropertyLeaseExpensesIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ExplorationDevelopmentAndMineralPropertyLeaseExpensesIncomeStatement) -> Decimal



Set: NineMonths(self: ExplorationDevelopmentAndMineralPropertyLeaseExpensesIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ExplorationDevelopmentAndMineralPropertyLeaseExpensesIncomeStatement) -> Decimal



Set: SixMonths(self: ExplorationDevelopmentAndMineralPropertyLeaseExpensesIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ExplorationDevelopmentAndMineralPropertyLeaseExpensesIncomeStatement) -> Decimal



Set: ThreeMonths(self: ExplorationDevelopmentAndMineralPropertyLeaseExpensesIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ExplorationDevelopmentAndMineralPropertyLeaseExpensesIncomeStatement) -> Decimal



Set: TwelveMonths(self: ExplorationDevelopmentAndMineralPropertyLeaseExpensesIncomeStatement) = value

"""

    Store = None


class FCFGrowth(MultiPeriodField):
    """
    The growth in the company's free cash flow on a percentage basis. Morningstar calculates the growth percentage based on the

                underlying cash flow from operations and capital expenditures data reported in the Cash Flow Statement within the company filings

                or reports:   Free Cash Flow = Cash flow from operations - Capital Expenditures.



    FCFGrowth(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: FCFGrowth) -> Decimal



Set: FiveYears(self: FCFGrowth) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: FCFGrowth) -> Decimal



Set: OneYear(self: FCFGrowth) = value

"""

    ThreeYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeYears period value for the field



Get: ThreeYears(self: FCFGrowth) -> Decimal



Set: ThreeYears(self: FCFGrowth) = value

"""

    Store = None


class FCFNetIncomeRatio(MultiPeriodField):
    """
    Free Cash Flow / Net Income



    FCFNetIncomeRatio(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: FCFNetIncomeRatio) -> Decimal



Set: OneYear(self: FCFNetIncomeRatio) = value

"""

    Store = None


class FCFPerShareGrowth(MultiPeriodField):
    """
    The growth in the company's free cash flow per share on a percentage basis. Morningstar calculates the growth percentage based

                on the free cash flow divided by average diluted shares outstanding reported in the Financial Statements within the company filings

                or reports.



    FCFPerShareGrowth(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: FCFPerShareGrowth) -> Decimal



Set: FiveYears(self: FCFPerShareGrowth) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: FCFPerShareGrowth) -> Decimal



Set: OneYear(self: FCFPerShareGrowth) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FCFPerShareGrowth) -> Decimal



Set: ThreeMonths(self: FCFPerShareGrowth) = value

"""

    ThreeYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeYears period value for the field



Get: ThreeYears(self: FCFPerShareGrowth) -> Decimal



Set: ThreeYears(self: FCFPerShareGrowth) = value

"""

    Store = None


class FCFSalesRatio(MultiPeriodField):
    """
    Free Cash flow / Revenue



    FCFSalesRatio(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: FCFSalesRatio) -> Decimal



Set: OneYear(self: FCFSalesRatio) = value

"""

    Store = None


class FCFtoCFO(MultiPeriodField):
    """
    Indicates the percentage of a company's operating cash flow is free to be invested in its business after capital expenditures.



    FCFtoCFO(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: FCFtoCFO) -> Decimal



Set: OneYear(self: FCFtoCFO) = value

"""

    Store = None


class FederalFundsPurchasedAndSecuritiesSoldUnderAgreementToRepurchaseBalanceSheet(MultiPeriodField):
    """
    This liability refers to the amount shown on the books that a bank with insufficient reserves borrows, at the federal funds rate, from

                another bank to meet its reserve requirements; and the amount of securities that an institution sells and agrees to repurchase at a

                specified date for a specified price, net of any reductions or offsets.



    FederalFundsPurchasedAndSecuritiesSoldUnderAgreementToRepurchaseBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: FederalFundsPurchasedAndSecuritiesSoldUnderAgreementToRepurchaseBalanceSheet) -> Decimal



Set: SixMonths(self: FederalFundsPurchasedAndSecuritiesSoldUnderAgreementToRepurchaseBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FederalFundsPurchasedAndSecuritiesSoldUnderAgreementToRepurchaseBalanceSheet) -> Decimal



Set: ThreeMonths(self: FederalFundsPurchasedAndSecuritiesSoldUnderAgreementToRepurchaseBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: FederalFundsPurchasedAndSecuritiesSoldUnderAgreementToRepurchaseBalanceSheet) -> Decimal



Set: TwelveMonths(self: FederalFundsPurchasedAndSecuritiesSoldUnderAgreementToRepurchaseBalanceSheet) = value

"""

    Store = None


class FederalFundsPurchasedBalanceSheet(MultiPeriodField):
    """
    The amount borrowed by a bank, at the federal funds rate, from another bank to meet its reserve requirements.  This item is

                typically available for the bank industry.



    FederalFundsPurchasedBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FederalFundsPurchasedBalanceSheet) -> Decimal



Set: ThreeMonths(self: FederalFundsPurchasedBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: FederalFundsPurchasedBalanceSheet) -> Decimal



Set: TwelveMonths(self: FederalFundsPurchasedBalanceSheet) = value

"""

    Store = None


class FederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellBalanceSheet(MultiPeriodField):
    """
    This asset refers to very-short-term loans of funds to other banks and securities dealers.



    FederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: FederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellBalanceSheet) -> Decimal



Set: NineMonths(self: FederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: FederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellBalanceSheet) -> Decimal



Set: SixMonths(self: FederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellBalanceSheet) -> Decimal



Set: ThreeMonths(self: FederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: FederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellBalanceSheet) -> Decimal



Set: TwelveMonths(self: FederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellBalanceSheet) = value

"""

    Store = None


class FederalFundsSoldBalanceSheet(MultiPeriodField):
    """
    Federal funds transactions involve lending (federal funds sold) or borrowing (federal funds purchased) of immediately available

                reserve balances.  This item is typically available for the bank industry.



    FederalFundsSoldBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: FederalFundsSoldBalanceSheet) -> Decimal



Set: SixMonths(self: FederalFundsSoldBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FederalFundsSoldBalanceSheet) -> Decimal



Set: ThreeMonths(self: FederalFundsSoldBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: FederalFundsSoldBalanceSheet) -> Decimal



Set: TwelveMonths(self: FederalFundsSoldBalanceSheet) = value

"""

    Store = None


class FederalHomeLoanBankStockBalanceSheet(MultiPeriodField):
    """
    Federal Home Loan Bank stock represents an equity interest in a FHLB. It does not have a readily determinable fair value because

                its ownership is restricted and it lacks a market (liquidity).  This item is typically available for the bank industry.



    FederalHomeLoanBankStockBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: FederalHomeLoanBankStockBalanceSheet) -> Decimal



Set: NineMonths(self: FederalHomeLoanBankStockBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: FederalHomeLoanBankStockBalanceSheet) -> Decimal



Set: SixMonths(self: FederalHomeLoanBankStockBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FederalHomeLoanBankStockBalanceSheet) -> Decimal



Set: ThreeMonths(self: FederalHomeLoanBankStockBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: FederalHomeLoanBankStockBalanceSheet) -> Decimal



Set: TwelveMonths(self: FederalHomeLoanBankStockBalanceSheet) = value

"""

    Store = None


class FeeRevenueAndOtherIncomeIncomeStatement(MultiPeriodField):
    """
    The aggregate amount of fees, commissions, and other income.



    FeeRevenueAndOtherIncomeIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: FeeRevenueAndOtherIncomeIncomeStatement) -> Decimal



Set: NineMonths(self: FeeRevenueAndOtherIncomeIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: FeeRevenueAndOtherIncomeIncomeStatement) -> Decimal



Set: SixMonths(self: FeeRevenueAndOtherIncomeIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FeeRevenueAndOtherIncomeIncomeStatement) -> Decimal



Set: ThreeMonths(self: FeeRevenueAndOtherIncomeIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: FeeRevenueAndOtherIncomeIncomeStatement) -> Decimal



Set: TwelveMonths(self: FeeRevenueAndOtherIncomeIncomeStatement) = value

"""

    Store = None


class FeesandCommissionExpenseIncomeStatement(MultiPeriodField):
    """
    Cost incurred by bank and insurance companies for fees and commission income.



    FeesandCommissionExpenseIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: FeesandCommissionExpenseIncomeStatement) -> Decimal



Set: NineMonths(self: FeesandCommissionExpenseIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: FeesandCommissionExpenseIncomeStatement) -> Decimal



Set: SixMonths(self: FeesandCommissionExpenseIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FeesandCommissionExpenseIncomeStatement) -> Decimal



Set: ThreeMonths(self: FeesandCommissionExpenseIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: FeesandCommissionExpenseIncomeStatement) -> Decimal



Set: TwelveMonths(self: FeesandCommissionExpenseIncomeStatement) = value

"""

    Store = None


class FeesandCommissionIncomeIncomeStatement(MultiPeriodField):
    """
    Fees and commission income earned by bank and insurance companies on the rendering services.



    FeesandCommissionIncomeIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: FeesandCommissionIncomeIncomeStatement) -> Decimal



Set: NineMonths(self: FeesandCommissionIncomeIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: FeesandCommissionIncomeIncomeStatement) -> Decimal



Set: SixMonths(self: FeesandCommissionIncomeIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FeesandCommissionIncomeIncomeStatement) -> Decimal



Set: ThreeMonths(self: FeesandCommissionIncomeIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: FeesandCommissionIncomeIncomeStatement) -> Decimal



Set: TwelveMonths(self: FeesandCommissionIncomeIncomeStatement) = value

"""

    Store = None


class FeesAndCommissionsIncomeStatement(MultiPeriodField):
    """
    Total fees and commissions earned from providing services such as leasing of space or maintaining: (1) depositor accounts; (2)

                transfer agent; (3) fiduciary and trust; (4) brokerage and underwriting; (5) mortgage; (6) credit cards; (7) correspondent clearing;

                and (8) other such services and activities performed for others. This item is usually available for bank and insurance industries.



    FeesAndCommissionsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: FeesAndCommissionsIncomeStatement) -> Decimal



Set: NineMonths(self: FeesAndCommissionsIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: FeesAndCommissionsIncomeStatement) -> Decimal



Set: OneMonth(self: FeesAndCommissionsIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: FeesAndCommissionsIncomeStatement) -> Decimal



Set: SixMonths(self: FeesAndCommissionsIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FeesAndCommissionsIncomeStatement) -> Decimal



Set: ThreeMonths(self: FeesAndCommissionsIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: FeesAndCommissionsIncomeStatement) -> Decimal



Set: TwelveMonths(self: FeesAndCommissionsIncomeStatement) = value

"""

    Store = None


class FinanceLeaseReceivablesBalanceSheet(MultiPeriodField):
    """
    Accounts owed to the bank in relation to capital leases. Capital/ finance lease obligation are contractual obligations that arise from

                obtaining the use of property or equipment via a capital lease contract.



    FinanceLeaseReceivablesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FinanceLeaseReceivablesBalanceSheet) -> Decimal



Set: ThreeMonths(self: FinanceLeaseReceivablesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: FinanceLeaseReceivablesBalanceSheet) -> Decimal



Set: TwelveMonths(self: FinanceLeaseReceivablesBalanceSheet) = value

"""

    Store = None


class FinanceLeaseReceivablesCurrentBalanceSheet(MultiPeriodField):
    """
    Accounts owed to the bank in relation to capital leases to be received within the next accounting PeriodAsByte. Capital/ finance lease

                obligations are contractual obligations that arise from obtaining the use of property or equipment via a capital lease contract.



    FinanceLeaseReceivablesCurrentBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FinanceLeaseReceivablesCurrentBalanceSheet) -> Decimal



Set: ThreeMonths(self: FinanceLeaseReceivablesCurrentBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: FinanceLeaseReceivablesCurrentBalanceSheet) -> Decimal



Set: TwelveMonths(self: FinanceLeaseReceivablesCurrentBalanceSheet) = value

"""

    Store = None


class FinanceLeaseReceivablesNonCurrentBalanceSheet(MultiPeriodField):
    """
    Accounts owed to the bank in relation to capital leases to be received beyond the next accounting PeriodAsByte. Capital/ finance lease

                obligations are contractual obligations that arise from obtaining the use of property or equipment via a capital lease contract.



    FinanceLeaseReceivablesNonCurrentBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FinanceLeaseReceivablesNonCurrentBalanceSheet) -> Decimal



Set: ThreeMonths(self: FinanceLeaseReceivablesNonCurrentBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: FinanceLeaseReceivablesNonCurrentBalanceSheet) -> Decimal



Set: TwelveMonths(self: FinanceLeaseReceivablesNonCurrentBalanceSheet) = value

"""

    Store = None


class FinancialAssetsBalanceSheet(MultiPeriodField):
    """
    Fair values as of the balance sheet date of all assets resulting from contracts that meet the criteria of being accounted for as

                derivative instruments, net of the effects of master netting arrangements.



    FinancialAssetsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: FinancialAssetsBalanceSheet) -> Decimal



Set: NineMonths(self: FinancialAssetsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FinancialAssetsBalanceSheet) -> Decimal



Set: ThreeMonths(self: FinancialAssetsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: FinancialAssetsBalanceSheet) -> Decimal



Set: TwelveMonths(self: FinancialAssetsBalanceSheet) = value

"""

    Store = None


class FinancialAssetsDesignatedasFairValueThroughProfitorLossTotalBalanceSheet(MultiPeriodField):
    """
    Financial assets that are held at fair value through profit or loss comprise assets held for trading and those financial assets

                designated as being held at fair value through profit or loss.



    FinancialAssetsDesignatedasFairValueThroughProfitorLossTotalBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FinancialAssetsDesignatedasFairValueThroughProfitorLossTotalBalanceSheet) -> Decimal



Set: ThreeMonths(self: FinancialAssetsDesignatedasFairValueThroughProfitorLossTotalBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: FinancialAssetsDesignatedasFairValueThroughProfitorLossTotalBalanceSheet) -> Decimal



Set: TwelveMonths(self: FinancialAssetsDesignatedasFairValueThroughProfitorLossTotalBalanceSheet) = value

"""

    Store = None


class FinancialInstrumentsSoldUnderAgreementsToRepurchaseBalanceSheet(MultiPeriodField):
    """
    The carrying value as of the balance sheet date of securities that an institution sells and agrees to repurchase (the identical or

                substantially the same securities) as a seller-borrower at a specified date for a specified price, also known as a repurchase

                agreement.  This item is typically available for bank industry.



    FinancialInstrumentsSoldUnderAgreementsToRepurchaseBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: FinancialInstrumentsSoldUnderAgreementsToRepurchaseBalanceSheet) -> Decimal



Set: SixMonths(self: FinancialInstrumentsSoldUnderAgreementsToRepurchaseBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FinancialInstrumentsSoldUnderAgreementsToRepurchaseBalanceSheet) -> Decimal



Set: ThreeMonths(self: FinancialInstrumentsSoldUnderAgreementsToRepurchaseBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: FinancialInstrumentsSoldUnderAgreementsToRepurchaseBalanceSheet) -> Decimal



Set: TwelveMonths(self: FinancialInstrumentsSoldUnderAgreementsToRepurchaseBalanceSheet) = value

"""

    Store = None


class FinancialLeverage(MultiPeriodField):
    """
    Refers to the ratio of Total Assets to Common Equity. Morningstar calculates the ratio by using the underlying data reported in the

                Balance Sheet within the company filings or reports:    Total Assets / Common Equity.   [Note: Common Equity = Total

                Shareholder's Equity - Preferred Stock]



    FinancialLeverage(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: FinancialLeverage) -> Decimal



Set: NineMonths(self: FinancialLeverage) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: FinancialLeverage) -> Decimal



Set: OneMonth(self: FinancialLeverage) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: FinancialLeverage) -> Decimal



Set: OneYear(self: FinancialLeverage) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: FinancialLeverage) -> Decimal



Set: SixMonths(self: FinancialLeverage) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FinancialLeverage) -> Decimal



Set: ThreeMonths(self: FinancialLeverage) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: FinancialLeverage) -> Decimal



Set: TwoMonths(self: FinancialLeverage) = value

"""

    Store = None


class FinancialLiabilitiesCurrentBalanceSheet(MultiPeriodField):
    """
    Financial related liabilities due within one year, including short term and current portions of long-term debt, capital leases and

                derivative liabilities.



    FinancialLiabilitiesCurrentBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FinancialLiabilitiesCurrentBalanceSheet) -> Decimal



Set: ThreeMonths(self: FinancialLiabilitiesCurrentBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: FinancialLiabilitiesCurrentBalanceSheet) -> Decimal



Set: TwelveMonths(self: FinancialLiabilitiesCurrentBalanceSheet) = value

"""

    Store = None


class FinancialLiabilitiesDesignatedasFairValueThroughProfitorLossTotalBalanceSheet(MultiPeriodField):
    """
    Financial liabilities that are held at fair value through profit or loss.



    FinancialLiabilitiesDesignatedasFairValueThroughProfitorLossTotalBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FinancialLiabilitiesDesignatedasFairValueThroughProfitorLossTotalBalanceSheet) -> Decimal



Set: ThreeMonths(self: FinancialLiabilitiesDesignatedasFairValueThroughProfitorLossTotalBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: FinancialLiabilitiesDesignatedasFairValueThroughProfitorLossTotalBalanceSheet) -> Decimal



Set: TwelveMonths(self: FinancialLiabilitiesDesignatedasFairValueThroughProfitorLossTotalBalanceSheet) = value

"""

    Store = None


class FinancialLiabilitiesMeasuredatAmortizedCostTotalBalanceSheet(MultiPeriodField):
    """
    Financial liabilities carried at amortized cost.



    FinancialLiabilitiesMeasuredatAmortizedCostTotalBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FinancialLiabilitiesMeasuredatAmortizedCostTotalBalanceSheet) -> Decimal



Set: ThreeMonths(self: FinancialLiabilitiesMeasuredatAmortizedCostTotalBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: FinancialLiabilitiesMeasuredatAmortizedCostTotalBalanceSheet) -> Decimal



Set: TwelveMonths(self: FinancialLiabilitiesMeasuredatAmortizedCostTotalBalanceSheet) = value

"""

    Store = None


class FinancialLiabilitiesNonCurrentBalanceSheet(MultiPeriodField):
    """
    Financial related liabilities due beyond one year, including long term debt, capital leases and derivative liabilities.



    FinancialLiabilitiesNonCurrentBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FinancialLiabilitiesNonCurrentBalanceSheet) -> Decimal



Set: ThreeMonths(self: FinancialLiabilitiesNonCurrentBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: FinancialLiabilitiesNonCurrentBalanceSheet) -> Decimal



Set: TwelveMonths(self: FinancialLiabilitiesNonCurrentBalanceSheet) = value

"""

    Store = None


class FinancialOrDerivativeInvestmentCurrentLiabilitiesBalanceSheet(MultiPeriodField):
    """
    Financial instruments that are linked to a specific financial instrument or indicator or commodity, and through which specific

                financial risks can be traded in financial markets in their own right, such as financial options, futures, forwards, etc.



    FinancialOrDerivativeInvestmentCurrentLiabilitiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FinancialOrDerivativeInvestmentCurrentLiabilitiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: FinancialOrDerivativeInvestmentCurrentLiabilitiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: FinancialOrDerivativeInvestmentCurrentLiabilitiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: FinancialOrDerivativeInvestmentCurrentLiabilitiesBalanceSheet) = value

"""

    Store = None


class FinancialStatements(object):
    """
    Definition of the FinancialStatements class



    FinancialStatements()
    """

    def UpdateValues(self, update):
        """
        UpdateValues(self: FinancialStatements, update: FinancialStatements)

            Applies updated values from update to this

             instance





            update: The next data update for this instance
        """
        pass

    AccessionNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The accession number is a unique number that EDGAR assigns to each submission as the submission is received.



Get: AccessionNumber(self: FinancialStatements) -> str



Set: AccessionNumber(self: FinancialStatements) = value

"""

    AuditorReportStatus = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Auditor opinion code will be one of the following for each annual period:

            Code Meaning

            UQ Unqualified Opinion

            UE Unqualified Opinion with Explanation

            QM Qualified - Due to change in accounting method

            QL Qualified - Due to litigation

            OT Qualified Opinion - Other

            AO Adverse Opinion

            DS Disclaim an opinion

            UA Unaudited



Get: AuditorReportStatus(self: FinancialStatements) -> str



Set: AuditorReportStatus(self: FinancialStatements) = value

"""

    BalanceSheet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The instance of the BalanceSheet class



Get: BalanceSheet(self: FinancialStatements) -> BalanceSheet



Set: BalanceSheet(self: FinancialStatements) = value

"""

    CashFlowStatement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The instance of the CashFlowStatement class



Get: CashFlowStatement(self: FinancialStatements) -> CashFlowStatement



Set: CashFlowStatement(self: FinancialStatements) = value

"""

    FileDate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specific date on which a company released its filing to the public.



Get: FileDate(self: FinancialStatements) -> DateTime



Set: FileDate(self: FinancialStatements) = value

"""

    FormType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The type of filing of the report: for instance, 10-K (annual report) or 10-Q (quarterly report).



Get: FormType(self: FinancialStatements) -> str



Set: FormType(self: FinancialStatements) = value

"""

    IncomeStatement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The instance of the IncomeStatement class



Get: IncomeStatement(self: FinancialStatements) -> IncomeStatement



Set: IncomeStatement(self: FinancialStatements) = value

"""

    InventoryValuationMethod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Which method of inventory valuation was used - LIFO, FIFO, Average, Standard costs, Net realizable value, Others, LIFO and FIFO,

            FIFO and Average, FIFO and other, LIFO and Average, LIFO and other, Average and other, 3 or more methods, None



Get: InventoryValuationMethod(self: FinancialStatements) -> str



Set: InventoryValuationMethod(self: FinancialStatements) = value

"""

    NumberOfShareHolders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of shareholders on record



Get: NumberOfShareHolders(self: FinancialStatements) -> Int64



Set: NumberOfShareHolders(self: FinancialStatements) = value

"""

    PeriodAuditor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The name of the auditor that performed the financial statement audit for the given period.



Get: PeriodAuditor(self: FinancialStatements) -> str



Set: PeriodAuditor(self: FinancialStatements) = value

"""

    PeriodEndingDate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The exact date that is given in the financial statements for each quarter's end.



Get: PeriodEndingDate(self: FinancialStatements) -> DateTime



Set: PeriodEndingDate(self: FinancialStatements) = value

"""

    PeriodType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The nature of the period covered by an individual set of financial results. The output can be: Quarter, Semi-annual or Annual.

            Assuming a 12-month fiscal year, quarter typically covers a three-month period, semi-annual a six-month period, and annual a

            twelve-month period. Annual could cover results collected either from preliminary results or an annual report



Get: PeriodType(self: FinancialStatements) -> str



Set: PeriodType(self: FinancialStatements) = value

"""

    TotalRiskBasedCapital = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The sum of Tier 1 and Tier 2 Capital. Tier 1 capital consists of common shareholders equity, perpetual preferred shareholders equity

            with non-cumulative dividends, retained earnings, and minority interests in the equity accounts of consolidated subsidiaries. Tier 2

            capital consists of subordinated debt, intermediate-term preferred stock, cumulative and long-term preferred stock, and a portion of

            a bank's allowance for loan and lease losses.



Get: TotalRiskBasedCapital(self: FinancialStatements) -> TotalRiskBasedCapital



Set: TotalRiskBasedCapital(self: FinancialStatements) = value

"""


class FinancingCashFlowCashFlowStatement(MultiPeriodField):
    """
    The net cash inflow (outflow) from financing activity for the period, which involve changes to the long-term liabilities and

                stockholders' equity.



    FinancingCashFlowCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: FinancingCashFlowCashFlowStatement) -> Decimal



Set: NineMonths(self: FinancingCashFlowCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: FinancingCashFlowCashFlowStatement) -> Decimal



Set: OneMonth(self: FinancingCashFlowCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: FinancingCashFlowCashFlowStatement) -> Decimal



Set: SixMonths(self: FinancingCashFlowCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FinancingCashFlowCashFlowStatement) -> Decimal



Set: ThreeMonths(self: FinancingCashFlowCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: FinancingCashFlowCashFlowStatement) -> Decimal



Set: TwelveMonths(self: FinancingCashFlowCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: FinancingCashFlowCashFlowStatement) -> Decimal



Set: TwoMonths(self: FinancingCashFlowCashFlowStatement) = value

"""

    Store = None


class FineFundamental(BaseData, IBaseData):
    """
    Definition of the FineFundamental class



    FineFundamental()
    """

    @staticmethod
    def CreateUniverseSymbol(market, addGuid):
        """
        CreateUniverseSymbol(market: str, addGuid: bool) -> Symbol



            Creates the universe symbol used for fine

             fundamental data





            market: The market

            addGuid: True, will add a random GUID to allow uniqueness

            Returns: A fine universe symbol for the specified market
        """
        pass

    def GetSource(self, config, date, *__args):
        """
        GetSource(self: FineFundamental, config: SubscriptionDataConfig, date: DateTime, isLiveMode: bool) -> SubscriptionDataSource



            Return the URL string source of the file. This

             will be converted to a stream
        """
        pass

    def Reader(self, config, *__args):
        """
        Reader(self: FineFundamental, config: SubscriptionDataConfig, line: str, date: DateTime, isLiveMode: bool) -> BaseData



            Reader converts each line of the data source into

             BaseData objects. Each data type creates its own

             factory method, and returns a new instance of the

             object

                    each time it is called. The

             returned object is assumed to be time stamped in

             the config.ExchangeTimeZone.
        """
        pass

    def UpdateValues(self, update):
        """
        UpdateValues(self: FineFundamental, update: FineFundamental)

            Applies updated values from update to this

             instance





            update: The next data update for this instance
        """
        pass

    def __init__(self, *args):  # cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __str__(self, *args):  # cannot find CLR method
        pass

    AssetClassification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The instance of the AssetClassification class



Get: AssetClassification(self: FineFundamental) -> AssetClassification



Set: AssetClassification(self: FineFundamental) = value

"""

    CompanyProfile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The instance of the CompanyProfile class



Get: CompanyProfile(self: FineFundamental) -> CompanyProfile



Set: CompanyProfile(self: FineFundamental) = value

"""

    CompanyReference = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The instance of the CompanyReference class



Get: CompanyReference(self: FineFundamental) -> CompanyReference



Set: CompanyReference(self: FineFundamental) = value

"""

    EarningRatios = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The instance of the EarningRatios class



Get: EarningRatios(self: FineFundamental) -> EarningRatios



Set: EarningRatios(self: FineFundamental) = value

"""

    EarningReports = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The instance of the EarningReports class



Get: EarningReports(self: FineFundamental) -> EarningReports



Set: EarningReports(self: FineFundamental) = value

"""

    EndTime = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The end time of this data.



Get: EndTime(self: FineFundamental) -> DateTime



Set: EndTime(self: FineFundamental) = value

"""

    FinancialStatements = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The instance of the FinancialStatements class



Get: FinancialStatements(self: FineFundamental) -> FinancialStatements



Set: FinancialStatements(self: FineFundamental) = value

"""

    MarketCap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Price * Total SharesOutstanding.

            The most current market cap for example, would be the most recent closing price x the most recent reported shares outstanding.

            For ADR share classes, market cap is price * (ordinary shares outstanding / adr ratio).



Get: MarketCap(self: FineFundamental) -> Int64



"""

    OperationRatios = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The instance of the OperationRatios class



Get: OperationRatios(self: FineFundamental) -> OperationRatios



Set: OperationRatios(self: FineFundamental) = value

"""

    SecurityReference = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The instance of the SecurityReference class



Get: SecurityReference(self: FineFundamental) -> SecurityReference



Set: SecurityReference(self: FineFundamental) = value

"""

    ValuationRatios = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The instance of the ValuationRatios class



Get: ValuationRatios(self: FineFundamental) -> ValuationRatios



Set: ValuationRatios(self: FineFundamental) = value

"""


class FinishedGoodsBalanceSheet(MultiPeriodField):
    """
    The carrying amount as of the balance sheet date of merchandise or goods held by the company that are readily available for sale.

                This item is typically available for mining and manufacturing industries.



    FinishedGoodsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: FinishedGoodsBalanceSheet) -> Decimal



Set: NineMonths(self: FinishedGoodsBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: FinishedGoodsBalanceSheet) -> Decimal



Set: OneMonth(self: FinishedGoodsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: FinishedGoodsBalanceSheet) -> Decimal



Set: SixMonths(self: FinishedGoodsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FinishedGoodsBalanceSheet) -> Decimal



Set: ThreeMonths(self: FinishedGoodsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: FinishedGoodsBalanceSheet) -> Decimal



Set: TwelveMonths(self: FinishedGoodsBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: FinishedGoodsBalanceSheet) -> Decimal



Set: TwoMonths(self: FinishedGoodsBalanceSheet) = value

"""

    Store = None


class FixAssetsTuronver(MultiPeriodField):
    """
    Revenue / Average PP&E



    FixAssetsTuronver(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: FixAssetsTuronver) -> Decimal



Set: OneYear(self: FixAssetsTuronver) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: FixAssetsTuronver) -> Decimal



Set: SixMonths(self: FixAssetsTuronver) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FixAssetsTuronver) -> Decimal



Set: ThreeMonths(self: FixAssetsTuronver) = value

"""

    Store = None


class FixedAssetsRevaluationReserveBalanceSheet(MultiPeriodField):
    """
    Reserves created by revaluation of assets.



    FixedAssetsRevaluationReserveBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FixedAssetsRevaluationReserveBalanceSheet) -> Decimal



Set: ThreeMonths(self: FixedAssetsRevaluationReserveBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: FixedAssetsRevaluationReserveBalanceSheet) -> Decimal



Set: TwelveMonths(self: FixedAssetsRevaluationReserveBalanceSheet) = value

"""

    Store = None


class FixedMaturityInvestmentsBalanceSheet(MultiPeriodField):
    """
    This asset refers to types of investments that may be contained within the fixed maturity category which securities are having a

                stated final repayment date. Examples of items within this category may include bonds, including convertibles and bonds with

                warrants, and redeemable preferred stocks.



    FixedMaturityInvestmentsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: FixedMaturityInvestmentsBalanceSheet) -> Decimal



Set: NineMonths(self: FixedMaturityInvestmentsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: FixedMaturityInvestmentsBalanceSheet) -> Decimal



Set: SixMonths(self: FixedMaturityInvestmentsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FixedMaturityInvestmentsBalanceSheet) -> Decimal



Set: ThreeMonths(self: FixedMaturityInvestmentsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: FixedMaturityInvestmentsBalanceSheet) -> Decimal



Set: TwelveMonths(self: FixedMaturityInvestmentsBalanceSheet) = value

"""

    Store = None


class FlightFleetVehicleAndRelatedEquipmentsBalanceSheet(MultiPeriodField):
    """
    It is one of the important fixed assets for transportation industry, which includes bicycles, cars, motorcycles, trains, ships, boats,

                and aircraft.  This item is typically available for transportation industry.



    FlightFleetVehicleAndRelatedEquipmentsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: FlightFleetVehicleAndRelatedEquipmentsBalanceSheet) -> Decimal



Set: SixMonths(self: FlightFleetVehicleAndRelatedEquipmentsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FlightFleetVehicleAndRelatedEquipmentsBalanceSheet) -> Decimal



Set: ThreeMonths(self: FlightFleetVehicleAndRelatedEquipmentsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: FlightFleetVehicleAndRelatedEquipmentsBalanceSheet) -> Decimal



Set: TwelveMonths(self: FlightFleetVehicleAndRelatedEquipmentsBalanceSheet) = value

"""

    Store = None


class ForeclosedAssetsBalanceSheet(MultiPeriodField):
    """
    The carrying amount as of the balance sheet date of all assets obtained in full or partial satisfaction of a debt arrangement through

                foreclosure proceedings or defeasance; includes real and personal property; equity interests in corporations, partnerships, and joint

                ventures; and beneficial interest in trusts.  This item is typically typically available for bank industry.



    ForeclosedAssetsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ForeclosedAssetsBalanceSheet) -> Decimal



Set: NineMonths(self: ForeclosedAssetsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ForeclosedAssetsBalanceSheet) -> Decimal



Set: ThreeMonths(self: ForeclosedAssetsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ForeclosedAssetsBalanceSheet) -> Decimal



Set: TwelveMonths(self: ForeclosedAssetsBalanceSheet) = value

"""

    Store = None


class ForeignCurrencyTranslationAdjustmentsBalanceSheet(MultiPeriodField):
    """
    Changes to accumulated comprehensive income that results from the process of translating subsidiary financial statements and

                foreign equity investments into functional currency of the reporting company.



    ForeignCurrencyTranslationAdjustmentsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ForeignCurrencyTranslationAdjustmentsBalanceSheet) -> Decimal



Set: NineMonths(self: ForeignCurrencyTranslationAdjustmentsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ForeignCurrencyTranslationAdjustmentsBalanceSheet) -> Decimal



Set: SixMonths(self: ForeignCurrencyTranslationAdjustmentsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ForeignCurrencyTranslationAdjustmentsBalanceSheet) -> Decimal



Set: ThreeMonths(self: ForeignCurrencyTranslationAdjustmentsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ForeignCurrencyTranslationAdjustmentsBalanceSheet) -> Decimal



Set: TwelveMonths(self: ForeignCurrencyTranslationAdjustmentsBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: ForeignCurrencyTranslationAdjustmentsBalanceSheet) -> Decimal



Set: TwoMonths(self: ForeignCurrencyTranslationAdjustmentsBalanceSheet) = value

"""

    Store = None


class ForeignExchangeTradingGainsIncomeStatement(MultiPeriodField):
    """
    Trading revenues that result from foreign exchange exposures such as cash instruments and off-balance sheet derivative

                instruments. This item is usually only available for bank industry.



    ForeignExchangeTradingGainsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ForeignExchangeTradingGainsIncomeStatement) -> Decimal



Set: NineMonths(self: ForeignExchangeTradingGainsIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ForeignExchangeTradingGainsIncomeStatement) -> Decimal



Set: SixMonths(self: ForeignExchangeTradingGainsIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ForeignExchangeTradingGainsIncomeStatement) -> Decimal



Set: ThreeMonths(self: ForeignExchangeTradingGainsIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ForeignExchangeTradingGainsIncomeStatement) -> Decimal



Set: TwelveMonths(self: ForeignExchangeTradingGainsIncomeStatement) = value

"""

    Store = None


class FreeCashFlowCashFlowStatement(MultiPeriodField):
    """
    Cash Flow Operations minus Capital Expenditures.



    FreeCashFlowCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: FreeCashFlowCashFlowStatement) -> Decimal



Set: NineMonths(self: FreeCashFlowCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: FreeCashFlowCashFlowStatement) -> Decimal



Set: OneMonth(self: FreeCashFlowCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: FreeCashFlowCashFlowStatement) -> Decimal



Set: SixMonths(self: FreeCashFlowCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FreeCashFlowCashFlowStatement) -> Decimal



Set: ThreeMonths(self: FreeCashFlowCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: FreeCashFlowCashFlowStatement) -> Decimal



Set: TwelveMonths(self: FreeCashFlowCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: FreeCashFlowCashFlowStatement) -> Decimal



Set: TwoMonths(self: FreeCashFlowCashFlowStatement) = value

"""

    Store = None


class FuelAndPurchasePowerIncomeStatement(MultiPeriodField):
    """
    Cost of fuel, purchase power and gas associated with revenue generation. This item is usually only available for utility industry.



    FuelAndPurchasePowerIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: FuelAndPurchasePowerIncomeStatement) -> Decimal



Set: NineMonths(self: FuelAndPurchasePowerIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: FuelAndPurchasePowerIncomeStatement) -> Decimal



Set: SixMonths(self: FuelAndPurchasePowerIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FuelAndPurchasePowerIncomeStatement) -> Decimal



Set: ThreeMonths(self: FuelAndPurchasePowerIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: FuelAndPurchasePowerIncomeStatement) -> Decimal



Set: TwelveMonths(self: FuelAndPurchasePowerIncomeStatement) = value

"""

    Store = None


class FuelIncomeStatement(MultiPeriodField):
    """
    The aggregate amount of fuel cost for current period associated with the revenue generation. This item is usually only available for

                transportation industry.



    FuelIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: FuelIncomeStatement) -> Decimal



Set: NineMonths(self: FuelIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: FuelIncomeStatement) -> Decimal



Set: OneMonth(self: FuelIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: FuelIncomeStatement) -> Decimal



Set: SixMonths(self: FuelIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FuelIncomeStatement) -> Decimal



Set: ThreeMonths(self: FuelIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: FuelIncomeStatement) -> Decimal



Set: TwelveMonths(self: FuelIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: FuelIncomeStatement) -> Decimal



Set: TwoMonths(self: FuelIncomeStatement) = value

"""

    Store = None


class Fundamentals(FineFundamental, IBaseData):
    """
    Defines a merged viw of QuantConnect.Data.Fundamental.FineFundamental and QuantConnect.Data.UniverseSelection.CoarseFundamental



    Fundamentals()
    """

    def GetSource(self, config, date, *__args):
        """
        GetSource(self: Fundamentals, config: SubscriptionDataConfig, date: DateTime, isLiveMode: bool) -> SubscriptionDataSource



            Return the URL string source of the file. This

             will be converted to a stream
        """
        pass

    def Reader(self, config, *__args):
        """
        Reader(self: Fundamentals, config: SubscriptionDataConfig, line: str, date: DateTime, isLiveMode: bool) -> BaseData



            Reader converts each line of the data source into

             BaseData objects. Each data type creates its own

             factory method, and returns a new instance of the

             object

                    each time it is called. The

             returned object is assumed to be time stamped in

             the config.ExchangeTimeZone.
        """
        pass

    def __init__(self, *args):  # cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __str__(self, *args):  # cannot find CLR method
        pass

    DollarVolume = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the day's dollar volume for this symbol



Get: DollarVolume(self: Fundamentals) -> Decimal



Set: DollarVolume(self: Fundamentals) = value

"""

    HasFundamentalData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns whether the symbol has fundamental data for the given date



Get: HasFundamentalData(self: Fundamentals) -> bool



Set: HasFundamentalData(self: Fundamentals) = value

"""

    Market = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the market for this symbol



Get: Market(self: Fundamentals) -> str



Set: Market(self: Fundamentals) = value

"""

    Volume = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the day's total volume



Get: Volume(self: Fundamentals) -> Int64



Set: Volume(self: Fundamentals) = value

"""


class FundFromOperationCashFlowStatement(MultiPeriodField):
    """
    Funds from operations; populated only for real estate investment trusts (REITs), defined as the sum of net income, gain/loss

                (realized and unrealized) on investment securities, asset impairment charge, depreciation and amortization and gain/ loss on the

                sale of business and property plant and equipment.



    FundFromOperationCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: FundFromOperationCashFlowStatement) -> Decimal



Set: NineMonths(self: FundFromOperationCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: FundFromOperationCashFlowStatement) -> Decimal



Set: SixMonths(self: FundFromOperationCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FundFromOperationCashFlowStatement) -> Decimal



Set: ThreeMonths(self: FundFromOperationCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: FundFromOperationCashFlowStatement) -> Decimal



Set: TwelveMonths(self: FundFromOperationCashFlowStatement) = value

"""

    Store = None


class FuturePolicyBenefitsBalanceSheet(MultiPeriodField):
    """
    Accounting policy pertaining to an insurance entity's net liability for future benefits (for example, death, cash surrender value) to be

                paid to or on behalf of policyholders, describing the bases, methodologies and components of the reserve, and assumptions

                regarding estimates of expected investment yields, mortality, morbidity, terminations and expenses.



    FuturePolicyBenefitsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: FuturePolicyBenefitsBalanceSheet) -> Decimal



Set: ThreeMonths(self: FuturePolicyBenefitsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: FuturePolicyBenefitsBalanceSheet) -> Decimal



Set: TwelveMonths(self: FuturePolicyBenefitsBalanceSheet) = value

"""

    Store = None


class GainLossonDerecognitionofAvailableForSaleFinancialAssetsIncomeStatement(MultiPeriodField):
    """
    Gain/loss on the write-off of financial assets available-for-sale.



    GainLossonDerecognitionofAvailableForSaleFinancialAssetsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: GainLossonDerecognitionofAvailableForSaleFinancialAssetsIncomeStatement) -> Decimal



Set: NineMonths(self: GainLossonDerecognitionofAvailableForSaleFinancialAssetsIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: GainLossonDerecognitionofAvailableForSaleFinancialAssetsIncomeStatement) -> Decimal



Set: SixMonths(self: GainLossonDerecognitionofAvailableForSaleFinancialAssetsIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: GainLossonDerecognitionofAvailableForSaleFinancialAssetsIncomeStatement) -> Decimal



Set: ThreeMonths(self: GainLossonDerecognitionofAvailableForSaleFinancialAssetsIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: GainLossonDerecognitionofAvailableForSaleFinancialAssetsIncomeStatement) -> Decimal



Set: TwelveMonths(self: GainLossonDerecognitionofAvailableForSaleFinancialAssetsIncomeStatement) = value

"""

    Store = None


class GainLossonFinancialInstrumentsDesignatedasCashFlowHedgesIncomeStatement(MultiPeriodField):
    """
    Gain/Loss through hedging activities.



    GainLossonFinancialInstrumentsDesignatedasCashFlowHedgesIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: GainLossonFinancialInstrumentsDesignatedasCashFlowHedgesIncomeStatement) -> Decimal



Set: NineMonths(self: GainLossonFinancialInstrumentsDesignatedasCashFlowHedgesIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: GainLossonFinancialInstrumentsDesignatedasCashFlowHedgesIncomeStatement) -> Decimal



Set: SixMonths(self: GainLossonFinancialInstrumentsDesignatedasCashFlowHedgesIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: GainLossonFinancialInstrumentsDesignatedasCashFlowHedgesIncomeStatement) -> Decimal



Set: ThreeMonths(self: GainLossonFinancialInstrumentsDesignatedasCashFlowHedgesIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: GainLossonFinancialInstrumentsDesignatedasCashFlowHedgesIncomeStatement) -> Decimal



Set: TwelveMonths(self: GainLossonFinancialInstrumentsDesignatedasCashFlowHedgesIncomeStatement) = value

"""

    Store = None


class GainLossOnInvestmentSecuritiesCashFlowStatement(MultiPeriodField):
    """
    This item represents the net total realized gain (loss) included in earnings for the period as a result of selling or holding marketable

                securities categorized as trading, available-for-sale, or held-to-maturity, including the unrealized holding gain or loss of held-to-

                maturity securities transferred to the trading security category and the cumulative unrealized gain or loss which was included in

                other comprehensive income (a separate component of shareholders' equity) for available-for-sale securities transferred to trading

                securities during the PeriodAsByte. Additionally, this item would include any losses recognized for other than temporary impairments of the

                subject investments in debt and equity securities.



    GainLossOnInvestmentSecuritiesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: GainLossOnInvestmentSecuritiesCashFlowStatement) -> Decimal



Set: NineMonths(self: GainLossOnInvestmentSecuritiesCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: GainLossOnInvestmentSecuritiesCashFlowStatement) -> Decimal



Set: OneMonth(self: GainLossOnInvestmentSecuritiesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: GainLossOnInvestmentSecuritiesCashFlowStatement) -> Decimal



Set: SixMonths(self: GainLossOnInvestmentSecuritiesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: GainLossOnInvestmentSecuritiesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: GainLossOnInvestmentSecuritiesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: GainLossOnInvestmentSecuritiesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: GainLossOnInvestmentSecuritiesCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: GainLossOnInvestmentSecuritiesCashFlowStatement) -> Decimal



Set: TwoMonths(self: GainLossOnInvestmentSecuritiesCashFlowStatement) = value

"""

    Store = None


class GainLossonSaleofAssetsIncomeStatement(MultiPeriodField):
    """
    Any gain (loss) recognized on the sale of assets or a sale which generates profit or loss, which is a difference between sales price

                and net book value at the disposal time.



    GainLossonSaleofAssetsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: GainLossonSaleofAssetsIncomeStatement) -> Decimal



Set: NineMonths(self: GainLossonSaleofAssetsIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: GainLossonSaleofAssetsIncomeStatement) -> Decimal



Set: OneMonth(self: GainLossonSaleofAssetsIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: GainLossonSaleofAssetsIncomeStatement) -> Decimal



Set: SixMonths(self: GainLossonSaleofAssetsIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: GainLossonSaleofAssetsIncomeStatement) -> Decimal



Set: ThreeMonths(self: GainLossonSaleofAssetsIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: GainLossonSaleofAssetsIncomeStatement) -> Decimal



Set: TwelveMonths(self: GainLossonSaleofAssetsIncomeStatement) = value

"""

    Store = None


class GainLossOnSaleOfBusinessCashFlowStatement(MultiPeriodField):
    """
    The difference between the sale price or salvage price and the book value of an asset that was sold or retired during the reporting

                PeriodAsByte. This element refers to the gain (loss) and not to the cash proceeds of the business. This element is a non-cash adjustment

                to net income when calculating net cash generated by operating activities using the indirect method.



    GainLossOnSaleOfBusinessCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: GainLossOnSaleOfBusinessCashFlowStatement) -> Decimal



Set: NineMonths(self: GainLossOnSaleOfBusinessCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: GainLossOnSaleOfBusinessCashFlowStatement) -> Decimal



Set: OneMonth(self: GainLossOnSaleOfBusinessCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: GainLossOnSaleOfBusinessCashFlowStatement) -> Decimal



Set: SixMonths(self: GainLossOnSaleOfBusinessCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: GainLossOnSaleOfBusinessCashFlowStatement) -> Decimal



Set: ThreeMonths(self: GainLossOnSaleOfBusinessCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: GainLossOnSaleOfBusinessCashFlowStatement) -> Decimal



Set: TwelveMonths(self: GainLossOnSaleOfBusinessCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: GainLossOnSaleOfBusinessCashFlowStatement) -> Decimal



Set: TwoMonths(self: GainLossOnSaleOfBusinessCashFlowStatement) = value

"""

    Store = None


class GainLossOnSaleOfPPECashFlowStatement(MultiPeriodField):
    """
    The difference between the sale price or salvage price and the book value of the property, plant and equipment that was sold or

                retired during the reporting PeriodAsByte. Includes the amount received from selling any fixed assets such as property, plant and

                equipment. Usually this section also includes any retirement of equipment. Such as Sale of business segments; Sale of credit and

                receivables; Property disposition; Proceeds from sale or disposition of business or investment; Decrease in excess of purchase price

                over acquired net assets; Abandoned project (expenditures) credit; Allowances for other funds during construction.



    GainLossOnSaleOfPPECashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: GainLossOnSaleOfPPECashFlowStatement) -> Decimal



Set: NineMonths(self: GainLossOnSaleOfPPECashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: GainLossOnSaleOfPPECashFlowStatement) -> Decimal



Set: OneMonth(self: GainLossOnSaleOfPPECashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: GainLossOnSaleOfPPECashFlowStatement) -> Decimal



Set: SixMonths(self: GainLossOnSaleOfPPECashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: GainLossOnSaleOfPPECashFlowStatement) -> Decimal



Set: ThreeMonths(self: GainLossOnSaleOfPPECashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: GainLossOnSaleOfPPECashFlowStatement) -> Decimal



Set: TwelveMonths(self: GainLossOnSaleOfPPECashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: GainLossOnSaleOfPPECashFlowStatement) -> Decimal



Set: TwoMonths(self: GainLossOnSaleOfPPECashFlowStatement) = value

"""

    Store = None


class GainonInvestmentPropertiesIncomeStatement(MultiPeriodField):
    """
    Gain on disposal and change in fair value of investment properties.



    GainonInvestmentPropertiesIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: GainonInvestmentPropertiesIncomeStatement) -> Decimal



Set: NineMonths(self: GainonInvestmentPropertiesIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: GainonInvestmentPropertiesIncomeStatement) -> Decimal



Set: SixMonths(self: GainonInvestmentPropertiesIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: GainonInvestmentPropertiesIncomeStatement) -> Decimal



Set: ThreeMonths(self: GainonInvestmentPropertiesIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: GainonInvestmentPropertiesIncomeStatement) -> Decimal



Set: TwelveMonths(self: GainonInvestmentPropertiesIncomeStatement) = value

"""

    Store = None


class GainOnSaleOfBusinessIncomeStatement(MultiPeriodField):
    """
    The amount of excess earned in comparison to fair value when selling a business. This item is usually not available for insurance

                industry.



    GainOnSaleOfBusinessIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: GainOnSaleOfBusinessIncomeStatement) -> Decimal



Set: NineMonths(self: GainOnSaleOfBusinessIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: GainOnSaleOfBusinessIncomeStatement) -> Decimal



Set: OneMonth(self: GainOnSaleOfBusinessIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: GainOnSaleOfBusinessIncomeStatement) -> Decimal



Set: SixMonths(self: GainOnSaleOfBusinessIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: GainOnSaleOfBusinessIncomeStatement) -> Decimal



Set: ThreeMonths(self: GainOnSaleOfBusinessIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: GainOnSaleOfBusinessIncomeStatement) -> Decimal



Set: TwelveMonths(self: GainOnSaleOfBusinessIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: GainOnSaleOfBusinessIncomeStatement) -> Decimal



Set: TwoMonths(self: GainOnSaleOfBusinessIncomeStatement) = value

"""

    Store = None


class GainonSaleofInvestmentPropertyIncomeStatement(MultiPeriodField):
    """
    Gain on the disposal of investment property.



    GainonSaleofInvestmentPropertyIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: GainonSaleofInvestmentPropertyIncomeStatement) -> Decimal



Set: NineMonths(self: GainonSaleofInvestmentPropertyIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: GainonSaleofInvestmentPropertyIncomeStatement) -> Decimal



Set: SixMonths(self: GainonSaleofInvestmentPropertyIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: GainonSaleofInvestmentPropertyIncomeStatement) -> Decimal



Set: ThreeMonths(self: GainonSaleofInvestmentPropertyIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: GainonSaleofInvestmentPropertyIncomeStatement) -> Decimal



Set: TwelveMonths(self: GainonSaleofInvestmentPropertyIncomeStatement) = value

"""

    Store = None


class GainonSaleofLoansIncomeStatement(MultiPeriodField):
    """
    Gain on sale of any loans investment.



    GainonSaleofLoansIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: GainonSaleofLoansIncomeStatement) -> Decimal



Set: NineMonths(self: GainonSaleofLoansIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: GainonSaleofLoansIncomeStatement) -> Decimal



Set: OneMonth(self: GainonSaleofLoansIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: GainonSaleofLoansIncomeStatement) -> Decimal



Set: SixMonths(self: GainonSaleofLoansIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: GainonSaleofLoansIncomeStatement) -> Decimal



Set: ThreeMonths(self: GainonSaleofLoansIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: GainonSaleofLoansIncomeStatement) -> Decimal



Set: TwelveMonths(self: GainonSaleofLoansIncomeStatement) = value

"""

    Store = None


class GainOnSaleOfPPEIncomeStatement(MultiPeriodField):
    """
    The amount of excess earned in comparison to the net book value for sale of property, plant, equipment. This item is usually not

                available for bank and insurance industries.



    GainOnSaleOfPPEIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: GainOnSaleOfPPEIncomeStatement) -> Decimal



Set: NineMonths(self: GainOnSaleOfPPEIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: GainOnSaleOfPPEIncomeStatement) -> Decimal



Set: OneMonth(self: GainOnSaleOfPPEIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: GainOnSaleOfPPEIncomeStatement) -> Decimal



Set: SixMonths(self: GainOnSaleOfPPEIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: GainOnSaleOfPPEIncomeStatement) -> Decimal



Set: ThreeMonths(self: GainOnSaleOfPPEIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: GainOnSaleOfPPEIncomeStatement) -> Decimal



Set: TwelveMonths(self: GainOnSaleOfPPEIncomeStatement) = value

"""

    Store = None


class GainOnSaleOfSecurityIncomeStatement(MultiPeriodField):
    """
    The amount of excess earned in comparison to the original purchase value of the security.



    GainOnSaleOfSecurityIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: GainOnSaleOfSecurityIncomeStatement) -> Decimal



Set: NineMonths(self: GainOnSaleOfSecurityIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: GainOnSaleOfSecurityIncomeStatement) -> Decimal



Set: OneMonth(self: GainOnSaleOfSecurityIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: GainOnSaleOfSecurityIncomeStatement) -> Decimal



Set: SixMonths(self: GainOnSaleOfSecurityIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: GainOnSaleOfSecurityIncomeStatement) -> Decimal



Set: ThreeMonths(self: GainOnSaleOfSecurityIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: GainOnSaleOfSecurityIncomeStatement) -> Decimal



Set: TwelveMonths(self: GainOnSaleOfSecurityIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: GainOnSaleOfSecurityIncomeStatement) -> Decimal



Set: TwoMonths(self: GainOnSaleOfSecurityIncomeStatement) = value

"""

    Store = None


class GainsLossesNotAffectingRetainedEarningsBalanceSheet(MultiPeriodField):
    """
    The aggregate amount of gains or losses that are not part of retained earnings. It is also called other comprehensive income.



    GainsLossesNotAffectingRetainedEarningsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: GainsLossesNotAffectingRetainedEarningsBalanceSheet) -> Decimal



Set: NineMonths(self: GainsLossesNotAffectingRetainedEarningsBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: GainsLossesNotAffectingRetainedEarningsBalanceSheet) -> Decimal



Set: OneMonth(self: GainsLossesNotAffectingRetainedEarningsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: GainsLossesNotAffectingRetainedEarningsBalanceSheet) -> Decimal



Set: SixMonths(self: GainsLossesNotAffectingRetainedEarningsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: GainsLossesNotAffectingRetainedEarningsBalanceSheet) -> Decimal



Set: ThreeMonths(self: GainsLossesNotAffectingRetainedEarningsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: GainsLossesNotAffectingRetainedEarningsBalanceSheet) -> Decimal



Set: TwelveMonths(self: GainsLossesNotAffectingRetainedEarningsBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: GainsLossesNotAffectingRetainedEarningsBalanceSheet) -> Decimal



Set: TwoMonths(self: GainsLossesNotAffectingRetainedEarningsBalanceSheet) = value

"""

    Store = None


class GainsLossesonFinancialInstrumentsDuetoFairValueAdjustmentsinHedgeAccountingTotalIncomeStatement(MultiPeriodField):
    """
    Gain or loss on derivatives investment due to the fair value adjustment.



    GainsLossesonFinancialInstrumentsDuetoFairValueAdjustmentsinHedgeAccountingTotalIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: GainsLossesonFinancialInstrumentsDuetoFairValueAdjustmentsinHedgeAccountingTotalIncomeStatement) -> Decimal



Set: NineMonths(self: GainsLossesonFinancialInstrumentsDuetoFairValueAdjustmentsinHedgeAccountingTotalIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: GainsLossesonFinancialInstrumentsDuetoFairValueAdjustmentsinHedgeAccountingTotalIncomeStatement) -> Decimal



Set: SixMonths(self: GainsLossesonFinancialInstrumentsDuetoFairValueAdjustmentsinHedgeAccountingTotalIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: GainsLossesonFinancialInstrumentsDuetoFairValueAdjustmentsinHedgeAccountingTotalIncomeStatement) -> Decimal



Set: ThreeMonths(self: GainsLossesonFinancialInstrumentsDuetoFairValueAdjustmentsinHedgeAccountingTotalIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: GainsLossesonFinancialInstrumentsDuetoFairValueAdjustmentsinHedgeAccountingTotalIncomeStatement) -> Decimal



Set: TwelveMonths(self: GainsLossesonFinancialInstrumentsDuetoFairValueAdjustmentsinHedgeAccountingTotalIncomeStatement) = value

"""

    Store = None


class GeneralAndAdministrativeExpenseIncomeStatement(MultiPeriodField):
    """
    The aggregate total of general managing and administering expenses for the company.



    GeneralAndAdministrativeExpenseIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: GeneralAndAdministrativeExpenseIncomeStatement) -> Decimal



Set: NineMonths(self: GeneralAndAdministrativeExpenseIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: GeneralAndAdministrativeExpenseIncomeStatement) -> Decimal



Set: OneMonth(self: GeneralAndAdministrativeExpenseIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: GeneralAndAdministrativeExpenseIncomeStatement) -> Decimal



Set: SixMonths(self: GeneralAndAdministrativeExpenseIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: GeneralAndAdministrativeExpenseIncomeStatement) -> Decimal



Set: ThreeMonths(self: GeneralAndAdministrativeExpenseIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: GeneralAndAdministrativeExpenseIncomeStatement) -> Decimal



Set: TwelveMonths(self: GeneralAndAdministrativeExpenseIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: GeneralAndAdministrativeExpenseIncomeStatement) -> Decimal



Set: TwoMonths(self: GeneralAndAdministrativeExpenseIncomeStatement) = value

"""

    Store = None


class GeneralPartnershipCapitalBalanceSheet(MultiPeriodField):
    """
    In a limited partnership or master limited partnership form of business, this represents the balance of capital held by the general

                partners.



    GeneralPartnershipCapitalBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: GeneralPartnershipCapitalBalanceSheet) -> Decimal



Set: SixMonths(self: GeneralPartnershipCapitalBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: GeneralPartnershipCapitalBalanceSheet) -> Decimal



Set: ThreeMonths(self: GeneralPartnershipCapitalBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: GeneralPartnershipCapitalBalanceSheet) -> Decimal



Set: TwelveMonths(self: GeneralPartnershipCapitalBalanceSheet) = value

"""

    Store = None


class GoodwillAndOtherIntangibleAssetsBalanceSheet(MultiPeriodField):
    """
    Rights or economic benefits, such as patents and goodwill, that is not physical in nature. They are those that are neither physical

                nor financial in nature, nevertheless, have value to the company. Intangibles are listed net of accumulated amortization.



    GoodwillAndOtherIntangibleAssetsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: GoodwillAndOtherIntangibleAssetsBalanceSheet) -> Decimal



Set: NineMonths(self: GoodwillAndOtherIntangibleAssetsBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: GoodwillAndOtherIntangibleAssetsBalanceSheet) -> Decimal



Set: OneMonth(self: GoodwillAndOtherIntangibleAssetsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: GoodwillAndOtherIntangibleAssetsBalanceSheet) -> Decimal



Set: SixMonths(self: GoodwillAndOtherIntangibleAssetsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: GoodwillAndOtherIntangibleAssetsBalanceSheet) -> Decimal



Set: ThreeMonths(self: GoodwillAndOtherIntangibleAssetsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: GoodwillAndOtherIntangibleAssetsBalanceSheet) -> Decimal



Set: TwelveMonths(self: GoodwillAndOtherIntangibleAssetsBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: GoodwillAndOtherIntangibleAssetsBalanceSheet) -> Decimal



Set: TwoMonths(self: GoodwillAndOtherIntangibleAssetsBalanceSheet) = value

"""

    Store = None


class GoodwillBalanceSheet(MultiPeriodField):
    """
    The excess of the cost of an acquired company over the sum of the fair market value of its identifiable individual assets less the

                liabilities.



    GoodwillBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: GoodwillBalanceSheet) -> Decimal



Set: NineMonths(self: GoodwillBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: GoodwillBalanceSheet) -> Decimal



Set: OneMonth(self: GoodwillBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: GoodwillBalanceSheet) -> Decimal



Set: SixMonths(self: GoodwillBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: GoodwillBalanceSheet) -> Decimal



Set: ThreeMonths(self: GoodwillBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: GoodwillBalanceSheet) -> Decimal



Set: TwelveMonths(self: GoodwillBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: GoodwillBalanceSheet) -> Decimal



Set: TwoMonths(self: GoodwillBalanceSheet) = value

"""

    Store = None


class GrossAccountsReceivableBalanceSheet(MultiPeriodField):
    """
    Accounts owed to a company by customers within a year as a result of exchanging goods or services on credit.



    GrossAccountsReceivableBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: GrossAccountsReceivableBalanceSheet) -> Decimal



Set: ThreeMonths(self: GrossAccountsReceivableBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: GrossAccountsReceivableBalanceSheet) -> Decimal



Set: TwelveMonths(self: GrossAccountsReceivableBalanceSheet) = value

"""

    Store = None


class GrossDividendPaymentIncomeStatement(MultiPeriodField):
    """
    Total amount paid in dividends to investors- this includes dividends paid on equity and non-equity shares.



    GrossDividendPaymentIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: GrossDividendPaymentIncomeStatement) -> Decimal



Set: NineMonths(self: GrossDividendPaymentIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: GrossDividendPaymentIncomeStatement) -> Decimal



Set: ThreeMonths(self: GrossDividendPaymentIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: GrossDividendPaymentIncomeStatement) -> Decimal



Set: TwelveMonths(self: GrossDividendPaymentIncomeStatement) = value

"""

    Store = None


class GrossLoanBalanceSheet(MultiPeriodField):
    """
    Represents the sum of all loans (commercial, consumer, mortgage, etc.) as well as leases before any provisions for loan losses or

                unearned discounts.



    GrossLoanBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: GrossLoanBalanceSheet) -> Decimal



Set: NineMonths(self: GrossLoanBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: GrossLoanBalanceSheet) -> Decimal



Set: SixMonths(self: GrossLoanBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: GrossLoanBalanceSheet) -> Decimal



Set: ThreeMonths(self: GrossLoanBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: GrossLoanBalanceSheet) -> Decimal



Set: TwelveMonths(self: GrossLoanBalanceSheet) = value

"""

    Store = None


class GrossMargin(MultiPeriodField):
    """
    Refers to the ratio of gross profit to revenue. Morningstar calculates the ratio by using the underlying data reported in the company

                filings or reports:   (Revenue - Cost of Goods Sold) / Revenue.



    GrossMargin(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: GrossMargin) -> Decimal



Set: NineMonths(self: GrossMargin) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: GrossMargin) -> Decimal



Set: OneMonth(self: GrossMargin) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: GrossMargin) -> Decimal



Set: OneYear(self: GrossMargin) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: GrossMargin) -> Decimal



Set: SixMonths(self: GrossMargin) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: GrossMargin) -> Decimal



Set: ThreeMonths(self: GrossMargin) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: GrossMargin) -> Decimal



Set: TwoMonths(self: GrossMargin) = value

"""

    Store = None


class GrossMargin5YrAvg(MultiPeriodField):
    """
    This is the simple average of the company's Annual Gross Margin over the last 5 years. Gross Margin is Total Revenue minus Cost

                of Goods Sold divided by Total Revenue and is expressed as a percentage.



    GrossMargin5YrAvg(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: GrossMargin5YrAvg) -> Decimal



Set: FiveYears(self: GrossMargin5YrAvg) = value

"""

    Store = None


class GrossNotesReceivableBalanceSheet(MultiPeriodField):
    """
    An amount representing an agreement for an unconditional promise by the maker to pay the entity (holder) a definite sum of money

                at a future date(s) within one year of the balance sheet date or the normal operating cycle. Such amount may include accrued

                interest receivable in accordance with the terms of the note. The note also may contain provisions including a discount or premium,

                payable on demand, secured, or unsecured, interest bearing or non-interest bearing, among myriad other features and

                characteristics. This item is typically available for bank industry.



    GrossNotesReceivableBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: GrossNotesReceivableBalanceSheet) -> Decimal



Set: ThreeMonths(self: GrossNotesReceivableBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: GrossNotesReceivableBalanceSheet) -> Decimal



Set: TwelveMonths(self: GrossNotesReceivableBalanceSheet) = value

"""

    Store = None


class GrossPPEBalanceSheet(MultiPeriodField):
    """
    Carrying amount at the balance sheet date for long-lived physical assets used in the normal conduct of business and not intended

                for resale. This can include land, physical structures, machinery, vehicles, furniture, computer equipment, construction in progress,

                and similar items. Amount does not include depreciation.



    GrossPPEBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: GrossPPEBalanceSheet) -> Decimal



Set: NineMonths(self: GrossPPEBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: GrossPPEBalanceSheet) -> Decimal



Set: OneMonth(self: GrossPPEBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: GrossPPEBalanceSheet) -> Decimal



Set: SixMonths(self: GrossPPEBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: GrossPPEBalanceSheet) -> Decimal



Set: ThreeMonths(self: GrossPPEBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: GrossPPEBalanceSheet) -> Decimal



Set: TwelveMonths(self: GrossPPEBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: GrossPPEBalanceSheet) -> Decimal



Set: TwoMonths(self: GrossPPEBalanceSheet) = value

"""

    Store = None


class GrossPremiumsWrittenIncomeStatement(MultiPeriodField):
    """
    Total premiums generated from all policies written by an insurance company within a given period of time. This item is usually only

                available for insurance industry.



    GrossPremiumsWrittenIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: GrossPremiumsWrittenIncomeStatement) -> Decimal



Set: NineMonths(self: GrossPremiumsWrittenIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: GrossPremiumsWrittenIncomeStatement) -> Decimal



Set: SixMonths(self: GrossPremiumsWrittenIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: GrossPremiumsWrittenIncomeStatement) -> Decimal



Set: ThreeMonths(self: GrossPremiumsWrittenIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: GrossPremiumsWrittenIncomeStatement) -> Decimal



Set: TwelveMonths(self: GrossPremiumsWrittenIncomeStatement) = value

"""

    Store = None


class GrossProfitAnnual5YrGrowth(MultiPeriodField):
    """
    This is the compound annual growth rate of the company's Gross Profit over the last 5 years.



    GrossProfitAnnual5YrGrowth(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: GrossProfitAnnual5YrGrowth) -> Decimal



Set: FiveYears(self: GrossProfitAnnual5YrGrowth) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: GrossProfitAnnual5YrGrowth) -> Decimal



Set: OneYear(self: GrossProfitAnnual5YrGrowth) = value

"""

    ThreeYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeYears period value for the field



Get: ThreeYears(self: GrossProfitAnnual5YrGrowth) -> Decimal



Set: ThreeYears(self: GrossProfitAnnual5YrGrowth) = value

"""

    Store = None


class GrossProfitIncomeStatement(MultiPeriodField):
    """
    Total revenue less cost of revenue. The number is as reported by the company on the income statement; however, the number will

                be calculated if it is not reported. This field is null if the cost of revenue is not given.

                Gross Profit = Total Revenue - Cost of Revenue.



    GrossProfitIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: GrossProfitIncomeStatement) -> Decimal



Set: NineMonths(self: GrossProfitIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: GrossProfitIncomeStatement) -> Decimal



Set: OneMonth(self: GrossProfitIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: GrossProfitIncomeStatement) -> Decimal



Set: SixMonths(self: GrossProfitIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: GrossProfitIncomeStatement) -> Decimal



Set: ThreeMonths(self: GrossProfitIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: GrossProfitIncomeStatement) -> Decimal



Set: TwelveMonths(self: GrossProfitIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: GrossProfitIncomeStatement) -> Decimal



Set: TwoMonths(self: GrossProfitIncomeStatement) = value

"""

    Store = None


class HedgingAssetsCurrentBalanceSheet(MultiPeriodField):
    """
    A security transaction which expires within a 12 month period that reduces the risk on an existing investment position.



    HedgingAssetsCurrentBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: HedgingAssetsCurrentBalanceSheet) -> Decimal



Set: ThreeMonths(self: HedgingAssetsCurrentBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: HedgingAssetsCurrentBalanceSheet) -> Decimal



Set: TwelveMonths(self: HedgingAssetsCurrentBalanceSheet) = value

"""

    Store = None


class HeldToMaturitySecuritiesBalanceSheet(MultiPeriodField):
    """
    Debt securities that a firm has the ability and intent to hold until maturity.



    HeldToMaturitySecuritiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: HeldToMaturitySecuritiesBalanceSheet) -> Decimal



Set: NineMonths(self: HeldToMaturitySecuritiesBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: HeldToMaturitySecuritiesBalanceSheet) -> Decimal



Set: SixMonths(self: HeldToMaturitySecuritiesBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: HeldToMaturitySecuritiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: HeldToMaturitySecuritiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: HeldToMaturitySecuritiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: HeldToMaturitySecuritiesBalanceSheet) = value

"""

    Store = None


class ImpairmentLossesReversalsFinancialInstrumentsNetIncomeStatement(MultiPeriodField):
    """
    Impairment or reversal of impairment on financial instrument such as derivative. This is a contra account under Total Revenue in

                banks.



    ImpairmentLossesReversalsFinancialInstrumentsNetIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ImpairmentLossesReversalsFinancialInstrumentsNetIncomeStatement) -> Decimal



Set: NineMonths(self: ImpairmentLossesReversalsFinancialInstrumentsNetIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ImpairmentLossesReversalsFinancialInstrumentsNetIncomeStatement) -> Decimal



Set: SixMonths(self: ImpairmentLossesReversalsFinancialInstrumentsNetIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ImpairmentLossesReversalsFinancialInstrumentsNetIncomeStatement) -> Decimal



Set: ThreeMonths(self: ImpairmentLossesReversalsFinancialInstrumentsNetIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ImpairmentLossesReversalsFinancialInstrumentsNetIncomeStatement) -> Decimal



Set: TwelveMonths(self: ImpairmentLossesReversalsFinancialInstrumentsNetIncomeStatement) = value

"""

    Store = None


class ImpairmentLossReversalRecognizedinProfitorLossCashFlowStatement(MultiPeriodField):
    """
    The difference between the future net cash flows expected to be received from the asset and its book value, recognized in the

                Income Statement.



    ImpairmentLossReversalRecognizedinProfitorLossCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ImpairmentLossReversalRecognizedinProfitorLossCashFlowStatement) -> Decimal



Set: NineMonths(self: ImpairmentLossReversalRecognizedinProfitorLossCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ImpairmentLossReversalRecognizedinProfitorLossCashFlowStatement) -> Decimal



Set: SixMonths(self: ImpairmentLossReversalRecognizedinProfitorLossCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ImpairmentLossReversalRecognizedinProfitorLossCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ImpairmentLossReversalRecognizedinProfitorLossCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ImpairmentLossReversalRecognizedinProfitorLossCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ImpairmentLossReversalRecognizedinProfitorLossCashFlowStatement) = value

"""

    Store = None


class ImpairmentOfCapitalAssetsIncomeStatement(MultiPeriodField):
    """
    Impairments are considered to be permanent, which is a downward revaluation of fixed assets. If the sum of all estimated future

                cash flows is less than the carrying value of the asset, then the asset would be considered impaired and would have to be written

                down to its fair value. Once an asset is written down, it may only be written back up under very few circumstances. Usually the

                company uses the sum of undiscounted future cash flows to determine if the impairment should occur, and uses the sum of

                discounted future cash flows to make the impairment judgment. The impairment decision emphasizes on capital assets' future

                profit collection ability.



    ImpairmentOfCapitalAssetsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ImpairmentOfCapitalAssetsIncomeStatement) -> Decimal



Set: NineMonths(self: ImpairmentOfCapitalAssetsIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: ImpairmentOfCapitalAssetsIncomeStatement) -> Decimal



Set: OneMonth(self: ImpairmentOfCapitalAssetsIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ImpairmentOfCapitalAssetsIncomeStatement) -> Decimal



Set: SixMonths(self: ImpairmentOfCapitalAssetsIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ImpairmentOfCapitalAssetsIncomeStatement) -> Decimal



Set: ThreeMonths(self: ImpairmentOfCapitalAssetsIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ImpairmentOfCapitalAssetsIncomeStatement) -> Decimal



Set: TwelveMonths(self: ImpairmentOfCapitalAssetsIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: ImpairmentOfCapitalAssetsIncomeStatement) -> Decimal



Set: TwoMonths(self: ImpairmentOfCapitalAssetsIncomeStatement) = value

"""

    Store = None


class IncomefromAssociatesandOtherParticipatingInterestsIncomeStatement(MultiPeriodField):
    """
    Total income from the associates and joint venture via investment, accounted for in the Non-Operating section.



    IncomefromAssociatesandOtherParticipatingInterestsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: IncomefromAssociatesandOtherParticipatingInterestsIncomeStatement) -> Decimal



Set: NineMonths(self: IncomefromAssociatesandOtherParticipatingInterestsIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: IncomefromAssociatesandOtherParticipatingInterestsIncomeStatement) -> Decimal



Set: SixMonths(self: IncomefromAssociatesandOtherParticipatingInterestsIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: IncomefromAssociatesandOtherParticipatingInterestsIncomeStatement) -> Decimal



Set: ThreeMonths(self: IncomefromAssociatesandOtherParticipatingInterestsIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: IncomefromAssociatesandOtherParticipatingInterestsIncomeStatement) -> Decimal



Set: TwelveMonths(self: IncomefromAssociatesandOtherParticipatingInterestsIncomeStatement) = value

"""

    Store = None


class IncomeStatement(object):
    """
    Definition of the IncomeStatement class



    IncomeStatement()
    """

    def UpdateValues(self, update):
        """
        UpdateValues(self: IncomeStatement, update: IncomeStatement)

            Applies updated values from update to this

             instance





            update: The next data update for this instance
        """
        pass

    Amortization = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The non-cash expense recognized on intangible assets over the benefit period of the asset.



Get: Amortization(self: IncomeStatement) -> AmortizationIncomeStatement



Set: Amortization(self: IncomeStatement) = value

"""

    AmortizationOfIntangibles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The aggregate expense charged against earnings to allocate the cost of intangible assets (nonphysical assets not used in

            production) in a systematic and rational manner to the periods expected to benefit from such assets.



Get: AmortizationOfIntangibles(self: IncomeStatement) -> AmortizationOfIntangiblesIncomeStatement



Set: AmortizationOfIntangibles(self: IncomeStatement) = value

"""

    AmortizationSupplemental = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The current period expense charged against earnings on intangible asset over its useful life. It is a supplemental value which would

            be reported outside consolidated statements.



Get: AmortizationSupplemental(self: IncomeStatement) -> AmortizationSupplementalIncomeStatement



Set: AmortizationSupplemental(self: IncomeStatement) = value

"""

    AverageDilutionEarnings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Adjustments to reported net income to calculate Diluted EPS, by assuming that all convertible instruments are converted to

            Common Equity. The adjustments usually include the interest expense of debentures when assumed converted and preferred

            dividends of convertible preferred stock when assumed converted.



Get: AverageDilutionEarnings(self: IncomeStatement) -> AverageDilutionEarningsIncomeStatement



Set: AverageDilutionEarnings(self: IncomeStatement) = value

"""

    CededPremiums = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The amount of premiums paid and payable to another insurer as a result of reinsurance arrangements in order to exchange for that

            company accepting all or part of insurance on a risk or exposure. This item is usually only available for insurance industry.



Get: CededPremiums(self: IncomeStatement) -> CededPremiumsIncomeStatement



Set: CededPremiums(self: IncomeStatement) = value

"""

    ChangeinInsuranceLiabilitiesNetofReinsurance = property(lambda self: object(), lambda self, v: None,
                                                            lambda self: None)  # default
    """Income/Expense due to changes between periods in insurance liabilities.



Get: ChangeinInsuranceLiabilitiesNetofReinsurance(self: IncomeStatement) -> ChangeinInsuranceLiabilitiesNetofReinsuranceIncomeStatement



Set: ChangeinInsuranceLiabilitiesNetofReinsurance(self: IncomeStatement) = value

"""

    ChangeinInvestmentContract = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Income/Expense due to changes between periods in Investment Contracts.



Get: ChangeinInvestmentContract(self: IncomeStatement) -> ChangeinInvestmentContractIncomeStatement



Set: ChangeinInvestmentContract(self: IncomeStatement) = value

"""

    ChangeinTheGrossProvisionforUnearnedPremiums = property(lambda self: object(), lambda self, v: None,
                                                            lambda self: None)  # default
    """The change in the amount of the unearned premium reserves maintained by insurers.



Get: ChangeinTheGrossProvisionforUnearnedPremiums(self: IncomeStatement) -> ChangeinTheGrossProvisionforUnearnedPremiumsIncomeStatement



Set: ChangeinTheGrossProvisionforUnearnedPremiums(self: IncomeStatement) = value

"""

    ChangeinTheGrossProvisionforUnearnedPremiumsReinsurersShare = property(lambda self: object(), lambda self, v: None,
                                                                           lambda self: None)  # default
    """The change in the amount of unearned premium reserve to be covered by reinsurers.



Get: ChangeinTheGrossProvisionforUnearnedPremiumsReinsurersShare(self: IncomeStatement) -> ChangeinTheGrossProvisionforUnearnedPremiumsReinsurersShareIncomeStatement



Set: ChangeinTheGrossProvisionforUnearnedPremiumsReinsurersShare(self: IncomeStatement) = value

"""

    ClaimsandChangeinInsuranceLiabilities = property(lambda self: object(), lambda self, v: None,
                                                     lambda self: None)  # default
    """Income/Expense due to the insurer's changes in insurance liabilities.



Get: ClaimsandChangeinInsuranceLiabilities(self: IncomeStatement) -> ClaimsandChangeinInsuranceLiabilitiesIncomeStatement



Set: ClaimsandChangeinInsuranceLiabilities(self: IncomeStatement) = value

"""

    ClaimsandPaidIncurred = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """All reported claims arising out of incidents in that year are considered incurred grouped with claims paid out.



Get: ClaimsandPaidIncurred(self: IncomeStatement) -> ClaimsandPaidIncurredIncomeStatement



Set: ClaimsandPaidIncurred(self: IncomeStatement) = value

"""

    CommissionExpenses = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """



Get: CommissionExpenses(self: IncomeStatement) -> CommissionExpensesIncomeStatement



Set: CommissionExpenses(self: IncomeStatement) = value

"""

    CostOfRevenue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The aggregate cost of goods produced and sold and services rendered during the reporting period. It excludes all operating

            expenses such as depreciation, depletion, amortization, and SG&A. For the must have cost industry, if the number is not reported

            by the company, it will be calculated based on accounting equation.

            Cost of Revenue = Revenue - Operating Expenses - Operating Profit.



Get: CostOfRevenue(self: IncomeStatement) -> CostOfRevenueIncomeStatement



Set: CostOfRevenue(self: IncomeStatement) = value

"""

    CreditCard = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Income earned from credit card services including late, over limit, and annual fees. This item is usually only available for bank

            industry.



Get: CreditCard(self: IncomeStatement) -> CreditCardIncomeStatement



Set: CreditCard(self: IncomeStatement) = value

"""

    CreditLossesProvision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A charge to income which represents an expense deemed adequate by management given the composition of a bank's credit

            portfolios, their probability of default, the economic environment and the allowance for credit losses already established. Specific

            provisions are established to reduce the book value of specific assets (primarily loans) to establish the amount expected to be

            recovered on the loans.



Get: CreditLossesProvision(self: IncomeStatement) -> CreditLossesProvisionIncomeStatement



Set: CreditLossesProvision(self: IncomeStatement) = value

"""

    CreditRiskProvisions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Provision for the risk of loss of principal or loss of a financial reward stemming from a borrower's failure to repay a loan or otherwise

            meet a contractual obligation. Credit risk arises whenever a borrower is expecting to use future cash flows to pay a current debt.

            Investors are compensated for assuming credit risk by way of interest payments from the borrower or issuer of a debt obligation.

            This is a contra account under Total Revenue in banks.



Get: CreditRiskProvisions(self: IncomeStatement) -> CreditRiskProvisionsIncomeStatement



Set: CreditRiskProvisions(self: IncomeStatement) = value

"""

    DDACostofRevenue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Costs of depreciation and amortization on assets used for the revenue-generating activities during the accounting period



Get: DDACostofRevenue(self: IncomeStatement) -> DDACostofRevenueIncomeStatement



Set: DDACostofRevenue(self: IncomeStatement) = value

"""

    Depletion = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The non-cash expense recognized on natural resources (eg. Oil and mineral deposits) over the benefit period of the asset.



Get: Depletion(self: IncomeStatement) -> DepletionIncomeStatement



Set: Depletion(self: IncomeStatement) = value

"""

    Depreciation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The current period non-cash expense recognized on tangible assets used in the normal course of business, by allocating the cost of

            assets over their useful lives, in the Income Statement. Examples of tangible asset include buildings, production and equipment.



Get: Depreciation(self: IncomeStatement) -> DepreciationIncomeStatement



Set: Depreciation(self: IncomeStatement) = value

"""

    DepreciationAmortizationDepletion = property(lambda self: object(), lambda self, v: None,
                                                 lambda self: None)  # default
    """The sum of depreciation, amortization and depletion expense in the Income Statement.

            Depreciation is the non-cash expense recognized on tangible assets used in the normal course of business, by allocating the cost of

            assets over their useful lives

            Amortization is the non-cash expense recognized on intangible assets over the benefit period of the asset.

            Depletion is the non-cash expense recognized on natural resources (eg. Oil and mineral deposits) over the benefit period of the

            asset.



Get: DepreciationAmortizationDepletion(self: IncomeStatement) -> DepreciationAmortizationDepletionIncomeStatement



Set: DepreciationAmortizationDepletion(self: IncomeStatement) = value

"""

    DepreciationAndAmortization = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The sum of depreciation and amortization expense in the Income Statement.

            Depreciation is the non-cash expense recognized on tangible assets used in the normal course of business, by allocating the cost of

            assets over their useful lives

            Amortization is the non-cash expense recognized on intangible assets over the benefit period of the asset.



Get: DepreciationAndAmortization(self: IncomeStatement) -> DepreciationAndAmortizationIncomeStatement



Set: DepreciationAndAmortization(self: IncomeStatement) = value

"""

    DepreciationSupplemental = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The current period expense charged against earnings on tangible asset over its useful life. It is a supplemental value which would

            be reported outside consolidated statements.



Get: DepreciationSupplemental(self: IncomeStatement) -> DepreciationSupplementalIncomeStatement



Set: DepreciationSupplemental(self: IncomeStatement) = value

"""

    DilutedNIAvailtoComStockholders = property(lambda self: object(), lambda self, v: None,
                                               lambda self: None)  # default
    """Net income to calculate Diluted EPS, accounting for adjustments assuming that all the convertible instruments are being converted

            to Common Equity.



Get: DilutedNIAvailtoComStockholders(self: IncomeStatement) -> DilutedNIAvailtoComStockholdersIncomeStatement



Set: DilutedNIAvailtoComStockholders(self: IncomeStatement) = value

"""

    DividendIncome = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Dividends earned from equity investment securities. This item is usually only available for bank industry.



Get: DividendIncome(self: IncomeStatement) -> DividendIncomeIncomeStatement



Set: DividendIncome(self: IncomeStatement) = value

"""

    EarningsFromEquityInterest = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The earnings from equity interest can be a result of any of the following: Income from earnings distribution of the business, either

            as dividends paid to corporate shareholders or as drawings in a partnership; Capital gain realized upon sale of the business; Capital

            gain realized from selling his or her interest to other partners. This item is usually not available for bank and insurance industries.



Get: EarningsFromEquityInterest(self: IncomeStatement) -> EarningsFromEquityInterestIncomeStatement



Set: EarningsFromEquityInterest(self: IncomeStatement) = value

"""

    EarningsfromEquityInterestNetOfTax = property(lambda self: object(), lambda self, v: None,
                                                  lambda self: None)  # default
    """Income from other equity interest reported after Provision of Tax. This applies to all industries.



Get: EarningsfromEquityInterestNetOfTax(self: IncomeStatement) -> EarningsfromEquityInterestNetOfTaxIncomeStatement



Set: EarningsfromEquityInterestNetOfTax(self: IncomeStatement) = value

"""

    EBIT = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Earnings minus expenses (excluding interest and tax expenses).



Get: EBIT(self: IncomeStatement) -> EBITIncomeStatement



Set: EBIT(self: IncomeStatement) = value

"""

    EBITDA = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Earnings minus expenses (excluding interest, tax, depreciation, and amortization expenses).



Get: EBITDA(self: IncomeStatement) -> EBITDAIncomeStatement



Set: EBITDA(self: IncomeStatement) = value

"""

    EffectiveTaxRateAsReported = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The average tax rate for the period as reported by the company, may be the same or not the same as Morningstar's standardized

            definition.



Get: EffectiveTaxRateAsReported(self: IncomeStatement) -> EffectiveTaxRateAsReportedIncomeStatement



Set: EffectiveTaxRateAsReported(self: IncomeStatement) = value

"""

    Equipment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Equipment expenses include depreciation, repairs, rentals, and service contract costs. This also includes equipment purchases

            which do not qualify for capitalization in accordance with the entity's accounting policy. This item may also include furniture

            expenses. This item is usually only available for bank industry.



Get: Equipment(self: IncomeStatement) -> EquipmentIncomeStatement



Set: Equipment(self: IncomeStatement) = value

"""

    ExciseTaxes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Excise taxes are taxes paid when purchases are made on a specific good, such as gasoline. Excise taxes are often included in the

            price of the product. There are also excise taxes on activities, such as on wagering or on highway usage by trucks.



Get: ExciseTaxes(self: IncomeStatement) -> ExciseTaxesIncomeStatement



Set: ExciseTaxes(self: IncomeStatement) = value

"""

    ExplorationDevelopmentAndMineralPropertyLeaseExpenses = property(lambda self: object(), lambda self, v: None,
                                                                     lambda self: None)  # default
    """Costs incurred in identifying areas that may warrant examination and in examining specific areas that are considered to have

            prospects of containing energy or metal reserves, including costs of drilling exploratory wells. Development expense is the

            capitalized costs incurred to obtain access to proved reserves and to provide facilities for extracting, treating, gathering and storing

            the energy and metal. Mineral property includes oil and gas wells, mines, and other natural deposits (including geothermal

            deposits). The payment for leasing those properties is called mineral property lease expense. Exploration expense is included in

            operation expenses for mining industry.



Get: ExplorationDevelopmentAndMineralPropertyLeaseExpenses(self: IncomeStatement) -> ExplorationDevelopmentAndMineralPropertyLeaseExpensesIncomeStatement



Set: ExplorationDevelopmentAndMineralPropertyLeaseExpenses(self: IncomeStatement) = value

"""

    FeeRevenueAndOtherIncome = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The aggregate amount of fees, commissions, and other income.



Get: FeeRevenueAndOtherIncome(self: IncomeStatement) -> FeeRevenueAndOtherIncomeIncomeStatement



Set: FeeRevenueAndOtherIncome(self: IncomeStatement) = value

"""

    FeesandCommissionExpense = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cost incurred by bank and insurance companies for fees and commission income.



Get: FeesandCommissionExpense(self: IncomeStatement) -> FeesandCommissionExpenseIncomeStatement



Set: FeesandCommissionExpense(self: IncomeStatement) = value

"""

    FeesandCommissionIncome = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Fees and commission income earned by bank and insurance companies on the rendering services.



Get: FeesandCommissionIncome(self: IncomeStatement) -> FeesandCommissionIncomeIncomeStatement



Set: FeesandCommissionIncome(self: IncomeStatement) = value

"""

    FeesAndCommissions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Total fees and commissions earned from providing services such as leasing of space or maintaining: (1) depositor accounts; (2)

            transfer agent; (3) fiduciary and trust; (4) brokerage and underwriting; (5) mortgage; (6) credit cards; (7) correspondent clearing;

            and (8) other such services and activities performed for others. This item is usually available for bank and insurance industries.



Get: FeesAndCommissions(self: IncomeStatement) -> FeesAndCommissionsIncomeStatement



Set: FeesAndCommissions(self: IncomeStatement) = value

"""

    ForeignExchangeTradingGains = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Trading revenues that result from foreign exchange exposures such as cash instruments and off-balance sheet derivative

            instruments. This item is usually only available for bank industry.



Get: ForeignExchangeTradingGains(self: IncomeStatement) -> ForeignExchangeTradingGainsIncomeStatement



Set: ForeignExchangeTradingGains(self: IncomeStatement) = value

"""

    Fuel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The aggregate amount of fuel cost for current period associated with the revenue generation. This item is usually only available for

            transportation industry.



Get: Fuel(self: IncomeStatement) -> FuelIncomeStatement



Set: Fuel(self: IncomeStatement) = value

"""

    FuelAndPurchasePower = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cost of fuel, purchase power and gas associated with revenue generation. This item is usually only available for utility industry.



Get: FuelAndPurchasePower(self: IncomeStatement) -> FuelAndPurchasePowerIncomeStatement



Set: FuelAndPurchasePower(self: IncomeStatement) = value

"""

    GainLossonDerecognitionofAvailableForSaleFinancialAssets = property(lambda self: object(), lambda self, v: None,
                                                                        lambda self: None)  # default
    """Gain/loss on the write-off of financial assets available-for-sale.



Get: GainLossonDerecognitionofAvailableForSaleFinancialAssets(self: IncomeStatement) -> GainLossonDerecognitionofAvailableForSaleFinancialAssetsIncomeStatement



Set: GainLossonDerecognitionofAvailableForSaleFinancialAssets(self: IncomeStatement) = value

"""

    GainLossonFinancialInstrumentsDesignatedasCashFlowHedges = property(lambda self: object(), lambda self, v: None,
                                                                        lambda self: None)  # default
    """Gain/Loss through hedging activities.



Get: GainLossonFinancialInstrumentsDesignatedasCashFlowHedges(self: IncomeStatement) -> GainLossonFinancialInstrumentsDesignatedasCashFlowHedgesIncomeStatement



Set: GainLossonFinancialInstrumentsDesignatedasCashFlowHedges(self: IncomeStatement) = value

"""

    GainLossonSaleofAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Any gain (loss) recognized on the sale of assets or a sale which generates profit or loss, which is a difference between sales price

            and net book value at the disposal time.



Get: GainLossonSaleofAssets(self: IncomeStatement) -> GainLossonSaleofAssetsIncomeStatement



Set: GainLossonSaleofAssets(self: IncomeStatement) = value

"""

    GainonInvestmentProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gain on disposal and change in fair value of investment properties.



Get: GainonInvestmentProperties(self: IncomeStatement) -> GainonInvestmentPropertiesIncomeStatement



Set: GainonInvestmentProperties(self: IncomeStatement) = value

"""

    GainOnSaleOfBusiness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The amount of excess earned in comparison to fair value when selling a business. This item is usually not available for insurance

            industry.



Get: GainOnSaleOfBusiness(self: IncomeStatement) -> GainOnSaleOfBusinessIncomeStatement



Set: GainOnSaleOfBusiness(self: IncomeStatement) = value

"""

    GainonSaleofInvestmentProperty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gain on the disposal of investment property.



Get: GainonSaleofInvestmentProperty(self: IncomeStatement) -> GainonSaleofInvestmentPropertyIncomeStatement



Set: GainonSaleofInvestmentProperty(self: IncomeStatement) = value

"""

    GainonSaleofLoans = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gain on sale of any loans investment.



Get: GainonSaleofLoans(self: IncomeStatement) -> GainonSaleofLoansIncomeStatement



Set: GainonSaleofLoans(self: IncomeStatement) = value

"""

    GainOnSaleOfPPE = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The amount of excess earned in comparison to the net book value for sale of property, plant, equipment. This item is usually not

            available for bank and insurance industries.



Get: GainOnSaleOfPPE(self: IncomeStatement) -> GainOnSaleOfPPEIncomeStatement



Set: GainOnSaleOfPPE(self: IncomeStatement) = value

"""

    GainOnSaleOfSecurity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The amount of excess earned in comparison to the original purchase value of the security.



Get: GainOnSaleOfSecurity(self: IncomeStatement) -> GainOnSaleOfSecurityIncomeStatement



Set: GainOnSaleOfSecurity(self: IncomeStatement) = value

"""

    GainsLossesonFinancialInstrumentsDuetoFairValueAdjustmentsinHedgeAccountingTotal = property(lambda self: object(),
                                                                                                lambda self, v: None,
                                                                                                lambda
                                                                                                    self: None)  # default
    """Gain or loss on derivatives investment due to the fair value adjustment.



Get: GainsLossesonFinancialInstrumentsDuetoFairValueAdjustmentsinHedgeAccountingTotal(self: IncomeStatement) -> GainsLossesonFinancialInstrumentsDuetoFairValueAdjustmentsinHedgeAccountingTotalIncomeStatement



Set: GainsLossesonFinancialInstrumentsDuetoFairValueAdjustmentsinHedgeAccountingTotal(self: IncomeStatement) = value

"""

    GeneralAndAdministrativeExpense = property(lambda self: object(), lambda self, v: None,
                                               lambda self: None)  # default
    """The aggregate total of general managing and administering expenses for the company.



Get: GeneralAndAdministrativeExpense(self: IncomeStatement) -> GeneralAndAdministrativeExpenseIncomeStatement



Set: GeneralAndAdministrativeExpense(self: IncomeStatement) = value

"""

    GrossDividendPayment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Total amount paid in dividends to investors- this includes dividends paid on equity and non-equity shares.



Get: GrossDividendPayment(self: IncomeStatement) -> GrossDividendPaymentIncomeStatement



Set: GrossDividendPayment(self: IncomeStatement) = value

"""

    GrossPremiumsWritten = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Total premiums generated from all policies written by an insurance company within a given period of time. This item is usually only

            available for insurance industry.



Get: GrossPremiumsWritten(self: IncomeStatement) -> GrossPremiumsWrittenIncomeStatement



Set: GrossPremiumsWritten(self: IncomeStatement) = value

"""

    GrossProfit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Total revenue less cost of revenue. The number is as reported by the company on the income statement; however, the number will

            be calculated if it is not reported. This field is null if the cost of revenue is not given.

            Gross Profit = Total Revenue - Cost of Revenue.



Get: GrossProfit(self: IncomeStatement) -> GrossProfitIncomeStatement



Set: GrossProfit(self: IncomeStatement) = value

"""

    ImpairmentLossesReversalsFinancialInstrumentsNet = property(lambda self: object(), lambda self, v: None,
                                                                lambda self: None)  # default
    """Impairment or reversal of impairment on financial instrument such as derivative. This is a contra account under Total Revenue in

            banks.



Get: ImpairmentLossesReversalsFinancialInstrumentsNet(self: IncomeStatement) -> ImpairmentLossesReversalsFinancialInstrumentsNetIncomeStatement



Set: ImpairmentLossesReversalsFinancialInstrumentsNet(self: IncomeStatement) = value

"""

    ImpairmentOfCapitalAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Impairments are considered to be permanent, which is a downward revaluation of fixed assets. If the sum of all estimated future

            cash flows is less than the carrying value of the asset, then the asset would be considered impaired and would have to be written

            down to its fair value. Once an asset is written down, it may only be written back up under very few circumstances. Usually the

            company uses the sum of undiscounted future cash flows to determine if the impairment should occur, and uses the sum of

            discounted future cash flows to make the impairment judgment. The impairment decision emphasizes on capital assets' future

            profit collection ability.



Get: ImpairmentOfCapitalAssets(self: IncomeStatement) -> ImpairmentOfCapitalAssetsIncomeStatement



Set: ImpairmentOfCapitalAssets(self: IncomeStatement) = value

"""

    IncomefromAssociatesandOtherParticipatingInterests = property(lambda self: object(), lambda self, v: None,
                                                                  lambda self: None)  # default
    """Total income from the associates and joint venture via investment, accounted for in the Non-Operating section.



Get: IncomefromAssociatesandOtherParticipatingInterests(self: IncomeStatement) -> IncomefromAssociatesandOtherParticipatingInterestsIncomeStatement



Set: IncomefromAssociatesandOtherParticipatingInterests(self: IncomeStatement) = value

"""

    IncreaseDecreaseInNetUnearnedPremiumReserves = property(lambda self: object(), lambda self, v: None,
                                                            lambda self: None)  # default
    """Premium might contain a portion of the amount that has been paid in advance for insurance that has not yet been provided, which

            is called unearned premium. If either party cancels the contract, the insurer must have the unearned premium ready to refund.

            Hence, the amount of premium reserve maintained by insurers is called unearned premium reserves, which is prepared for

            liquidation.  This item is usually only available for insurance industry.



Get: IncreaseDecreaseInNetUnearnedPremiumReserves(self: IncomeStatement) -> IncreaseDecreaseInNetUnearnedPremiumReservesIncomeStatement



Set: IncreaseDecreaseInNetUnearnedPremiumReserves(self: IncomeStatement) = value

"""

    InsuranceAndClaims = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Insurance and claims are the expenses in the period incurred with respect to protection provided by insurance entities against risks

            other than risks associated with production (which is allocated to cost of sales). This item is usually not available for insurance

            industries.



Get: InsuranceAndClaims(self: IncomeStatement) -> InsuranceAndClaimsIncomeStatement



Set: InsuranceAndClaims(self: IncomeStatement) = value

"""

    InterestExpense = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Relates to the general cost of borrowing money. It is the price that a lender charges a borrower for the use of the lender's money.



Get: InterestExpense(self: IncomeStatement) -> InterestExpenseIncomeStatement



Set: InterestExpense(self: IncomeStatement) = value

"""

    InterestExpenseForDeposit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Includes interest expense on the following deposit accounts: Interest-bearing Demand deposit; Checking account; Savings account;

            Deposit in foreign offices; Money Market Certificates & Deposit Accounts. This item is usually only available for bank industry.



Get: InterestExpenseForDeposit(self: IncomeStatement) -> InterestExpenseForDepositIncomeStatement



Set: InterestExpenseForDeposit(self: IncomeStatement) = value

"""

    InterestExpenseForFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResell = property(lambda self: object(),
                                                                                              lambda self, v: None,
                                                                                              lambda
                                                                                                  self: None)  # default
    """Gross expenses on the purchase of Federal funds at a specified price with a simultaneous agreement to sell the same to the same

            counterparty at a fixed or determinable price at a future date. This item is usually only available for bank industry.



Get: InterestExpenseForFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResell(self: IncomeStatement) -> InterestExpenseForFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellIncomeStatement



Set: InterestExpenseForFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResell(self: IncomeStatement) = value

"""

    InterestExpenseForLongTermDebtAndCapitalSecurities = property(lambda self: object(), lambda self, v: None,
                                                                  lambda self: None)  # default
    """The aggregate interest expenses incurred on long-term borrowings and any interest expenses on fixed assets (property, plant,

            equipment) that are leased due longer than one year. This item is usually only available for bank industry.



Get: InterestExpenseForLongTermDebtAndCapitalSecurities(self: IncomeStatement) -> InterestExpenseForLongTermDebtAndCapitalSecuritiesIncomeStatement



Set: InterestExpenseForLongTermDebtAndCapitalSecurities(self: IncomeStatement) = value

"""

    InterestExpenseForShortTermDebt = property(lambda self: object(), lambda self, v: None,
                                               lambda self: None)  # default
    """The aggregate interest expenses incurred on short-term borrowings and any interest expenses on fixed assets (property, plant,

            equipment) that are leased within one year. This item is usually only available for bank industry.



Get: InterestExpenseForShortTermDebt(self: IncomeStatement) -> InterestExpenseForShortTermDebtIncomeStatement



Set: InterestExpenseForShortTermDebt(self: IncomeStatement) = value

"""

    InterestExpenseNonOperating = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Interest expense caused by long term financing activities; such as interest expense incurred on trading liabilities, commercial paper,

            long-term debt, capital leases, deposits, and all other borrowings.



Get: InterestExpenseNonOperating(self: IncomeStatement) -> InterestExpenseNonOperatingIncomeStatement



Set: InterestExpenseNonOperating(self: IncomeStatement) = value

"""

    InterestIncome = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Income generated from interest-bearing deposits or accounts.



Get: InterestIncome(self: IncomeStatement) -> InterestIncomeIncomeStatement



Set: InterestIncome(self: IncomeStatement) = value

"""

    InterestIncomeAfterProvisionForLoanLoss = property(lambda self: object(), lambda self, v: None,
                                                       lambda self: None)  # default
    """Net interest and dividend income or expense, including any amortization and accretion (as applicable) of discounts and premiums,

            including consideration of the provisions for loan, lease, credit, and other related losses, if any.



Get: InterestIncomeAfterProvisionForLoanLoss(self: IncomeStatement) -> InterestIncomeAfterProvisionForLoanLossIncomeStatement



Set: InterestIncomeAfterProvisionForLoanLoss(self: IncomeStatement) = value

"""

    InterestIncomeFromDeposits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Interest income generated from all deposit accounts. This item is usually only available for bank industry.



Get: InterestIncomeFromDeposits(self: IncomeStatement) -> InterestIncomeFromDepositsIncomeStatement



Set: InterestIncomeFromDeposits(self: IncomeStatement) = value

"""

    InterestIncomeFromFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResell = property(lambda self: object(),
                                                                                              lambda self, v: None,
                                                                                              lambda
                                                                                                  self: None)  # default
    """The carrying value of funds outstanding loaned in the form of security resale agreements if the agreement requires the purchaser to

            resell the identical security purchased or a security that meets the definition of ""substantially the same"" in the case of a dollar roll.

            Also includes purchases of participations in pools of securities that are subject to a resale agreement; This category includes all

            interest income generated from federal funds sold and securities purchases under agreements to resell; This category includes all

            interest income generated from federal funds sold and securities purchases under agreements to resell.



Get: InterestIncomeFromFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResell(self: IncomeStatement) -> InterestIncomeFromFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellIncomeStatement



Set: InterestIncomeFromFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResell(self: IncomeStatement) = value

"""

    InterestIncomeFromLeases = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Includes interest and fee income generated by direct lease financing. This item is usually only available for bank industry.



Get: InterestIncomeFromLeases(self: IncomeStatement) -> InterestIncomeFromLeasesIncomeStatement



Set: InterestIncomeFromLeases(self: IncomeStatement) = value

"""

    InterestIncomeFromLoans = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Loan is a common field to banks. Interest Income from Loans is interest and fee income generated from all loans, which includes

            Commercial loans; Credit loans; Other consumer loans; Real Estate - Construction; Real Estate - Mortgage; Foreign loans. Banks

            earn interest from loans. This item is usually only available for bank industry.



Get: InterestIncomeFromLoans(self: IncomeStatement) -> InterestIncomeFromLoansIncomeStatement



Set: InterestIncomeFromLoans(self: IncomeStatement) = value

"""

    InterestIncomeFromLoansAndLease = property(lambda self: object(), lambda self, v: None,
                                               lambda self: None)  # default
    """Total interest and fee income generated by loans and lease. This item is usually only available for bank industry.



Get: InterestIncomeFromLoansAndLease(self: IncomeStatement) -> InterestIncomeFromLoansAndLeaseIncomeStatement



Set: InterestIncomeFromLoansAndLease(self: IncomeStatement) = value

"""

    InterestIncomeFromSecurities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Represents total interest and dividend income from U.S. Treasury securities, U.S. government agency and corporation obligations,

            securities issued by states and political subdivisions, other domestic debt securities, foreign debt securities, and equity securities

            (including investments in mutual funds). Excludes interest income from securities held in trading accounts. This item is usually only

            available for bank industry.



Get: InterestIncomeFromSecurities(self: IncomeStatement) -> InterestIncomeFromSecuritiesIncomeStatement



Set: InterestIncomeFromSecurities(self: IncomeStatement) = value

"""

    InterestIncomeNonOperating = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Interest income earned from long term financing activities.



Get: InterestIncomeNonOperating(self: IncomeStatement) -> InterestIncomeNonOperatingIncomeStatement



Set: InterestIncomeNonOperating(self: IncomeStatement) = value

"""

    InvestmentBankingProfit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Includes (1) underwriting revenue (the spread between the resale price received and the cost of the securities and related

            expenses) generated through the purchasing, distributing and reselling of new issues of securities (alternatively, could be a

            secondary offering of a large block of previously issued securities); and (2) fees earned for mergers, acquisitions, divestitures,

            restructurings, and other types of financial advisory services. This item is usually only available for bank industry.



Get: InvestmentBankingProfit(self: IncomeStatement) -> InvestmentBankingProfitIncomeStatement



Set: InvestmentBankingProfit(self: IncomeStatement) = value

"""

    InvestmentContractLiabilitiesIncurred = property(lambda self: object(), lambda self, v: None,
                                                     lambda self: None)  # default
    """Income/Expenses due to the insurer's liabilities incurred in Investment Contracts.



Get: InvestmentContractLiabilitiesIncurred(self: IncomeStatement) -> InvestmentContractLiabilitiesIncurredIncomeStatement



Set: InvestmentContractLiabilitiesIncurred(self: IncomeStatement) = value

"""

    ISFileDate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Filing date of the Income Statement.



Get: ISFileDate(self: IncomeStatement) -> DateTime



Set: ISFileDate(self: IncomeStatement) = value

"""

    LossAdjustmentExpense = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Losses generally refer to (1) the amount of reduction in the value of an insured's property caused by an insured peril, (2) the amount

            sought through an insured's claim, or (3) the amount paid on behalf of an insured under an insurance contract.  Loss Adjustment

            Expenses is expenses incurred in the course of investigating and settling claims that includes any legal and adjusters' fees and the

            costs of paying claims and all related expenses.



Get: LossAdjustmentExpense(self: IncomeStatement) -> LossAdjustmentExpenseIncomeStatement



Set: LossAdjustmentExpense(self: IncomeStatement) = value

"""

    LossonExtinguishmentofDebt = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Loss on extinguishment of debt is the accounting loss that results from a debt extinguishment. A debt shall be accounted for as

            having been extinguished in a number of circumstances, including when it has been settled through repayment or replacement by

            another liability. It generally results in an accounting gain or loss. Amount represents the difference between the fair value of the

            payments made and the carrying amount of the debt at the time of its extinguishment.



Get: LossonExtinguishmentofDebt(self: IncomeStatement) -> LossonExtinguishmentofDebtIncomeStatement



Set: LossonExtinguishmentofDebt(self: IncomeStatement) = value

"""

    MaintenanceAndRepairs = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The aggregate amount of maintenance and repair expenses in the current period associated with the revenue generation. Mainly

            for fixed assets. This item is usually only available for transportation industry.



Get: MaintenanceAndRepairs(self: IncomeStatement) -> MaintenanceAndRepairsIncomeStatement



Set: MaintenanceAndRepairs(self: IncomeStatement) = value

"""

    MinorityInterests = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Represents par or stated value of the subsidiary stock not owned by the parent company plus the minority interest's equity in the

            surplus of the subsidiary. This item includes preferred dividend averages on the minority preferred stock (preferred shares not

            owned by the reporting parent company). Minority interest also refers to stockholders who own less than 50% of a subsidiary's

            outstanding voting common stock. The minority stockholders hold an interest in the subsidiary's net assets and share earnings with

            the parent company.



Get: MinorityInterests(self: IncomeStatement) -> MinorityInterestsIncomeStatement



Set: MinorityInterests(self: IncomeStatement) = value

"""

    NegativeGoodwillImmediatelyRecognized = property(lambda self: object(), lambda self, v: None,
                                                     lambda self: None)  # default
    """Negative Goodwill recognized in the Income Statement. Negative Goodwill arises where the net assets at the date of acquisition,

            fairly valued, falls below the cost of acquisition.



Get: NegativeGoodwillImmediatelyRecognized(self: IncomeStatement) -> NegativeGoodwillImmediatelyRecognizedIncomeStatement



Set: NegativeGoodwillImmediatelyRecognized(self: IncomeStatement) = value

"""

    NetForeignExchangeGainLoss = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The aggregate foreign currency translation gain or loss (both realized and unrealized) included as part of revenue. This item is

            usually only available for insurance industry.



Get: NetForeignExchangeGainLoss(self: IncomeStatement) -> NetForeignExchangeGainLossIncomeStatement



Set: NetForeignExchangeGainLoss(self: IncomeStatement) = value

"""

    NetIncome = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Includes all the operations (continuing and discontinued) and all the other income or charges (extraordinary, accounting changes,

            tax loss carry forward, and other gains and losses).



Get: NetIncome(self: IncomeStatement) -> NetIncomeIncomeStatement



Set: NetIncome(self: IncomeStatement) = value

"""

    NetIncomeCommonStockholders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Net income minus the preferred dividends paid as presented in the Income Statement.



Get: NetIncomeCommonStockholders(self: IncomeStatement) -> NetIncomeCommonStockholdersIncomeStatement



Set: NetIncomeCommonStockholders(self: IncomeStatement) = value

"""

    NetIncomeContinuousOperations = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Revenue less expenses and taxes from the entity's ongoing operations and before income (loss) from: Preferred Dividends;

            Extraordinary Gains and Losses; Income from Cumulative Effects of Accounting Change; Discontinuing Operation; Income from Tax

            Loss Carry forward; Other Gains/Losses.



Get: NetIncomeContinuousOperations(self: IncomeStatement) -> NetIncomeContinuousOperationsIncomeStatement



Set: NetIncomeContinuousOperations(self: IncomeStatement) = value

"""

    NetIncomeContinuousOperationsNetMinorityInterest = property(lambda self: object(), lambda self, v: None,
                                                                lambda self: None)  # default
    """Revenue less expenses and taxes from the entity's ongoing operations net of minority interest and before income (loss) from:

            Preferred Dividends; Extraordinary Gains and Losses; Income from Cumulative Effects of Accounting Change; Discontinuing

            Operation; Income from Tax Loss Carry forward; Other Gains/Losses.



Get: NetIncomeContinuousOperationsNetMinorityInterest(self: IncomeStatement) -> NetIncomeContinuousOperationsNetMinorityInterestIncomeStatement



Set: NetIncomeContinuousOperationsNetMinorityInterest(self: IncomeStatement) = value

"""

    NetIncomeDiscontinuousOperations = property(lambda self: object(), lambda self, v: None,
                                                lambda self: None)  # default
    """To be classified as discontinued operations, if both of the following conditions are met:

            1: The operations and cash flow of the component have been or will be removed from the ongoing operations of the entity as a

            result of the disposal transaction, and

            2: The entity will have no significant continuing involvement in the operations of the component after the disposal transaction.

            The discontinued operation is reported net of tax.

            Gains/Loss on Disposal of Discontinued Operations: Any gains or loss recognized on disposal of discontinued operations,

            which is the difference between the carrying value of the division and its fair value less costs to sell.

            Provision for Gain/Loss on Disposal: The amount of current expense charged in order to prepare for the disposal of

            discontinued operations.



Get: NetIncomeDiscontinuousOperations(self: IncomeStatement) -> NetIncomeDiscontinuousOperationsIncomeStatement



Set: NetIncomeDiscontinuousOperations(self: IncomeStatement) = value

"""

    NetIncomeExtraordinary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gains (losses), whether arising from extinguishment of debt, prior period adjustments, or from other events or transactions, that are

            both unusual in nature and infrequent in occurrence thereby meeting the criteria for an event or transaction to be classified as an

            extraordinary item.



Get: NetIncomeExtraordinary(self: IncomeStatement) -> NetIncomeExtraordinaryIncomeStatement



Set: NetIncomeExtraordinary(self: IncomeStatement) = value

"""

    NetIncomeFromContinuingAndDiscontinuedOperation = property(lambda self: object(), lambda self, v: None,
                                                               lambda self: None)  # default
    """Net Income from Continuing Operations and Discontinued Operations, added together.



Get: NetIncomeFromContinuingAndDiscontinuedOperation(self: IncomeStatement) -> NetIncomeFromContinuingAndDiscontinuedOperationIncomeStatement



Set: NetIncomeFromContinuingAndDiscontinuedOperation(self: IncomeStatement) = value

"""

    NetIncomeFromContinuingOperationNetMinorityInterest = property(lambda self: object(), lambda self, v: None,
                                                                   lambda self: None)  # default
    """Revenue less expenses and taxes from the entity's ongoing operations net of minority interest and before income (loss) from:

            Preferred Dividends; Extraordinary Gains and Losses; Income from Cumulative Effects of Accounting Change; Discontinuing

            Operation; Income from Tax Loss Carry forward; Other Gains/Losses.



Get: NetIncomeFromContinuingOperationNetMinorityInterest(self: IncomeStatement) -> NetIncomeFromContinuingOperationNetMinorityInterestIncomeStatement



Set: NetIncomeFromContinuingOperationNetMinorityInterest(self: IncomeStatement) = value

"""

    NetIncomeFromTaxLossCarryforward = property(lambda self: object(), lambda self, v: None,
                                                lambda self: None)  # default
    """Occurs if a company has had a net loss from operations on a previous year that can be carried forward to reduce net income for tax

            purposes.



Get: NetIncomeFromTaxLossCarryforward(self: IncomeStatement) -> NetIncomeFromTaxLossCarryforwardIncomeStatement



Set: NetIncomeFromTaxLossCarryforward(self: IncomeStatement) = value

"""

    NetIncomeIncludingNoncontrollingInterests = property(lambda self: object(), lambda self, v: None,
                                                         lambda self: None)  # default
    """Net income of the group after the adjustment of all expenses and benefit.



Get: NetIncomeIncludingNoncontrollingInterests(self: IncomeStatement) -> NetIncomeIncludingNoncontrollingInterestsIncomeStatement



Set: NetIncomeIncludingNoncontrollingInterests(self: IncomeStatement) = value

"""

    NetInterestIncome = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Total interest income minus total interest expense. It represents the difference between interest and dividends earned on interest-

            bearing assets and interest paid to depositors and other creditors.



Get: NetInterestIncome(self: IncomeStatement) -> NetInterestIncomeIncomeStatement



Set: NetInterestIncome(self: IncomeStatement) = value

"""

    NetInvestmentIncome = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Total of interest, dividends, and other earnings derived from the insurance company's invested assets minus the expenses

            associated with these investments. Excluded from this income are capital gains or losses as the result of the sale of assets, as well

            as any unrealized capital gains or losses.



Get: NetInvestmentIncome(self: IncomeStatement) -> NetInvestmentIncomeIncomeStatement



Set: NetInvestmentIncome(self: IncomeStatement) = value

"""

    NetNonOperatingInterestIncomeExpense = property(lambda self: object(), lambda self, v: None,
                                                    lambda self: None)  # default
    """Net-Non Operating interest income or expenses caused by financing activities.



Get: NetNonOperatingInterestIncomeExpense(self: IncomeStatement) -> NetNonOperatingInterestIncomeExpenseIncomeStatement



Set: NetNonOperatingInterestIncomeExpense(self: IncomeStatement) = value

"""

    NetOccupancyExpense = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Occupancy expense may include items, such as depreciation of facilities and equipment, lease expenses, property taxes and

            property and casualty insurance expense. This item is usually only available for bank industry.



Get: NetOccupancyExpense(self: IncomeStatement) -> NetOccupancyExpenseIncomeStatement



Set: NetOccupancyExpense(self: IncomeStatement) = value

"""

    NetPolicyholderBenefitsAndClaims = property(lambda self: object(), lambda self, v: None,
                                                lambda self: None)  # default
    """The net provision in current period for future policy benefits, claims, and claims settlement expenses incurred in the claims

            settlement process before the effects of reinsurance arrangements. The value is net of the effects of contracts assumed and

            ceded.



Get: NetPolicyholderBenefitsAndClaims(self: IncomeStatement) -> NetPolicyholderBenefitsAndClaimsIncomeStatement



Set: NetPolicyholderBenefitsAndClaims(self: IncomeStatement) = value

"""

    NetPremiumsWritten = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Net premiums written are gross premiums written less ceded premiums. This item is usually only available for insurance industry.



Get: NetPremiumsWritten(self: IncomeStatement) -> NetPremiumsWrittenIncomeStatement



Set: NetPremiumsWritten(self: IncomeStatement) = value

"""

    NetRealizedGainLossOnInvestments = property(lambda self: object(), lambda self, v: None,
                                                lambda self: None)  # default
    """Gain or loss realized during the period of time for all kinds of investment securities. In might include trading, available-for-sale, or

            held-to-maturity securities. This item is usually only available for insurance industry.



Get: NetRealizedGainLossOnInvestments(self: IncomeStatement) -> NetRealizedGainLossOnInvestmentsIncomeStatement



Set: NetRealizedGainLossOnInvestments(self: IncomeStatement) = value

"""

    NetTradingIncome = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Any trading income on the securities.



Get: NetTradingIncome(self: IncomeStatement) -> NetTradingIncomeIncomeStatement



Set: NetTradingIncome(self: IncomeStatement) = value

"""

    NonInterestExpense = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Any expenses that not related to interest. It includes labor and related expense, occupancy and equipment, commission,

            professional expense and contract services expenses, selling, general and administrative, research and development depreciation,

            amortization and depletion, and any other special income/charges.



Get: NonInterestExpense(self: IncomeStatement) -> NonInterestExpenseIncomeStatement



Set: NonInterestExpense(self: IncomeStatement) = value

"""

    NonInterestIncome = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The total amount of non-interest income which may be derived from: (1) fees and commissions; (2) premiums earned; (3) equity

            investment; (4) the sale or disposal of assets; and (5) other sources not otherwise specified.



Get: NonInterestIncome(self: IncomeStatement) -> NonInterestIncomeIncomeStatement



Set: NonInterestIncome(self: IncomeStatement) = value

"""

    NormalizedEBITAsReported = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """EBIT less Total Unusual Items. This is as reported by the company, may be the same or not the same as Morningstar's standardized

            definition.



Get: NormalizedEBITAsReported(self: IncomeStatement) -> NormalizedEBITAsReportedIncomeStatement



Set: NormalizedEBITAsReported(self: IncomeStatement) = value

"""

    NormalizedEBITDA = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """EBITDA less Total Unusual Items



Get: NormalizedEBITDA(self: IncomeStatement) -> NormalizedEBITDAIncomeStatement



Set: NormalizedEBITDA(self: IncomeStatement) = value

"""

    NormalizedEBITDAAsReported = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """EBITDA less Total Unusual Items. This is as reported by the company, may be the same or not the same as Morningstar's

            standardized definition.



Get: NormalizedEBITDAAsReported(self: IncomeStatement) -> NormalizedEBITDAAsReportedIncomeStatement



Set: NormalizedEBITDAAsReported(self: IncomeStatement) = value

"""

    NormalizedIncome = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This calculation represents earnings adjusted for items that are irregular or unusual in nature, and/or are non-recurring. This can be

            used to fairly measure a company's profitability. This is calculated using Net Income from Continuing Operations plus/minus any tax

            affected unusual Items and Goodwill Impairments/Write Offs.



Get: NormalizedIncome(self: IncomeStatement) -> NormalizedIncomeIncomeStatement



Set: NormalizedIncome(self: IncomeStatement) = value

"""

    NormalizedIncomeAsReported = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Earnings adjusted for items that are irregular or unusual in nature, and/or are non-recurring. This can be used to fairly measure a

            company's profitability. This is as reported by the company, may be the same or not the same as Morningstar's standardized

            definition.



Get: NormalizedIncomeAsReported(self: IncomeStatement) -> NormalizedIncomeAsReportedIncomeStatement



Set: NormalizedIncomeAsReported(self: IncomeStatement) = value

"""

    NormalizedOperatingProfitAsReported = property(lambda self: object(), lambda self, v: None,
                                                   lambda self: None)  # default
    """Operating profit adjusted for items that are irregular or unusual in nature, and/or are non-recurring. This can be used to fairly

            measure a company's profitability. This is as reported by the company, may be the same or not the same as Morningstar's

            standardized definition.



Get: NormalizedOperatingProfitAsReported(self: IncomeStatement) -> NormalizedOperatingProfitAsReportedIncomeStatement



Set: NormalizedOperatingProfitAsReported(self: IncomeStatement) = value

"""

    NormalizedPreTaxIncome = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This calculation represents pre-tax earnings adjusted for items that are irregular or unusual in nature, and/or are non-recurring. This

            can be used to fairly measure a company's profitability. This is calculated using Pre-Tax Income plus/minus any unusual Items and

            Goodwill Impairments/Write Offs.



Get: NormalizedPreTaxIncome(self: IncomeStatement) -> NormalizedPreTaxIncomeIncomeStatement



Set: NormalizedPreTaxIncome(self: IncomeStatement) = value

"""

    OccupancyAndEquipment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Includes total expenses of occupancy and equipment. This item is usually only available for bank industry.



Get: OccupancyAndEquipment(self: IncomeStatement) -> OccupancyAndEquipmentIncomeStatement



Set: OccupancyAndEquipment(self: IncomeStatement) = value

"""

    OperatingExpense = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Operating expenses are primary recurring costs associated with central operations (other than cost of goods sold) that are incurred

            in order to generate sales.



Get: OperatingExpense(self: IncomeStatement) -> OperatingExpenseIncomeStatement



Set: OperatingExpense(self: IncomeStatement) = value

"""

    OperatingExpenseAsReported = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Operating expense as reported by the company, may be the same or not the same as Morningstar's standardized definition.



Get: OperatingExpenseAsReported(self: IncomeStatement) -> OperatingExpenseAsReportedIncomeStatement



Set: OperatingExpenseAsReported(self: IncomeStatement) = value

"""

    OperatingIncome = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Income from normal business operations after deducting cost of revenue and operating expenses. It does not include income from

            any investing activities.



Get: OperatingIncome(self: IncomeStatement) -> OperatingIncomeIncomeStatement



Set: OperatingIncome(self: IncomeStatement) = value

"""

    OperatingRevenue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Sales and income that the company makes from its business operations. This applies only to non-bank and insurance companies.

            For Utility template companies, this is the sum of revenue from electric, gas, transportation and other operating revenue.

            For Transportation template companies, this is the sum of revenue-passenger, revenue-cargo, and other operating revenue.



Get: OperatingRevenue(self: IncomeStatement) -> OperatingRevenueIncomeStatement



Set: OperatingRevenue(self: IncomeStatement) = value

"""

    OperationAndMaintenance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The aggregate amount of operation and maintenance expenses, which is the one important operating expense for the utility

            industry. It includes any costs related to production and maintenance cost of the property during the revenue generation process.

            This item is usually only available for mining and utility industries.



Get: OperationAndMaintenance(self: IncomeStatement) -> OperationAndMaintenanceIncomeStatement



Set: OperationAndMaintenance(self: IncomeStatement) = value

"""

    OtherCostofRevenue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Other costs associated with the revenue-generating activities of the company not categorized above.



Get: OtherCostofRevenue(self: IncomeStatement) -> OtherCostofRevenueIncomeStatement



Set: OtherCostofRevenue(self: IncomeStatement) = value

"""

    OtherCustomerServices = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Represents fees and commissions earned from provide other services. This item is usually only available for bank industry.



Get: OtherCustomerServices(self: IncomeStatement) -> OtherCustomerServicesIncomeStatement



Set: OtherCustomerServices(self: IncomeStatement) = value

"""

    OtherGA = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Other General and Administrative Expenses not categorized that the company incurs that are not directly tied to a specific function

            such as manufacturing, production, or sales.



Get: OtherGA(self: IncomeStatement) -> OtherGAIncomeStatement



Set: OtherGA(self: IncomeStatement) = value

"""

    OtherIncomeExpense = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Income or expense that comes from miscellaneous sources.



Get: OtherIncomeExpense(self: IncomeStatement) -> OtherIncomeExpenseIncomeStatement



Set: OtherIncomeExpense(self: IncomeStatement) = value

"""

    OtherInterestExpense = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """All other interest expense that is not otherwise classified



Get: OtherInterestExpense(self: IncomeStatement) -> OtherInterestExpenseIncomeStatement



Set: OtherInterestExpense(self: IncomeStatement) = value

"""

    OtherInterestIncome = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """All other interest income that is not otherwise classified



Get: OtherInterestIncome(self: IncomeStatement) -> OtherInterestIncomeIncomeStatement



Set: OtherInterestIncome(self: IncomeStatement) = value

"""

    OtherNonInterestExpense = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """All other non interest expense that is not otherwise classified



Get: OtherNonInterestExpense(self: IncomeStatement) -> OtherNonInterestExpenseIncomeStatement



Set: OtherNonInterestExpense(self: IncomeStatement) = value

"""

    OtherNonInterestIncome = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Usually available for the banking industry.  This is Non-Interest Income that is not otherwise classified.



Get: OtherNonInterestIncome(self: IncomeStatement) -> OtherNonInterestIncomeIncomeStatement



Set: OtherNonInterestIncome(self: IncomeStatement) = value

"""

    OtherNonOperatingExpenses = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Other expenses of the company that cannot be identified by other specific items in the Non-Operating section.



Get: OtherNonOperatingExpenses(self: IncomeStatement) -> OtherNonOperatingExpensesIncomeStatement



Set: OtherNonOperatingExpenses(self: IncomeStatement) = value

"""

    OtherNonOperatingIncome = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Other income of the company that cannot be identified by other specific items in the Non-Operating section.



Get: OtherNonOperatingIncome(self: IncomeStatement) -> OtherNonOperatingIncomeIncomeStatement



Set: OtherNonOperatingIncome(self: IncomeStatement) = value

"""

    OtherNonOperatingIncomeExpenses = property(lambda self: object(), lambda self, v: None,
                                               lambda self: None)  # default
    """Total other income and expense of the company that cannot be identified by other specific items in the Non-Operating section.



Get: OtherNonOperatingIncomeExpenses(self: IncomeStatement) -> OtherNonOperatingIncomeExpensesIncomeStatement



Set: OtherNonOperatingIncomeExpenses(self: IncomeStatement) = value

"""

    OtherOperatingExpenses = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The aggregate amount of operating expenses associated with normal operations. Will not include any gain, loss, benefit, or income;

            and its value reported by the company should be <0.



Get: OtherOperatingExpenses(self: IncomeStatement) -> OtherOperatingExpensesIncomeStatement



Set: OtherOperatingExpenses(self: IncomeStatement) = value

"""

    OtherOperatingIncomeTotal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Total Other Operating Income- including interest income, dividend income and other types of operating income.



Get: OtherOperatingIncomeTotal(self: IncomeStatement) -> OtherOperatingIncomeTotalIncomeStatement



Set: OtherOperatingIncomeTotal(self: IncomeStatement) = value

"""

    OtherSpecialCharges = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """All other special charges that are not otherwise classified



Get: OtherSpecialCharges(self: IncomeStatement) -> OtherSpecialChargesIncomeStatement



Set: OtherSpecialCharges(self: IncomeStatement) = value

"""

    OtherStaffCosts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Other costs in incurred in lieu of the employees that cannot be identified by other specific items in the Staff Costs section.



Get: OtherStaffCosts(self: IncomeStatement) -> OtherStaffCostsIncomeStatement



Set: OtherStaffCosts(self: IncomeStatement) = value

"""

    OtherTaxes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Any taxes that are not part of income taxes. This item is usually not available for bank and insurance industries.



Get: OtherTaxes(self: IncomeStatement) -> OtherTaxesIncomeStatement



Set: OtherTaxes(self: IncomeStatement) = value

"""

    OtherunderPreferredStockDividend = property(lambda self: object(), lambda self, v: None,
                                                lambda self: None)  # default
    """Dividend paid to the preferred shareholders before the common stock shareholders.



Get: OtherunderPreferredStockDividend(self: IncomeStatement) -> OtherunderPreferredStockDividendIncomeStatement



Set: OtherunderPreferredStockDividend(self: IncomeStatement) = value

"""

    PensionCosts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The expense that a company incurs each year by providing a pension plan for its employees. Major expenses in the pension cost

            include employer matching contributions and management fees.



Get: PensionCosts(self: IncomeStatement) -> PensionCostsIncomeStatement



Set: PensionCosts(self: IncomeStatement) = value

"""

    PolicyAcquisitionExpense = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Costs that vary with and are primarily related to the acquisition of new and renewal insurance contracts. Also referred to as

            underwriting expenses.



Get: PolicyAcquisitionExpense(self: IncomeStatement) -> PolicyAcquisitionExpenseIncomeStatement



Set: PolicyAcquisitionExpense(self: IncomeStatement) = value

"""

    PolicyholderBenefitsCeded = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The provision in current period for future policy benefits, claims, and claims settlement, which is under reinsurance arrangements.

            This item is usually only available for insurance industry.



Get: PolicyholderBenefitsCeded(self: IncomeStatement) -> PolicyholderBenefitsCededIncomeStatement



Set: PolicyholderBenefitsCeded(self: IncomeStatement) = value

"""

    PolicyholderBenefitsGross = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The gross amount of provision in current period for future policyholder benefits, claims, and claims settlement, incurred in the

            claims settlement process before the effects of reinsurance arrangements. This item is usually only available for insurance industry.



Get: PolicyholderBenefitsGross(self: IncomeStatement) -> PolicyholderBenefitsGrossIncomeStatement



Set: PolicyholderBenefitsGross(self: IncomeStatement) = value

"""

    PolicyholderDividends = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Payments made or credits extended to the insured by the company, usually at the end of a policy year results in reducing the net

            insurance cost to the policyholder. Such dividends may be paid in cash to the insured or applied by the insured as reductions of the

            premiums due for the next policy year. This item is usually only available for insurance industry.



Get: PolicyholderDividends(self: IncomeStatement) -> PolicyholderDividendsIncomeStatement



Set: PolicyholderDividends(self: IncomeStatement) = value

"""

    PolicyholderInterest = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The periodic income payment provided to the annuitant by the insurance company, which is determined by the assumed interest

            rate (AIR) and other factors. This item is usually only available for insurance industry.



Get: PolicyholderInterest(self: IncomeStatement) -> PolicyholderInterestIncomeStatement



Set: PolicyholderInterest(self: IncomeStatement) = value

"""

    PreferredStockDividends = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The amount of dividends declared or paid in the period to preferred shareholders, or the amount for which the obligation to pay

            them dividends arose in the period. Preferred dividends are the amount required for the current year only, and not for any amount

            required in past years.



Get: PreferredStockDividends(self: IncomeStatement) -> PreferredStockDividendsIncomeStatement



Set: PreferredStockDividends(self: IncomeStatement) = value

"""

    PretaxIncome = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Reported income before the deduction or benefit of income taxes.



Get: PretaxIncome(self: IncomeStatement) -> PretaxIncomeIncomeStatement



Set: PretaxIncome(self: IncomeStatement) = value

"""

    ProfessionalExpenseAndContractServicesExpense = property(lambda self: object(), lambda self, v: None,
                                                             lambda self: None)  # default
    """Professional and contract service expense includes cost reimbursements for support services related to contracted projects,

            outsourced management, technical and staff support. This item is usually only available for bank industry.



Get: ProfessionalExpenseAndContractServicesExpense(self: IncomeStatement) -> ProfessionalExpenseAndContractServicesExpenseIncomeStatement



Set: ProfessionalExpenseAndContractServicesExpense(self: IncomeStatement) = value

"""

    ProvisionForDoubtfulAccounts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Amount of the current period expense charged against operations, the offset which is generally to the allowance for doubtful

            accounts for the purpose of reducing receivables, including notes receivable, to an amount that approximates their net realizable

            value (the amount expected to be collected). The category includes provision for loan losses, provision for any doubtful account

            receivable, and bad debt expenses. This item is usually not available for bank and insurance industries.



Get: ProvisionForDoubtfulAccounts(self: IncomeStatement) -> ProvisionForDoubtfulAccountsIncomeStatement



Set: ProvisionForDoubtfulAccounts(self: IncomeStatement) = value

"""

    ReconciledCostOfRevenue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Cost Of Revenue plus Depreciation, Depletion & Amortization from the IncomeStatement; minus Depreciation, Depletion &

            Amortization from the Cash Flow Statement



Get: ReconciledCostOfRevenue(self: IncomeStatement) -> ReconciledCostOfRevenueIncomeStatement



Set: ReconciledCostOfRevenue(self: IncomeStatement) = value

"""

    ReconciledDepreciation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Is Depreciation, Depletion & Amortization from the Cash Flow Statement



Get: ReconciledDepreciation(self: IncomeStatement) -> ReconciledDepreciationIncomeStatement



Set: ReconciledDepreciation(self: IncomeStatement) = value

"""

    ReinsuranceRecoveriesClaimsandBenefits = property(lambda self: object(), lambda self, v: None,
                                                      lambda self: None)  # default
    """Claim on the reinsurance company and take the benefits.



Get: ReinsuranceRecoveriesClaimsandBenefits(self: IncomeStatement) -> ReinsuranceRecoveriesClaimsandBenefitsIncomeStatement



Set: ReinsuranceRecoveriesClaimsandBenefits(self: IncomeStatement) = value

"""

    ReinsuranceRecoveriesofInsuranceLiabilities = property(lambda self: object(), lambda self, v: None,
                                                           lambda self: None)  # default
    """Income/Expense due to recoveries from reinsurers for insurance liabilities.



Get: ReinsuranceRecoveriesofInsuranceLiabilities(self: IncomeStatement) -> ReinsuranceRecoveriesofInsuranceLiabilitiesIncomeStatement



Set: ReinsuranceRecoveriesofInsuranceLiabilities(self: IncomeStatement) = value

"""

    ReinsuranceRecoveriesofInvestmentContract = property(lambda self: object(), lambda self, v: None,
                                                         lambda self: None)  # default
    """Income/Expense due to recoveries from reinsurers for Investment Contracts.



Get: ReinsuranceRecoveriesofInvestmentContract(self: IncomeStatement) -> ReinsuranceRecoveriesofInvestmentContractIncomeStatement



Set: ReinsuranceRecoveriesofInvestmentContract(self: IncomeStatement) = value

"""

    RentAndLandingFees = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Rent fees are the cost of occupying space during the accounting period. Landing fees are a change paid to an airport company for

            landing at a particular airport. This item is not available for insurance industry.



Get: RentAndLandingFees(self: IncomeStatement) -> RentAndLandingFeesIncomeStatement



Set: RentAndLandingFees(self: IncomeStatement) = value

"""

    RentandLandingFeesCostofRevenue = property(lambda self: object(), lambda self, v: None,
                                               lambda self: None)  # default
    """Costs paid to use the facilities necessary to generate revenue during the accounting period.



Get: RentandLandingFeesCostofRevenue(self: IncomeStatement) -> RentandLandingFeesCostofRevenueIncomeStatement



Set: RentandLandingFeesCostofRevenue(self: IncomeStatement) = value

"""

    RentExpenseSupplemental = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The sum of all rent expenses incurred by the company for operating leases during the year, it is a supplemental value which would

            be reported outside consolidated statements or consolidated statement's footnotes.



Get: RentExpenseSupplemental(self: IncomeStatement) -> RentExpenseSupplementalIncomeStatement



Set: RentExpenseSupplemental(self: IncomeStatement) = value

"""

    ResearchAndDevelopment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The aggregate amount of research and development expenses during the year.



Get: ResearchAndDevelopment(self: IncomeStatement) -> ResearchAndDevelopmentIncomeStatement



Set: ResearchAndDevelopment(self: IncomeStatement) = value

"""

    ResearchAndDevelopmentExpensesSupplemental = property(lambda self: object(), lambda self, v: None,
                                                          lambda self: None)  # default
    """The aggregate amount of research and development expenses during the year. It is a supplemental value which would be reported

            outside consolidated statements.



Get: ResearchAndDevelopmentExpensesSupplemental(self: IncomeStatement) -> ResearchAndDevelopmentExpensesSupplementalIncomeStatement



Set: ResearchAndDevelopmentExpensesSupplemental(self: IncomeStatement) = value

"""

    RestructuringAndMergernAcquisition = property(lambda self: object(), lambda self, v: None,
                                                  lambda self: None)  # default
    """Expenses are related to restructuring, merger, or acquisitions. Restructuring expenses are charges associated with the

            consolidation and relocation of operations, disposition or abandonment of operations or productive assets. Merger and acquisition

            expenses are the amount of costs of a business combination including legal, accounting, and other costs that were charged to

            expense during the period.



Get: RestructuringAndMergernAcquisition(self: IncomeStatement) -> RestructuringAndMergernAcquisitionIncomeStatement



Set: RestructuringAndMergernAcquisition(self: IncomeStatement) = value

"""

    SalariesAndWages = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """All salary, wages, compensation, management fees, and employee benefit expenses.



Get: SalariesAndWages(self: IncomeStatement) -> SalariesAndWagesIncomeStatement



Set: SalariesAndWages(self: IncomeStatement) = value

"""

    SecuritiesActivities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Income/Loss from Securities and Activities



Get: SecuritiesActivities(self: IncomeStatement) -> SecuritiesActivitiesIncomeStatement



Set: SecuritiesActivities(self: IncomeStatement) = value

"""

    SecuritiesAmortization = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The gradual elimination of a liability, such as a mortgage, in regular payments over a specified period of time. Such payments must

            be sufficient to cover both principal and interest.



Get: SecuritiesAmortization(self: IncomeStatement) -> SecuritiesAmortizationIncomeStatement



Set: SecuritiesAmortization(self: IncomeStatement) = value

"""

    SellingAndMarketingExpense = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The aggregate total amount of expenses directly related to the marketing or selling of products or services.



Get: SellingAndMarketingExpense(self: IncomeStatement) -> SellingAndMarketingExpenseIncomeStatement



Set: SellingAndMarketingExpense(self: IncomeStatement) = value

"""

    SellingGeneralAndAdministration = property(lambda self: object(), lambda self, v: None,
                                               lambda self: None)  # default
    """The aggregate total costs related to selling a firm's product and services, as well as all other general and administrative expenses.

            Selling expenses are those directly related to the company's efforts to generate sales (e.g., sales salaries, commissions,

            advertising, delivery expenses). General and administrative expenses are expenses related to general administration of the

            company's operation (e.g., officers and office salaries, office supplies, telephone, accounting and legal services, and business

            licenses and fees).



Get: SellingGeneralAndAdministration(self: IncomeStatement) -> SellingGeneralAndAdministrationIncomeStatement



Set: SellingGeneralAndAdministration(self: IncomeStatement) = value

"""

    ServiceChargeOnDepositorAccounts = property(lambda self: object(), lambda self, v: None,
                                                lambda self: None)  # default
    """Includes any service charges on following accounts: Demand Deposit; Checking account; Savings account; Deposit in foreign

            offices; ESCROW accounts; Money Market Certificates & Deposit accounts, CDs (Negotiable Certificates of Deposits); NOW

            Accounts (Negotiable Order of Withdrawal); IRAs (Individual Retirement Accounts). This item is usually only available for bank

            industry.



Get: ServiceChargeOnDepositorAccounts(self: IncomeStatement) -> ServiceChargeOnDepositorAccountsIncomeStatement



Set: ServiceChargeOnDepositorAccounts(self: IncomeStatement) = value

"""

    SocialSecurityCosts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Benefits paid to the employees in respect of their work.



Get: SocialSecurityCosts(self: IncomeStatement) -> SocialSecurityCostsIncomeStatement



Set: SocialSecurityCosts(self: IncomeStatement) = value

"""

    SpecialIncomeCharges = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Earnings or losses attributable to occurrences or actions by the firm that is either infrequent or unusual.



Get: SpecialIncomeCharges(self: IncomeStatement) -> SpecialIncomeChargesIncomeStatement



Set: SpecialIncomeCharges(self: IncomeStatement) = value

"""

    StaffCosts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Total staff cost which is paid to the employees that is not part of Selling, General, and Administration expense.



Get: StaffCosts(self: IncomeStatement) -> StaffCostsIncomeStatement



Set: StaffCosts(self: IncomeStatement) = value

"""

    StockBasedCompensation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The cost to the company for granting stock options to reward employees.



Get: StockBasedCompensation(self: IncomeStatement) -> StockBasedCompensationIncomeStatement



Set: StockBasedCompensation(self: IncomeStatement) = value

"""

    TaxEffectOfUnusualItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Tax effect of the usual items



Get: TaxEffectOfUnusualItems(self: IncomeStatement) -> TaxEffectOfUnusualItemsIncomeStatement



Set: TaxEffectOfUnusualItems(self: IncomeStatement) = value

"""

    TaxProvision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Include any taxes on income, net of any investment tax credits for the current accounting period.



Get: TaxProvision(self: IncomeStatement) -> TaxProvisionIncomeStatement



Set: TaxProvision(self: IncomeStatement) = value

"""

    TaxRateForCalcs = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Tax rate used for Morningstar calculations.



Get: TaxRateForCalcs(self: IncomeStatement) -> TaxRateForCalcsIncomeStatement



Set: TaxRateForCalcs(self: IncomeStatement) = value

"""

    TotalDividendPaymentofEquityShares = property(lambda self: object(), lambda self, v: None,
                                                  lambda self: None)  # default
    """Total amount paid in dividends to equity securities investors.



Get: TotalDividendPaymentofEquityShares(self: IncomeStatement) -> TotalDividendPaymentofEquitySharesIncomeStatement



Set: TotalDividendPaymentofEquityShares(self: IncomeStatement) = value

"""

    TotalDividendPaymentofNonEquityShares = property(lambda self: object(), lambda self, v: None,
                                                     lambda self: None)  # default
    """Total amount paid in dividends to Non-Equity securities investors.



Get: TotalDividendPaymentofNonEquityShares(self: IncomeStatement) -> TotalDividendPaymentofNonEquitySharesIncomeStatement



Set: TotalDividendPaymentofNonEquityShares(self: IncomeStatement) = value

"""

    TotalExpenses = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The sum of operating expense and cost of revenue. If the company does not give the reported number, it will be calculated by

            adding operating expense and cost of revenue.



Get: TotalExpenses(self: IncomeStatement) -> TotalExpensesIncomeStatement



Set: TotalExpenses(self: IncomeStatement) = value

"""

    TotalMoneyMarketInvestments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The sum of the money market investments held by a bank's depositors, which are FDIC insured.



Get: TotalMoneyMarketInvestments(self: IncomeStatement) -> TotalMoneyMarketInvestmentsIncomeStatement



Set: TotalMoneyMarketInvestments(self: IncomeStatement) = value

"""

    TotalOperatingIncomeAsReported = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Operating profit/loss as reported by the company, may be the same or not the same as Morningstar's standardized definition.



Get: TotalOperatingIncomeAsReported(self: IncomeStatement) -> TotalOperatingIncomeAsReportedIncomeStatement



Set: TotalOperatingIncomeAsReported(self: IncomeStatement) = value

"""

    TotalOtherFinanceCost = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Any other finance cost which is not clearly defined in the Non-Operating section.



Get: TotalOtherFinanceCost(self: IncomeStatement) -> TotalOtherFinanceCostIncomeStatement



Set: TotalOtherFinanceCost(self: IncomeStatement) = value

"""

    TotalPremiumsEarned = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Premiums earned is the portion of an insurance written premium which is considered "earned" by the insurer, based on the part of

            the policy period that the insurance has been in effect, and during which the insurer has been exposed to loss.



Get: TotalPremiumsEarned(self: IncomeStatement) -> TotalPremiumsEarnedIncomeStatement



Set: TotalPremiumsEarned(self: IncomeStatement) = value

"""

    TotalRevenue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """All sales, business revenues and income that the company makes from its business operations, net of excise taxes. This applies for

            all companies and can be used as comparison for all industries.

            For Normal, Mining, Transportation and Utility templates companies, this is the sum of Operating Revenues, Excise Taxes and Fees.

            For Bank template companies, this is the sum of Net Interest Income and Non-Interest Income.

            For Insurance template companies, this is the sum of Premiums, Interest Income, Fees, Investment and Other Income.



Get: TotalRevenue(self: IncomeStatement) -> TotalRevenueIncomeStatement



Set: TotalRevenue(self: IncomeStatement) = value

"""

    TotalRevenueAsReported = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Total revenue as reported by the company, may be the same or not the same as Morningstar's standardized definition.



Get: TotalRevenueAsReported(self: IncomeStatement) -> TotalRevenueAsReportedIncomeStatement



Set: TotalRevenueAsReported(self: IncomeStatement) = value

"""

    TotalUnusualItems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Total unusual items including Negative Goodwill.



Get: TotalUnusualItems(self: IncomeStatement) -> TotalUnusualItemsIncomeStatement



Set: TotalUnusualItems(self: IncomeStatement) = value

"""

    TotalUnusualItemsExcludingGoodwill = property(lambda self: object(), lambda self, v: None,
                                                  lambda self: None)  # default
    """The sum of all the identifiable operating and non-operating unusual items.



Get: TotalUnusualItemsExcludingGoodwill(self: IncomeStatement) -> TotalUnusualItemsExcludingGoodwillIncomeStatement



Set: TotalUnusualItemsExcludingGoodwill(self: IncomeStatement) = value

"""

    TradingGainLoss = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A broker-dealer or other financial entity may buy and sell securities exclusively for its own account, sometimes referred to as

            proprietary trading. The profit or loss is measured by the difference between the acquisition cost and the selling price or current

            market or fair value. The net gain or loss, includes both realized and unrealized, from trading cash instruments, equities and

            derivative contracts (including commodity contracts) that has been recognized during the accounting period for the broker dealer or

            other financial entity's own account. This item is typically available for bank industry.



Get: TradingGainLoss(self: IncomeStatement) -> TradingGainLossIncomeStatement



Set: TradingGainLoss(self: IncomeStatement) = value

"""

    TrustFeesbyCommissions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Bank manages funds on behalf of its customers through the operation of various trust accounts. Any fees earned through managing

            those funds are called trust fees, which are recognized when earned. This item is typically available for bank industry.



Get: TrustFeesbyCommissions(self: IncomeStatement) -> TrustFeesbyCommissionsIncomeStatement



Set: TrustFeesbyCommissions(self: IncomeStatement) = value

"""

    UnderwritingExpenses = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Also known as Policy Acquisition Costs; and reported by insurance companies.  The cost incurred by an insurer when deciding

            whether to accept or decline a risk; may include meetings with the insureds or brokers, actuarial review of loss history, or physical

            inspections of exposures. Also, expenses deducted from insurance company revenues (including incurred losses and acquisition

            costs) to determine underwriting profit.



Get: UnderwritingExpenses(self: IncomeStatement) -> UnderwritingExpensesIncomeStatement



Set: UnderwritingExpenses(self: IncomeStatement) = value

"""

    WagesandSalaries = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This is the portion under Staff Costs that represents salary paid to the employees in respect of their work.



Get: WagesandSalaries(self: IncomeStatement) -> WagesandSalariesIncomeStatement



Set: WagesandSalaries(self: IncomeStatement) = value

"""

    WriteOff = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A reduction in the value of an asset or earnings by the amount of an expense or loss.



Get: WriteOff(self: IncomeStatement) -> WriteOffIncomeStatement



Set: WriteOff(self: IncomeStatement) = value

"""


class IncomeTaxPaidSupplementalDataCashFlowStatement(MultiPeriodField):
    """
    The amount of cash paid during the current period to foreign, federal state and local authorities as taxes on income.



    IncomeTaxPaidSupplementalDataCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: IncomeTaxPaidSupplementalDataCashFlowStatement) -> Decimal



Set: NineMonths(self: IncomeTaxPaidSupplementalDataCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: IncomeTaxPaidSupplementalDataCashFlowStatement) -> Decimal



Set: OneMonth(self: IncomeTaxPaidSupplementalDataCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: IncomeTaxPaidSupplementalDataCashFlowStatement) -> Decimal



Set: SixMonths(self: IncomeTaxPaidSupplementalDataCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: IncomeTaxPaidSupplementalDataCashFlowStatement) -> Decimal



Set: ThreeMonths(self: IncomeTaxPaidSupplementalDataCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: IncomeTaxPaidSupplementalDataCashFlowStatement) -> Decimal



Set: TwelveMonths(self: IncomeTaxPaidSupplementalDataCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: IncomeTaxPaidSupplementalDataCashFlowStatement) -> Decimal



Set: TwoMonths(self: IncomeTaxPaidSupplementalDataCashFlowStatement) = value

"""

    Store = None


class IncomeTaxPayableBalanceSheet(MultiPeriodField):
    """
    A current liability account which reflects the amount of income taxes currently due to the federal, state, and local governments.



    IncomeTaxPayableBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: IncomeTaxPayableBalanceSheet) -> Decimal



Set: NineMonths(self: IncomeTaxPayableBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: IncomeTaxPayableBalanceSheet) -> Decimal



Set: OneMonth(self: IncomeTaxPayableBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: IncomeTaxPayableBalanceSheet) -> Decimal



Set: SixMonths(self: IncomeTaxPayableBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: IncomeTaxPayableBalanceSheet) -> Decimal



Set: ThreeMonths(self: IncomeTaxPayableBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: IncomeTaxPayableBalanceSheet) -> Decimal



Set: TwelveMonths(self: IncomeTaxPayableBalanceSheet) = value

"""

    Store = None


class IncreaseDecreaseInDepositCashFlowStatement(MultiPeriodField):
    """
    The aggregate net change during the reporting period in moneys given as security, collateral, or margin deposits.



    IncreaseDecreaseInDepositCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: IncreaseDecreaseInDepositCashFlowStatement) -> Decimal



Set: NineMonths(self: IncreaseDecreaseInDepositCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: IncreaseDecreaseInDepositCashFlowStatement) -> Decimal



Set: SixMonths(self: IncreaseDecreaseInDepositCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: IncreaseDecreaseInDepositCashFlowStatement) -> Decimal



Set: ThreeMonths(self: IncreaseDecreaseInDepositCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: IncreaseDecreaseInDepositCashFlowStatement) -> Decimal



Set: TwelveMonths(self: IncreaseDecreaseInDepositCashFlowStatement) = value

"""

    Store = None


class IncreaseDecreaseinLeaseFinancingCashFlowStatement(MultiPeriodField):
    """
    Change in cash flow resulting from increase/decrease in lease financing.



    IncreaseDecreaseinLeaseFinancingCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: IncreaseDecreaseinLeaseFinancingCashFlowStatement) -> Decimal



Set: NineMonths(self: IncreaseDecreaseinLeaseFinancingCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: IncreaseDecreaseinLeaseFinancingCashFlowStatement) -> Decimal



Set: SixMonths(self: IncreaseDecreaseinLeaseFinancingCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: IncreaseDecreaseinLeaseFinancingCashFlowStatement) -> Decimal



Set: ThreeMonths(self: IncreaseDecreaseinLeaseFinancingCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: IncreaseDecreaseinLeaseFinancingCashFlowStatement) -> Decimal



Set: TwelveMonths(self: IncreaseDecreaseinLeaseFinancingCashFlowStatement) = value

"""

    Store = None


class IncreaseDecreaseInNetUnearnedPremiumReservesIncomeStatement(MultiPeriodField):
    """
    Premium might contain a portion of the amount that has been paid in advance for insurance that has not yet been provided, which

                is called unearned premium. If either party cancels the contract, the insurer must have the unearned premium ready to refund.

                Hence, the amount of premium reserve maintained by insurers is called unearned premium reserves, which is prepared for

                liquidation.  This item is usually only available for insurance industry.



    IncreaseDecreaseInNetUnearnedPremiumReservesIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: IncreaseDecreaseInNetUnearnedPremiumReservesIncomeStatement) -> Decimal



Set: NineMonths(self: IncreaseDecreaseInNetUnearnedPremiumReservesIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: IncreaseDecreaseInNetUnearnedPremiumReservesIncomeStatement) -> Decimal



Set: SixMonths(self: IncreaseDecreaseInNetUnearnedPremiumReservesIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: IncreaseDecreaseInNetUnearnedPremiumReservesIncomeStatement) -> Decimal



Set: ThreeMonths(self: IncreaseDecreaseInNetUnearnedPremiumReservesIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: IncreaseDecreaseInNetUnearnedPremiumReservesIncomeStatement) -> Decimal



Set: TwelveMonths(self: IncreaseDecreaseInNetUnearnedPremiumReservesIncomeStatement) = value

"""

    Store = None


class IncreaseinInterestBearingDepositsinBankCashFlowStatement(MultiPeriodField):
    """
    Increase in interest-bearing deposits in bank.



    IncreaseinInterestBearingDepositsinBankCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: IncreaseinInterestBearingDepositsinBankCashFlowStatement) -> Decimal



Set: NineMonths(self: IncreaseinInterestBearingDepositsinBankCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: IncreaseinInterestBearingDepositsinBankCashFlowStatement) -> Decimal



Set: SixMonths(self: IncreaseinInterestBearingDepositsinBankCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: IncreaseinInterestBearingDepositsinBankCashFlowStatement) -> Decimal



Set: ThreeMonths(self: IncreaseinInterestBearingDepositsinBankCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: IncreaseinInterestBearingDepositsinBankCashFlowStatement) -> Decimal



Set: TwelveMonths(self: IncreaseinInterestBearingDepositsinBankCashFlowStatement) = value

"""

    Store = None


class IncreaseinLeaseFinancingCashFlowStatement(MultiPeriodField):
    """
    The cash inflow from increase in lease financing.



    IncreaseinLeaseFinancingCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: IncreaseinLeaseFinancingCashFlowStatement) -> Decimal



Set: SixMonths(self: IncreaseinLeaseFinancingCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: IncreaseinLeaseFinancingCashFlowStatement) -> Decimal



Set: TwelveMonths(self: IncreaseinLeaseFinancingCashFlowStatement) = value

"""

    Store = None


class InsuranceAndClaimsIncomeStatement(MultiPeriodField):
    """
    Insurance and claims are the expenses in the period incurred with respect to protection provided by insurance entities against risks

                other than risks associated with production (which is allocated to cost of sales). This item is usually not available for insurance

                industries.



    InsuranceAndClaimsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InsuranceAndClaimsIncomeStatement) -> Decimal



Set: NineMonths(self: InsuranceAndClaimsIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InsuranceAndClaimsIncomeStatement) -> Decimal



Set: SixMonths(self: InsuranceAndClaimsIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InsuranceAndClaimsIncomeStatement) -> Decimal



Set: ThreeMonths(self: InsuranceAndClaimsIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InsuranceAndClaimsIncomeStatement) -> Decimal



Set: TwelveMonths(self: InsuranceAndClaimsIncomeStatement) = value

"""

    Store = None


class InsuranceContractAssetsBalanceSheet(MultiPeriodField):
    """
    A contract under which one party (the insurer) accepts significant insurance risk from another party (the policyholder) by agreeing

                to compensate the policyholder if a specified uncertain future event (the insured event) adversely affects the policyholder. This

                includes Insurance Receivables and Premiums Receivables.



    InsuranceContractAssetsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InsuranceContractAssetsBalanceSheet) -> Decimal



Set: ThreeMonths(self: InsuranceContractAssetsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InsuranceContractAssetsBalanceSheet) -> Decimal



Set: TwelveMonths(self: InsuranceContractAssetsBalanceSheet) = value

"""

    Store = None


class InsuranceContractLiabilitiesBalanceSheet(MultiPeriodField):
    """
    Any type of insurance policy that protects an individual or business from the risk that they may be sued and held legally liable for

                something such as malpractice, injury or negligence. Liability insurance policies cover both legal costs and any legal payouts for

                which the insured would be responsible if found legally liable. Intentional damage and contractual liabilities are typically not covered

                in these types of policies.



    InsuranceContractLiabilitiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InsuranceContractLiabilitiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: InsuranceContractLiabilitiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InsuranceContractLiabilitiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: InsuranceContractLiabilitiesBalanceSheet) = value

"""

    Store = None


class InsuranceFundsNonCurrentBalanceSheet(MultiPeriodField):
    """
    Liabilities related to insurance funds that are dissolved after one year.



    InsuranceFundsNonCurrentBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InsuranceFundsNonCurrentBalanceSheet) -> Decimal



Set: ThreeMonths(self: InsuranceFundsNonCurrentBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InsuranceFundsNonCurrentBalanceSheet) -> Decimal



Set: TwelveMonths(self: InsuranceFundsNonCurrentBalanceSheet) = value

"""

    Store = None


class InterestandCommissionPaidCashFlowStatement(MultiPeriodField):
    """
    Cash paid for interest and commission in operating cash flow, using the direct method



    InterestandCommissionPaidCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InterestandCommissionPaidCashFlowStatement) -> Decimal



Set: NineMonths(self: InterestandCommissionPaidCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InterestandCommissionPaidCashFlowStatement) -> Decimal



Set: SixMonths(self: InterestandCommissionPaidCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InterestandCommissionPaidCashFlowStatement) -> Decimal



Set: ThreeMonths(self: InterestandCommissionPaidCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InterestandCommissionPaidCashFlowStatement) -> Decimal



Set: TwelveMonths(self: InterestandCommissionPaidCashFlowStatement) = value

"""

    Store = None


class InterestBearingBorrowingsNonCurrentBalanceSheet(MultiPeriodField):
    """
    Carrying amount of any interest-bearing loan which is due after one year.



    InterestBearingBorrowingsNonCurrentBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InterestBearingBorrowingsNonCurrentBalanceSheet) -> Decimal



Set: ThreeMonths(self: InterestBearingBorrowingsNonCurrentBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InterestBearingBorrowingsNonCurrentBalanceSheet) -> Decimal



Set: TwelveMonths(self: InterestBearingBorrowingsNonCurrentBalanceSheet) = value

"""

    Store = None


class InterestBearingDepositsAssetsBalanceSheet(MultiPeriodField):
    """
    Deposit of money with a financial institution, in consideration of which the financial institution pays or credits interest, or amounts in the nature

                of interest.



    InterestBearingDepositsAssetsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InterestBearingDepositsAssetsBalanceSheet) -> Decimal



Set: NineMonths(self: InterestBearingDepositsAssetsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InterestBearingDepositsAssetsBalanceSheet) -> Decimal



Set: SixMonths(self: InterestBearingDepositsAssetsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InterestBearingDepositsAssetsBalanceSheet) -> Decimal



Set: ThreeMonths(self: InterestBearingDepositsAssetsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InterestBearingDepositsAssetsBalanceSheet) -> Decimal



Set: TwelveMonths(self: InterestBearingDepositsAssetsBalanceSheet) = value

"""

    Store = None


class InterestBearingDepositsLiabilitiesBalanceSheet(MultiPeriodField):
    """
    The aggregate of all domestic and foreign deposits in the bank that earns interests.



    InterestBearingDepositsLiabilitiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InterestBearingDepositsLiabilitiesBalanceSheet) -> Decimal



Set: NineMonths(self: InterestBearingDepositsLiabilitiesBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InterestBearingDepositsLiabilitiesBalanceSheet) -> Decimal



Set: SixMonths(self: InterestBearingDepositsLiabilitiesBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InterestBearingDepositsLiabilitiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: InterestBearingDepositsLiabilitiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InterestBearingDepositsLiabilitiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: InterestBearingDepositsLiabilitiesBalanceSheet) = value

"""

    Store = None


class InterestCoverage(MultiPeriodField):
    """
    Refers to the ratio of EBIT to Interest Expense. Morningstar calculates the ratio by using the underlying data reported in the Income

                Statement within the company filings or reports:    EBIT / Interest Expense.



    InterestCoverage(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InterestCoverage) -> Decimal



Set: NineMonths(self: InterestCoverage) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: InterestCoverage) -> Decimal



Set: OneMonth(self: InterestCoverage) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: InterestCoverage) -> Decimal



Set: OneYear(self: InterestCoverage) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InterestCoverage) -> Decimal



Set: SixMonths(self: InterestCoverage) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InterestCoverage) -> Decimal



Set: ThreeMonths(self: InterestCoverage) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: InterestCoverage) -> Decimal



Set: TwoMonths(self: InterestCoverage) = value

"""

    Store = None


class InterestCreditedOnPolicyholderDepositsCashFlowStatement(MultiPeriodField):
    """
    An expense reported in the income statement and needs to be removed from net income to arrive at cash provided by (used in)

                operations to the extent that such interest has not been paid. This item is usually only available for insurance industry.



    InterestCreditedOnPolicyholderDepositsCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InterestCreditedOnPolicyholderDepositsCashFlowStatement) -> Decimal



Set: NineMonths(self: InterestCreditedOnPolicyholderDepositsCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InterestCreditedOnPolicyholderDepositsCashFlowStatement) -> Decimal



Set: SixMonths(self: InterestCreditedOnPolicyholderDepositsCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InterestCreditedOnPolicyholderDepositsCashFlowStatement) -> Decimal



Set: ThreeMonths(self: InterestCreditedOnPolicyholderDepositsCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InterestCreditedOnPolicyholderDepositsCashFlowStatement) -> Decimal



Set: TwelveMonths(self: InterestCreditedOnPolicyholderDepositsCashFlowStatement) = value

"""

    Store = None


class InterestExpenseForDepositIncomeStatement(MultiPeriodField):
    """
    Includes interest expense on the following deposit accounts: Interest-bearing Demand deposit; Checking account; Savings account;

                Deposit in foreign offices; Money Market Certificates & Deposit Accounts. This item is usually only available for bank industry.



    InterestExpenseForDepositIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InterestExpenseForDepositIncomeStatement) -> Decimal



Set: NineMonths(self: InterestExpenseForDepositIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: InterestExpenseForDepositIncomeStatement) -> Decimal



Set: OneMonth(self: InterestExpenseForDepositIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InterestExpenseForDepositIncomeStatement) -> Decimal



Set: SixMonths(self: InterestExpenseForDepositIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InterestExpenseForDepositIncomeStatement) -> Decimal



Set: ThreeMonths(self: InterestExpenseForDepositIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InterestExpenseForDepositIncomeStatement) -> Decimal



Set: TwelveMonths(self: InterestExpenseForDepositIncomeStatement) = value

"""

    Store = None


class InterestExpenseForFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellIncomeStatement(MultiPeriodField):
    """
    Gross expenses on the purchase of Federal funds at a specified price with a simultaneous agreement to sell the same to the same

                counterparty at a fixed or determinable price at a future date. This item is usually only available for bank industry.



    InterestExpenseForFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InterestExpenseForFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellIncomeStatement) -> Decimal



Set: NineMonths(self: InterestExpenseForFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InterestExpenseForFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellIncomeStatement) -> Decimal



Set: SixMonths(self: InterestExpenseForFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InterestExpenseForFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellIncomeStatement) -> Decimal



Set: ThreeMonths(self: InterestExpenseForFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InterestExpenseForFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellIncomeStatement) -> Decimal



Set: TwelveMonths(self: InterestExpenseForFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellIncomeStatement) = value

"""

    Store = None


class InterestExpenseForLongTermDebtAndCapitalSecuritiesIncomeStatement(MultiPeriodField):
    """
    The aggregate interest expenses incurred on long-term borrowings and any interest expenses on fixed assets (property, plant,

                equipment) that are leased due longer than one year. This item is usually only available for bank industry.



    InterestExpenseForLongTermDebtAndCapitalSecuritiesIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InterestExpenseForLongTermDebtAndCapitalSecuritiesIncomeStatement) -> Decimal



Set: NineMonths(self: InterestExpenseForLongTermDebtAndCapitalSecuritiesIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: InterestExpenseForLongTermDebtAndCapitalSecuritiesIncomeStatement) -> Decimal



Set: OneMonth(self: InterestExpenseForLongTermDebtAndCapitalSecuritiesIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InterestExpenseForLongTermDebtAndCapitalSecuritiesIncomeStatement) -> Decimal



Set: SixMonths(self: InterestExpenseForLongTermDebtAndCapitalSecuritiesIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InterestExpenseForLongTermDebtAndCapitalSecuritiesIncomeStatement) -> Decimal



Set: ThreeMonths(self: InterestExpenseForLongTermDebtAndCapitalSecuritiesIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InterestExpenseForLongTermDebtAndCapitalSecuritiesIncomeStatement) -> Decimal



Set: TwelveMonths(self: InterestExpenseForLongTermDebtAndCapitalSecuritiesIncomeStatement) = value

"""

    Store = None


class InterestExpenseForShortTermDebtIncomeStatement(MultiPeriodField):
    """
    The aggregate interest expenses incurred on short-term borrowings and any interest expenses on fixed assets (property, plant,

                equipment) that are leased within one year. This item is usually only available for bank industry.



    InterestExpenseForShortTermDebtIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InterestExpenseForShortTermDebtIncomeStatement) -> Decimal



Set: NineMonths(self: InterestExpenseForShortTermDebtIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InterestExpenseForShortTermDebtIncomeStatement) -> Decimal



Set: SixMonths(self: InterestExpenseForShortTermDebtIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InterestExpenseForShortTermDebtIncomeStatement) -> Decimal



Set: ThreeMonths(self: InterestExpenseForShortTermDebtIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InterestExpenseForShortTermDebtIncomeStatement) -> Decimal



Set: TwelveMonths(self: InterestExpenseForShortTermDebtIncomeStatement) = value

"""

    Store = None


class InterestExpenseIncomeStatement(MultiPeriodField):
    """
    Relates to the general cost of borrowing money. It is the price that a lender charges a borrower for the use of the lender's money.



    InterestExpenseIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InterestExpenseIncomeStatement) -> Decimal



Set: NineMonths(self: InterestExpenseIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: InterestExpenseIncomeStatement) -> Decimal



Set: OneMonth(self: InterestExpenseIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InterestExpenseIncomeStatement) -> Decimal



Set: SixMonths(self: InterestExpenseIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InterestExpenseIncomeStatement) -> Decimal



Set: ThreeMonths(self: InterestExpenseIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InterestExpenseIncomeStatement) -> Decimal



Set: TwelveMonths(self: InterestExpenseIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: InterestExpenseIncomeStatement) -> Decimal



Set: TwoMonths(self: InterestExpenseIncomeStatement) = value

"""

    Store = None


class InterestExpenseNonOperatingIncomeStatement(MultiPeriodField):
    """
    Interest expense caused by long term financing activities; such as interest expense incurred on trading liabilities, commercial paper,

                long-term debt, capital leases, deposits, and all other borrowings.



    InterestExpenseNonOperatingIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InterestExpenseNonOperatingIncomeStatement) -> Decimal



Set: NineMonths(self: InterestExpenseNonOperatingIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: InterestExpenseNonOperatingIncomeStatement) -> Decimal



Set: OneMonth(self: InterestExpenseNonOperatingIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InterestExpenseNonOperatingIncomeStatement) -> Decimal



Set: SixMonths(self: InterestExpenseNonOperatingIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InterestExpenseNonOperatingIncomeStatement) -> Decimal



Set: ThreeMonths(self: InterestExpenseNonOperatingIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InterestExpenseNonOperatingIncomeStatement) -> Decimal



Set: TwelveMonths(self: InterestExpenseNonOperatingIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: InterestExpenseNonOperatingIncomeStatement) -> Decimal



Set: TwoMonths(self: InterestExpenseNonOperatingIncomeStatement) = value

"""

    Store = None


class InterestIncomeAfterProvisionForLoanLossIncomeStatement(MultiPeriodField):
    """
    Net interest and dividend income or expense, including any amortization and accretion (as applicable) of discounts and premiums,

                including consideration of the provisions for loan, lease, credit, and other related losses, if any.



    InterestIncomeAfterProvisionForLoanLossIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InterestIncomeAfterProvisionForLoanLossIncomeStatement) -> Decimal



Set: NineMonths(self: InterestIncomeAfterProvisionForLoanLossIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: InterestIncomeAfterProvisionForLoanLossIncomeStatement) -> Decimal



Set: OneMonth(self: InterestIncomeAfterProvisionForLoanLossIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InterestIncomeAfterProvisionForLoanLossIncomeStatement) -> Decimal



Set: SixMonths(self: InterestIncomeAfterProvisionForLoanLossIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InterestIncomeAfterProvisionForLoanLossIncomeStatement) -> Decimal



Set: ThreeMonths(self: InterestIncomeAfterProvisionForLoanLossIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InterestIncomeAfterProvisionForLoanLossIncomeStatement) -> Decimal



Set: TwelveMonths(self: InterestIncomeAfterProvisionForLoanLossIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: InterestIncomeAfterProvisionForLoanLossIncomeStatement) -> Decimal



Set: TwoMonths(self: InterestIncomeAfterProvisionForLoanLossIncomeStatement) = value

"""

    Store = None


class InterestIncomeFromDepositsIncomeStatement(MultiPeriodField):
    """
    Interest income generated from all deposit accounts. This item is usually only available for bank industry.



    InterestIncomeFromDepositsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InterestIncomeFromDepositsIncomeStatement) -> Decimal



Set: NineMonths(self: InterestIncomeFromDepositsIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: InterestIncomeFromDepositsIncomeStatement) -> Decimal



Set: OneMonth(self: InterestIncomeFromDepositsIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InterestIncomeFromDepositsIncomeStatement) -> Decimal



Set: SixMonths(self: InterestIncomeFromDepositsIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InterestIncomeFromDepositsIncomeStatement) -> Decimal



Set: ThreeMonths(self: InterestIncomeFromDepositsIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InterestIncomeFromDepositsIncomeStatement) -> Decimal



Set: TwelveMonths(self: InterestIncomeFromDepositsIncomeStatement) = value

"""

    Store = None


class InterestIncomeFromFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellIncomeStatement(MultiPeriodField):
    """
    The carrying value of funds outstanding loaned in the form of security resale agreements if the agreement requires the purchaser to

                resell the identical security purchased or a security that meets the definition of ""substantially the same"" in the case of a dollar roll.

                Also includes purchases of participations in pools of securities that are subject to a resale agreement; This category includes all

                interest income generated from federal funds sold and securities purchases under agreements to resell; This category includes all

                interest income generated from federal funds sold and securities purchases under agreements to resell.



    InterestIncomeFromFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InterestIncomeFromFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellIncomeStatement) -> Decimal



Set: NineMonths(self: InterestIncomeFromFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InterestIncomeFromFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellIncomeStatement) -> Decimal



Set: SixMonths(self: InterestIncomeFromFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InterestIncomeFromFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellIncomeStatement) -> Decimal



Set: ThreeMonths(self: InterestIncomeFromFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InterestIncomeFromFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellIncomeStatement) -> Decimal



Set: TwelveMonths(self: InterestIncomeFromFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellIncomeStatement) = value

"""

    Store = None


class InterestIncomeFromLeasesIncomeStatement(MultiPeriodField):
    """
    Includes interest and fee income generated by direct lease financing. This item is usually only available for bank industry.



    InterestIncomeFromLeasesIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InterestIncomeFromLeasesIncomeStatement) -> Decimal



Set: NineMonths(self: InterestIncomeFromLeasesIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: InterestIncomeFromLeasesIncomeStatement) -> Decimal



Set: OneMonth(self: InterestIncomeFromLeasesIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InterestIncomeFromLeasesIncomeStatement) -> Decimal



Set: SixMonths(self: InterestIncomeFromLeasesIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InterestIncomeFromLeasesIncomeStatement) -> Decimal



Set: ThreeMonths(self: InterestIncomeFromLeasesIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InterestIncomeFromLeasesIncomeStatement) -> Decimal



Set: TwelveMonths(self: InterestIncomeFromLeasesIncomeStatement) = value

"""

    Store = None


class InterestIncomeFromLoansAndLeaseIncomeStatement(MultiPeriodField):
    """
    Total interest and fee income generated by loans and lease. This item is usually only available for bank industry.



    InterestIncomeFromLoansAndLeaseIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InterestIncomeFromLoansAndLeaseIncomeStatement) -> Decimal



Set: NineMonths(self: InterestIncomeFromLoansAndLeaseIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: InterestIncomeFromLoansAndLeaseIncomeStatement) -> Decimal



Set: OneMonth(self: InterestIncomeFromLoansAndLeaseIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InterestIncomeFromLoansAndLeaseIncomeStatement) -> Decimal



Set: SixMonths(self: InterestIncomeFromLoansAndLeaseIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InterestIncomeFromLoansAndLeaseIncomeStatement) -> Decimal



Set: ThreeMonths(self: InterestIncomeFromLoansAndLeaseIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InterestIncomeFromLoansAndLeaseIncomeStatement) -> Decimal



Set: TwelveMonths(self: InterestIncomeFromLoansAndLeaseIncomeStatement) = value

"""

    Store = None


class InterestIncomeFromLoansIncomeStatement(MultiPeriodField):
    """
    Loan is a common field to banks. Interest Income from Loans is interest and fee income generated from all loans, which includes

                Commercial loans; Credit loans; Other consumer loans; Real Estate - Construction; Real Estate - Mortgage; Foreign loans. Banks

                earn interest from loans. This item is usually only available for bank industry.



    InterestIncomeFromLoansIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InterestIncomeFromLoansIncomeStatement) -> Decimal



Set: NineMonths(self: InterestIncomeFromLoansIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: InterestIncomeFromLoansIncomeStatement) -> Decimal



Set: OneMonth(self: InterestIncomeFromLoansIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InterestIncomeFromLoansIncomeStatement) -> Decimal



Set: SixMonths(self: InterestIncomeFromLoansIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InterestIncomeFromLoansIncomeStatement) -> Decimal



Set: ThreeMonths(self: InterestIncomeFromLoansIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InterestIncomeFromLoansIncomeStatement) -> Decimal



Set: TwelveMonths(self: InterestIncomeFromLoansIncomeStatement) = value

"""

    Store = None


class InterestIncomeFromSecuritiesIncomeStatement(MultiPeriodField):
    """
    Represents total interest and dividend income from U.S. Treasury securities, U.S. government agency and corporation obligations,

                securities issued by states and political subdivisions, other domestic debt securities, foreign debt securities, and equity securities

                (including investments in mutual funds). Excludes interest income from securities held in trading accounts. This item is usually only

                available for bank industry.



    InterestIncomeFromSecuritiesIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InterestIncomeFromSecuritiesIncomeStatement) -> Decimal



Set: NineMonths(self: InterestIncomeFromSecuritiesIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: InterestIncomeFromSecuritiesIncomeStatement) -> Decimal



Set: OneMonth(self: InterestIncomeFromSecuritiesIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InterestIncomeFromSecuritiesIncomeStatement) -> Decimal



Set: SixMonths(self: InterestIncomeFromSecuritiesIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InterestIncomeFromSecuritiesIncomeStatement) -> Decimal



Set: ThreeMonths(self: InterestIncomeFromSecuritiesIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InterestIncomeFromSecuritiesIncomeStatement) -> Decimal



Set: TwelveMonths(self: InterestIncomeFromSecuritiesIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: InterestIncomeFromSecuritiesIncomeStatement) -> Decimal



Set: TwoMonths(self: InterestIncomeFromSecuritiesIncomeStatement) = value

"""

    Store = None


class InterestIncomeIncomeStatement(MultiPeriodField):
    """
    Income generated from interest-bearing deposits or accounts.



    InterestIncomeIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InterestIncomeIncomeStatement) -> Decimal



Set: NineMonths(self: InterestIncomeIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: InterestIncomeIncomeStatement) -> Decimal



Set: OneMonth(self: InterestIncomeIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InterestIncomeIncomeStatement) -> Decimal



Set: SixMonths(self: InterestIncomeIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InterestIncomeIncomeStatement) -> Decimal



Set: ThreeMonths(self: InterestIncomeIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InterestIncomeIncomeStatement) -> Decimal



Set: TwelveMonths(self: InterestIncomeIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: InterestIncomeIncomeStatement) -> Decimal



Set: TwoMonths(self: InterestIncomeIncomeStatement) = value

"""

    Store = None


class InterestIncomeNonOperatingIncomeStatement(MultiPeriodField):
    """
    Interest income earned from long term financing activities.



    InterestIncomeNonOperatingIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InterestIncomeNonOperatingIncomeStatement) -> Decimal



Set: NineMonths(self: InterestIncomeNonOperatingIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: InterestIncomeNonOperatingIncomeStatement) -> Decimal



Set: OneMonth(self: InterestIncomeNonOperatingIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InterestIncomeNonOperatingIncomeStatement) -> Decimal



Set: SixMonths(self: InterestIncomeNonOperatingIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InterestIncomeNonOperatingIncomeStatement) -> Decimal



Set: ThreeMonths(self: InterestIncomeNonOperatingIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InterestIncomeNonOperatingIncomeStatement) -> Decimal



Set: TwelveMonths(self: InterestIncomeNonOperatingIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: InterestIncomeNonOperatingIncomeStatement) -> Decimal



Set: TwoMonths(self: InterestIncomeNonOperatingIncomeStatement) = value

"""

    Store = None


class InterestPaidCFFCashFlowStatement(MultiPeriodField):
    """
    Interest paid on loans, debt or borrowings, in the Financing Cash Flow section.



    InterestPaidCFFCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InterestPaidCFFCashFlowStatement) -> Decimal



Set: NineMonths(self: InterestPaidCFFCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InterestPaidCFFCashFlowStatement) -> Decimal



Set: SixMonths(self: InterestPaidCFFCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InterestPaidCFFCashFlowStatement) -> Decimal



Set: ThreeMonths(self: InterestPaidCFFCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InterestPaidCFFCashFlowStatement) -> Decimal



Set: TwelveMonths(self: InterestPaidCFFCashFlowStatement) = value

"""

    Store = None


class InterestPaidCFOCashFlowStatement(MultiPeriodField):
    """
    Interest paid on loans, debt or borrowings, in the Operating Cash Flow section.



    InterestPaidCFOCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InterestPaidCFOCashFlowStatement) -> Decimal



Set: NineMonths(self: InterestPaidCFOCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InterestPaidCFOCashFlowStatement) -> Decimal



Set: SixMonths(self: InterestPaidCFOCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InterestPaidCFOCashFlowStatement) -> Decimal



Set: ThreeMonths(self: InterestPaidCFOCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InterestPaidCFOCashFlowStatement) -> Decimal



Set: TwelveMonths(self: InterestPaidCFOCashFlowStatement) = value

"""

    Store = None


class InterestPaidDirectCashFlowStatement(MultiPeriodField):
    """
    Interest paid on loans, debt or borrowings, in the direct cash flow.



    InterestPaidDirectCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InterestPaidDirectCashFlowStatement) -> Decimal



Set: NineMonths(self: InterestPaidDirectCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InterestPaidDirectCashFlowStatement) -> Decimal



Set: SixMonths(self: InterestPaidDirectCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InterestPaidDirectCashFlowStatement) -> Decimal



Set: ThreeMonths(self: InterestPaidDirectCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InterestPaidDirectCashFlowStatement) -> Decimal



Set: TwelveMonths(self: InterestPaidDirectCashFlowStatement) = value

"""

    Store = None


class InterestPaidSupplementalDataCashFlowStatement(MultiPeriodField):
    """
    The amount of cash paid during the current period for interest owed on money borrowed; including amount of interest capitalized.



    InterestPaidSupplementalDataCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InterestPaidSupplementalDataCashFlowStatement) -> Decimal



Set: NineMonths(self: InterestPaidSupplementalDataCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: InterestPaidSupplementalDataCashFlowStatement) -> Decimal



Set: OneMonth(self: InterestPaidSupplementalDataCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InterestPaidSupplementalDataCashFlowStatement) -> Decimal



Set: SixMonths(self: InterestPaidSupplementalDataCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InterestPaidSupplementalDataCashFlowStatement) -> Decimal



Set: ThreeMonths(self: InterestPaidSupplementalDataCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InterestPaidSupplementalDataCashFlowStatement) -> Decimal



Set: TwelveMonths(self: InterestPaidSupplementalDataCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: InterestPaidSupplementalDataCashFlowStatement) -> Decimal



Set: TwoMonths(self: InterestPaidSupplementalDataCashFlowStatement) = value

"""

    Store = None


class InterestPayableBalanceSheet(MultiPeriodField):
    """
    Sum of the carrying values as of the balance sheet date of interest payable on all forms of debt, including trade payable that has

                been incurred.



    InterestPayableBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InterestPayableBalanceSheet) -> Decimal



Set: NineMonths(self: InterestPayableBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: InterestPayableBalanceSheet) -> Decimal



Set: OneMonth(self: InterestPayableBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InterestPayableBalanceSheet) -> Decimal



Set: SixMonths(self: InterestPayableBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InterestPayableBalanceSheet) -> Decimal



Set: ThreeMonths(self: InterestPayableBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InterestPayableBalanceSheet) -> Decimal



Set: TwelveMonths(self: InterestPayableBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: InterestPayableBalanceSheet) -> Decimal



Set: TwoMonths(self: InterestPayableBalanceSheet) = value

"""

    Store = None


class InterestReceivedCFICashFlowStatement(MultiPeriodField):
    """
    Interest received by the company, in the Investing Cash Flow section.



    InterestReceivedCFICashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InterestReceivedCFICashFlowStatement) -> Decimal



Set: NineMonths(self: InterestReceivedCFICashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InterestReceivedCFICashFlowStatement) -> Decimal



Set: SixMonths(self: InterestReceivedCFICashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InterestReceivedCFICashFlowStatement) -> Decimal



Set: ThreeMonths(self: InterestReceivedCFICashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InterestReceivedCFICashFlowStatement) -> Decimal



Set: TwelveMonths(self: InterestReceivedCFICashFlowStatement) = value

"""

    Store = None


class InterestReceivedCFOCashFlowStatement(MultiPeriodField):
    """
    Interest received by the company, in the Operating Cash Flow section.



    InterestReceivedCFOCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InterestReceivedCFOCashFlowStatement) -> Decimal



Set: NineMonths(self: InterestReceivedCFOCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InterestReceivedCFOCashFlowStatement) -> Decimal



Set: SixMonths(self: InterestReceivedCFOCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InterestReceivedCFOCashFlowStatement) -> Decimal



Set: ThreeMonths(self: InterestReceivedCFOCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InterestReceivedCFOCashFlowStatement) -> Decimal



Set: TwelveMonths(self: InterestReceivedCFOCashFlowStatement) = value

"""

    Store = None


class InterestReceivedDirectCashFlowStatement(MultiPeriodField):
    """
    Interest received by the company, in the direct cash flow.



    InterestReceivedDirectCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InterestReceivedDirectCashFlowStatement) -> Decimal



Set: NineMonths(self: InterestReceivedDirectCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InterestReceivedDirectCashFlowStatement) -> Decimal



Set: SixMonths(self: InterestReceivedDirectCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InterestReceivedDirectCashFlowStatement) -> Decimal



Set: ThreeMonths(self: InterestReceivedDirectCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InterestReceivedDirectCashFlowStatement) -> Decimal



Set: TwelveMonths(self: InterestReceivedDirectCashFlowStatement) = value

"""

    Store = None


class InventoriesAdjustmentsAllowancesBalanceSheet(MultiPeriodField):
    """
    This item represents certain charges made in the current period in inventory resulting from such factors as breakage, spoilage,

                employee theft and shoplifting. This item is typically available for manufacturing, mining and utility industries.



    InventoriesAdjustmentsAllowancesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InventoriesAdjustmentsAllowancesBalanceSheet) -> Decimal



Set: NineMonths(self: InventoriesAdjustmentsAllowancesBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InventoriesAdjustmentsAllowancesBalanceSheet) -> Decimal



Set: SixMonths(self: InventoriesAdjustmentsAllowancesBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InventoriesAdjustmentsAllowancesBalanceSheet) -> Decimal



Set: ThreeMonths(self: InventoriesAdjustmentsAllowancesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InventoriesAdjustmentsAllowancesBalanceSheet) -> Decimal



Set: TwelveMonths(self: InventoriesAdjustmentsAllowancesBalanceSheet) = value

"""

    Store = None


class InventoryBalanceSheet(MultiPeriodField):
    """
    A company's merchandise, raw materials, and finished and unfinished products which have not yet been sold.



    InventoryBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InventoryBalanceSheet) -> Decimal



Set: NineMonths(self: InventoryBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: InventoryBalanceSheet) -> Decimal



Set: OneMonth(self: InventoryBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InventoryBalanceSheet) -> Decimal



Set: SixMonths(self: InventoryBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InventoryBalanceSheet) -> Decimal



Set: ThreeMonths(self: InventoryBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InventoryBalanceSheet) -> Decimal



Set: TwelveMonths(self: InventoryBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: InventoryBalanceSheet) -> Decimal



Set: TwoMonths(self: InventoryBalanceSheet) = value

"""

    Store = None


class InventoryTurnover(MultiPeriodField):
    """
    Cost Of Goods Sold / Average Inventory



    InventoryTurnover(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: InventoryTurnover) -> Decimal



Set: OneYear(self: InventoryTurnover) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InventoryTurnover) -> Decimal



Set: SixMonths(self: InventoryTurnover) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InventoryTurnover) -> Decimal



Set: ThreeMonths(self: InventoryTurnover) = value

"""

    Store = None


class InvestedCapitalBalanceSheet(MultiPeriodField):
    """
    Invested capital = common shareholders' equity + long term debt + current debt



    InvestedCapitalBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InvestedCapitalBalanceSheet) -> Decimal



Set: NineMonths(self: InvestedCapitalBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: InvestedCapitalBalanceSheet) -> Decimal



Set: OneMonth(self: InvestedCapitalBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InvestedCapitalBalanceSheet) -> Decimal



Set: SixMonths(self: InvestedCapitalBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InvestedCapitalBalanceSheet) -> Decimal



Set: ThreeMonths(self: InvestedCapitalBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InvestedCapitalBalanceSheet) -> Decimal



Set: TwelveMonths(self: InvestedCapitalBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: InvestedCapitalBalanceSheet) -> Decimal



Set: TwoMonths(self: InvestedCapitalBalanceSheet) = value

"""

    Store = None


class InvestingCashFlowCashFlowStatement(MultiPeriodField):
    """
    An item on the cash flow statement that reports the aggregate change in a company's cash position resulting from any gains (or

                losses) from investments in the financial markets and operating subsidiaries, and changes resulting from amounts spent on

                investments in capital assets such as plant and equipment.



    InvestingCashFlowCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InvestingCashFlowCashFlowStatement) -> Decimal



Set: NineMonths(self: InvestingCashFlowCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: InvestingCashFlowCashFlowStatement) -> Decimal



Set: OneMonth(self: InvestingCashFlowCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InvestingCashFlowCashFlowStatement) -> Decimal



Set: SixMonths(self: InvestingCashFlowCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InvestingCashFlowCashFlowStatement) -> Decimal



Set: ThreeMonths(self: InvestingCashFlowCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InvestingCashFlowCashFlowStatement) -> Decimal



Set: TwelveMonths(self: InvestingCashFlowCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: InvestingCashFlowCashFlowStatement) -> Decimal



Set: TwoMonths(self: InvestingCashFlowCashFlowStatement) = value

"""

    Store = None


class InvestmentBankingProfitIncomeStatement(MultiPeriodField):
    """
    Includes (1) underwriting revenue (the spread between the resale price received and the cost of the securities and related

                expenses) generated through the purchasing, distributing and reselling of new issues of securities (alternatively, could be a

                secondary offering of a large block of previously issued securities); and (2) fees earned for mergers, acquisitions, divestitures,

                restructurings, and other types of financial advisory services. This item is usually only available for bank industry.



    InvestmentBankingProfitIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InvestmentBankingProfitIncomeStatement) -> Decimal



Set: NineMonths(self: InvestmentBankingProfitIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InvestmentBankingProfitIncomeStatement) -> Decimal



Set: SixMonths(self: InvestmentBankingProfitIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InvestmentBankingProfitIncomeStatement) -> Decimal



Set: ThreeMonths(self: InvestmentBankingProfitIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InvestmentBankingProfitIncomeStatement) -> Decimal



Set: TwelveMonths(self: InvestmentBankingProfitIncomeStatement) = value

"""

    Store = None


class InvestmentContractLiabilitiesBalanceSheet(MultiPeriodField):
    """
    Liabilities due on the insurance investment contract.



    InvestmentContractLiabilitiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InvestmentContractLiabilitiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: InvestmentContractLiabilitiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InvestmentContractLiabilitiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: InvestmentContractLiabilitiesBalanceSheet) = value

"""

    Store = None


class InvestmentContractLiabilitiesIncurredIncomeStatement(MultiPeriodField):
    """
    Income/Expenses due to the insurer's liabilities incurred in Investment Contracts.



    InvestmentContractLiabilitiesIncurredIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InvestmentContractLiabilitiesIncurredIncomeStatement) -> Decimal



Set: NineMonths(self: InvestmentContractLiabilitiesIncurredIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InvestmentContractLiabilitiesIncurredIncomeStatement) -> Decimal



Set: SixMonths(self: InvestmentContractLiabilitiesIncurredIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InvestmentContractLiabilitiesIncurredIncomeStatement) -> Decimal



Set: ThreeMonths(self: InvestmentContractLiabilitiesIncurredIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InvestmentContractLiabilitiesIncurredIncomeStatement) -> Decimal



Set: TwelveMonths(self: InvestmentContractLiabilitiesIncurredIncomeStatement) = value

"""

    Store = None


class InvestmentinFinancialAssetsBalanceSheet(MultiPeriodField):
    """
    Represents the sum of all financial investments (trading securities, available-for-sale securities, held-to-maturity securities, etc.)



    InvestmentinFinancialAssetsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InvestmentinFinancialAssetsBalanceSheet) -> Decimal



Set: ThreeMonths(self: InvestmentinFinancialAssetsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InvestmentinFinancialAssetsBalanceSheet) -> Decimal



Set: TwelveMonths(self: InvestmentinFinancialAssetsBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: InvestmentinFinancialAssetsBalanceSheet) -> Decimal



Set: TwoMonths(self: InvestmentinFinancialAssetsBalanceSheet) = value

"""

    Store = None


class InvestmentPropertiesBalanceSheet(MultiPeriodField):
    """
    Company's investments in properties net of accumulated depreciation, which generate a return.



    InvestmentPropertiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InvestmentPropertiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: InvestmentPropertiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InvestmentPropertiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: InvestmentPropertiesBalanceSheet) = value

"""

    Store = None


class InvestmentsAndAdvancesBalanceSheet(MultiPeriodField):
    """
    All investments in affiliates, real estate, securities, etc. Non-current investment, not including marketable securities.



    InvestmentsAndAdvancesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: InvestmentsAndAdvancesBalanceSheet) -> Decimal



Set: NineMonths(self: InvestmentsAndAdvancesBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: InvestmentsAndAdvancesBalanceSheet) -> Decimal



Set: OneMonth(self: InvestmentsAndAdvancesBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: InvestmentsAndAdvancesBalanceSheet) -> Decimal



Set: SixMonths(self: InvestmentsAndAdvancesBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InvestmentsAndAdvancesBalanceSheet) -> Decimal



Set: ThreeMonths(self: InvestmentsAndAdvancesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InvestmentsAndAdvancesBalanceSheet) -> Decimal



Set: TwelveMonths(self: InvestmentsAndAdvancesBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: InvestmentsAndAdvancesBalanceSheet) -> Decimal



Set: TwoMonths(self: InvestmentsAndAdvancesBalanceSheet) = value

"""

    Store = None


class InvestmentsinAssociatesatCostBalanceSheet(MultiPeriodField):
    """
    A stake in any company which is more than 20% but less than 50%.



    InvestmentsinAssociatesatCostBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InvestmentsinAssociatesatCostBalanceSheet) -> Decimal



Set: ThreeMonths(self: InvestmentsinAssociatesatCostBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InvestmentsinAssociatesatCostBalanceSheet) -> Decimal



Set: TwelveMonths(self: InvestmentsinAssociatesatCostBalanceSheet) = value

"""

    Store = None


class InvestmentsinJointVenturesatCostBalanceSheet(MultiPeriodField):
    """
    A 50% stake in any company in which remaining 50% belongs to other company.



    InvestmentsinJointVenturesatCostBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InvestmentsinJointVenturesatCostBalanceSheet) -> Decimal



Set: ThreeMonths(self: InvestmentsinJointVenturesatCostBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InvestmentsinJointVenturesatCostBalanceSheet) -> Decimal



Set: TwelveMonths(self: InvestmentsinJointVenturesatCostBalanceSheet) = value

"""

    Store = None


class InvestmentsInOtherVenturesUnderEquityMethodBalanceSheet(MultiPeriodField):
    """
    This item represents the carrying amount on the company's balance sheet of its investments in common stock of an equity method.

                This item is typically available for the insurance industry.



    InvestmentsInOtherVenturesUnderEquityMethodBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InvestmentsInOtherVenturesUnderEquityMethodBalanceSheet) -> Decimal



Set: ThreeMonths(self: InvestmentsInOtherVenturesUnderEquityMethodBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InvestmentsInOtherVenturesUnderEquityMethodBalanceSheet) -> Decimal



Set: TwelveMonths(self: InvestmentsInOtherVenturesUnderEquityMethodBalanceSheet) = value

"""

    Store = None


class InvestmentsinSubsidiariesatCostBalanceSheet(MultiPeriodField):
    """
    A stake in any company which is more than 51%.



    InvestmentsinSubsidiariesatCostBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: InvestmentsinSubsidiariesatCostBalanceSheet) -> Decimal



Set: ThreeMonths(self: InvestmentsinSubsidiariesatCostBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: InvestmentsinSubsidiariesatCostBalanceSheet) -> Decimal



Set: TwelveMonths(self: InvestmentsinSubsidiariesatCostBalanceSheet) = value

"""

    Store = None


class IssuanceOfCapitalStockCashFlowStatement(MultiPeriodField):
    """
    The cash inflow from offering common stock, which is the additional capital contribution to the entity during the PeriodAsByte.



    IssuanceOfCapitalStockCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: IssuanceOfCapitalStockCashFlowStatement) -> Decimal



Set: NineMonths(self: IssuanceOfCapitalStockCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: IssuanceOfCapitalStockCashFlowStatement) -> Decimal



Set: OneMonth(self: IssuanceOfCapitalStockCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: IssuanceOfCapitalStockCashFlowStatement) -> Decimal



Set: SixMonths(self: IssuanceOfCapitalStockCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: IssuanceOfCapitalStockCashFlowStatement) -> Decimal



Set: ThreeMonths(self: IssuanceOfCapitalStockCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: IssuanceOfCapitalStockCashFlowStatement) -> Decimal



Set: TwelveMonths(self: IssuanceOfCapitalStockCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: IssuanceOfCapitalStockCashFlowStatement) -> Decimal



Set: TwoMonths(self: IssuanceOfCapitalStockCashFlowStatement) = value

"""

    Store = None


class IssuanceOfDebtCashFlowStatement(MultiPeriodField):
    """
    The cash inflow due to an increase in long term debt.



    IssuanceOfDebtCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: IssuanceOfDebtCashFlowStatement) -> Decimal



Set: NineMonths(self: IssuanceOfDebtCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: IssuanceOfDebtCashFlowStatement) -> Decimal



Set: OneMonth(self: IssuanceOfDebtCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: IssuanceOfDebtCashFlowStatement) -> Decimal



Set: SixMonths(self: IssuanceOfDebtCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: IssuanceOfDebtCashFlowStatement) -> Decimal



Set: ThreeMonths(self: IssuanceOfDebtCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: IssuanceOfDebtCashFlowStatement) -> Decimal



Set: TwelveMonths(self: IssuanceOfDebtCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: IssuanceOfDebtCashFlowStatement) -> Decimal



Set: TwoMonths(self: IssuanceOfDebtCashFlowStatement) = value

"""

    Store = None


class IssueExpensesCashFlowStatement(MultiPeriodField):
    """
    Cost associated with issuance of debt/equity capital in the Financing Cash Flow section.



    IssueExpensesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: IssueExpensesCashFlowStatement) -> Decimal



Set: NineMonths(self: IssueExpensesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: IssueExpensesCashFlowStatement) -> Decimal



Set: SixMonths(self: IssueExpensesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: IssueExpensesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: IssueExpensesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: IssueExpensesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: IssueExpensesCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: IssueExpensesCashFlowStatement) -> Decimal



Set: TwoMonths(self: IssueExpensesCashFlowStatement) = value

"""

    Store = None


class ItemsinTheCourseofTransmissiontoOtherBanksBalanceSheet(MultiPeriodField):
    """
    Carrying amount as of the balance sheet date of drafts and bills of exchange that have been accepted by the reporting bank or by

                others for its own account, as its liability to holders of the drafts.



    ItemsinTheCourseofTransmissiontoOtherBanksBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ItemsinTheCourseofTransmissiontoOtherBanksBalanceSheet) -> Decimal



Set: ThreeMonths(self: ItemsinTheCourseofTransmissiontoOtherBanksBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ItemsinTheCourseofTransmissiontoOtherBanksBalanceSheet) -> Decimal



Set: TwelveMonths(self: ItemsinTheCourseofTransmissiontoOtherBanksBalanceSheet) = value

"""

    Store = None


class LandAndImprovementsBalanceSheet(MultiPeriodField):
    """
    Fixed Assets that specifically deal with land a company owns. Includes the improvements associated with land. This excludes land

                held for sale.



    LandAndImprovementsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: LandAndImprovementsBalanceSheet) -> Decimal



Set: NineMonths(self: LandAndImprovementsBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: LandAndImprovementsBalanceSheet) -> Decimal



Set: OneMonth(self: LandAndImprovementsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: LandAndImprovementsBalanceSheet) -> Decimal



Set: SixMonths(self: LandAndImprovementsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: LandAndImprovementsBalanceSheet) -> Decimal



Set: ThreeMonths(self: LandAndImprovementsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: LandAndImprovementsBalanceSheet) -> Decimal



Set: TwelveMonths(self: LandAndImprovementsBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: LandAndImprovementsBalanceSheet) -> Decimal



Set: TwoMonths(self: LandAndImprovementsBalanceSheet) = value

"""

    Store = None


class LeasesBalanceSheet(MultiPeriodField):
    """
    Carrying amount at the balance sheet date of a long-lived, depreciable asset that is an addition or improvement to assets held

                under lease arrangement. This item is usually not available for the insurance industry.



    LeasesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: LeasesBalanceSheet) -> Decimal



Set: NineMonths(self: LeasesBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: LeasesBalanceSheet) -> Decimal



Set: OneMonth(self: LeasesBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: LeasesBalanceSheet) -> Decimal



Set: SixMonths(self: LeasesBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: LeasesBalanceSheet) -> Decimal



Set: ThreeMonths(self: LeasesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: LeasesBalanceSheet) -> Decimal



Set: TwelveMonths(self: LeasesBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: LeasesBalanceSheet) -> Decimal



Set: TwoMonths(self: LeasesBalanceSheet) = value

"""

    Store = None


class LiabilitiesHeldforSaleCurrentBalanceSheet(MultiPeriodField):
    """
    Liabilities due within the next 12 months related from an asset classified as Held for Sale.



    LiabilitiesHeldforSaleCurrentBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: LiabilitiesHeldforSaleCurrentBalanceSheet) -> Decimal



Set: ThreeMonths(self: LiabilitiesHeldforSaleCurrentBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: LiabilitiesHeldforSaleCurrentBalanceSheet) -> Decimal



Set: TwelveMonths(self: LiabilitiesHeldforSaleCurrentBalanceSheet) = value

"""

    Store = None


class LiabilitiesHeldforSaleNonCurrentBalanceSheet(MultiPeriodField):
    """
    Liabilities related to an asset classified as held for sale excluding the portion due the next 12 months or operating cycle.



    LiabilitiesHeldforSaleNonCurrentBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: LiabilitiesHeldforSaleNonCurrentBalanceSheet) -> Decimal



Set: ThreeMonths(self: LiabilitiesHeldforSaleNonCurrentBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: LiabilitiesHeldforSaleNonCurrentBalanceSheet) -> Decimal



Set: TwelveMonths(self: LiabilitiesHeldforSaleNonCurrentBalanceSheet) = value

"""

    Store = None


class LiabilitiesHeldforSaleTotalBalanceSheet(MultiPeriodField):
    """
    Liabilities related to an asset classified as held for sale.



    LiabilitiesHeldforSaleTotalBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: LiabilitiesHeldforSaleTotalBalanceSheet) -> Decimal



Set: ThreeMonths(self: LiabilitiesHeldforSaleTotalBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: LiabilitiesHeldforSaleTotalBalanceSheet) -> Decimal



Set: TwelveMonths(self: LiabilitiesHeldforSaleTotalBalanceSheet) = value

"""

    Store = None


class LiabilitiesOfDiscontinuedOperationsBalanceSheet(MultiPeriodField):
    """
    The obligations arising from the sale, disposal, or planned sale in the near future (generally within one year) of a disposal group,

                including a component of the entity (discontinued operation). This item is typically available for bank industry.



    LiabilitiesOfDiscontinuedOperationsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: LiabilitiesOfDiscontinuedOperationsBalanceSheet) -> Decimal



Set: ThreeMonths(self: LiabilitiesOfDiscontinuedOperationsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: LiabilitiesOfDiscontinuedOperationsBalanceSheet) -> Decimal



Set: TwelveMonths(self: LiabilitiesOfDiscontinuedOperationsBalanceSheet) = value

"""

    Store = None


class LimitedPartnershipCapitalBalanceSheet(MultiPeriodField):
    """
    In a limited partnership or master limited partnership form of business, this represents the balance of capital held by the limited

                partners.



    LimitedPartnershipCapitalBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: LimitedPartnershipCapitalBalanceSheet) -> Decimal



Set: SixMonths(self: LimitedPartnershipCapitalBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: LimitedPartnershipCapitalBalanceSheet) -> Decimal



Set: ThreeMonths(self: LimitedPartnershipCapitalBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: LimitedPartnershipCapitalBalanceSheet) -> Decimal



Set: TwelveMonths(self: LimitedPartnershipCapitalBalanceSheet) = value

"""

    Store = None


class LineOfCreditBalanceSheet(MultiPeriodField):
    """
    The carrying value as of the balance sheet date of obligations drawn from a line of credit, which is a bank's commitment to make

                loans up to a specific amount.



    LineOfCreditBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: LineOfCreditBalanceSheet) -> Decimal



Set: NineMonths(self: LineOfCreditBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: LineOfCreditBalanceSheet) -> Decimal



Set: OneMonth(self: LineOfCreditBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: LineOfCreditBalanceSheet) -> Decimal



Set: ThreeMonths(self: LineOfCreditBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: LineOfCreditBalanceSheet) -> Decimal



Set: TwelveMonths(self: LineOfCreditBalanceSheet) = value

"""

    Store = None


class LoansandAdvancestoBankBalanceSheet(MultiPeriodField):
    """
    The aggregate amount of loans and advances made to a bank or financial institution.



    LoansandAdvancestoBankBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: LoansandAdvancestoBankBalanceSheet) -> Decimal



Set: ThreeMonths(self: LoansandAdvancestoBankBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: LoansandAdvancestoBankBalanceSheet) -> Decimal



Set: TwelveMonths(self: LoansandAdvancestoBankBalanceSheet) = value

"""

    Store = None


class LoansandAdvancestoCustomerBalanceSheet(MultiPeriodField):
    """
    The aggregate amount of loans and advances made to customers.



    LoansandAdvancestoCustomerBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: LoansandAdvancestoCustomerBalanceSheet) -> Decimal



Set: ThreeMonths(self: LoansandAdvancestoCustomerBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: LoansandAdvancestoCustomerBalanceSheet) -> Decimal



Set: TwelveMonths(self: LoansandAdvancestoCustomerBalanceSheet) = value

"""

    Store = None


class LoansHeldForSaleBalanceSheet(MultiPeriodField):
    """
    It means the aggregate amount of loans receivable that will be sold to other entities.  This item is typically available for bank

                industry.



    LoansHeldForSaleBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: LoansHeldForSaleBalanceSheet) -> Decimal



Set: NineMonths(self: LoansHeldForSaleBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: LoansHeldForSaleBalanceSheet) -> Decimal



Set: SixMonths(self: LoansHeldForSaleBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: LoansHeldForSaleBalanceSheet) -> Decimal



Set: ThreeMonths(self: LoansHeldForSaleBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: LoansHeldForSaleBalanceSheet) -> Decimal



Set: TwelveMonths(self: LoansHeldForSaleBalanceSheet) = value

"""

    Store = None


class LoansReceivableBalanceSheet(MultiPeriodField):
    """
    Reflects the carrying amount of unpaid loans issued to other institutions for cash needs or an asset purchase.



    LoansReceivableBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: LoansReceivableBalanceSheet) -> Decimal



Set: NineMonths(self: LoansReceivableBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: LoansReceivableBalanceSheet) -> Decimal



Set: SixMonths(self: LoansReceivableBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: LoansReceivableBalanceSheet) -> Decimal



Set: ThreeMonths(self: LoansReceivableBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: LoansReceivableBalanceSheet) -> Decimal



Set: TwelveMonths(self: LoansReceivableBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: LoansReceivableBalanceSheet) -> Decimal



Set: TwoMonths(self: LoansReceivableBalanceSheet) = value

"""

    Store = None


class LongTermCapitalLeaseObligationBalanceSheet(MultiPeriodField):
    """
    Represents the total liability for long-term leases lasting over one year. Amount equal to the present value (the principal) at the

                beginning of the lease term less lease payments during the lease term.



    LongTermCapitalLeaseObligationBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: LongTermCapitalLeaseObligationBalanceSheet) -> Decimal



Set: NineMonths(self: LongTermCapitalLeaseObligationBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: LongTermCapitalLeaseObligationBalanceSheet) -> Decimal



Set: OneMonth(self: LongTermCapitalLeaseObligationBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: LongTermCapitalLeaseObligationBalanceSheet) -> Decimal



Set: SixMonths(self: LongTermCapitalLeaseObligationBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: LongTermCapitalLeaseObligationBalanceSheet) -> Decimal



Set: ThreeMonths(self: LongTermCapitalLeaseObligationBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: LongTermCapitalLeaseObligationBalanceSheet) -> Decimal



Set: TwelveMonths(self: LongTermCapitalLeaseObligationBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: LongTermCapitalLeaseObligationBalanceSheet) -> Decimal



Set: TwoMonths(self: LongTermCapitalLeaseObligationBalanceSheet) = value

"""

    Store = None


class LongTermDebtAndCapitalLeaseObligationBalanceSheet(MultiPeriodField):
    """
    All borrowings lasting over one year including long-term debt and long-term portion of capital lease obligations.



    LongTermDebtAndCapitalLeaseObligationBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: LongTermDebtAndCapitalLeaseObligationBalanceSheet) -> Decimal



Set: NineMonths(self: LongTermDebtAndCapitalLeaseObligationBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: LongTermDebtAndCapitalLeaseObligationBalanceSheet) -> Decimal



Set: OneMonth(self: LongTermDebtAndCapitalLeaseObligationBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: LongTermDebtAndCapitalLeaseObligationBalanceSheet) -> Decimal



Set: SixMonths(self: LongTermDebtAndCapitalLeaseObligationBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: LongTermDebtAndCapitalLeaseObligationBalanceSheet) -> Decimal



Set: ThreeMonths(self: LongTermDebtAndCapitalLeaseObligationBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: LongTermDebtAndCapitalLeaseObligationBalanceSheet) -> Decimal



Set: TwelveMonths(self: LongTermDebtAndCapitalLeaseObligationBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: LongTermDebtAndCapitalLeaseObligationBalanceSheet) -> Decimal



Set: TwoMonths(self: LongTermDebtAndCapitalLeaseObligationBalanceSheet) = value

"""

    Store = None


class LongTermDebtBalanceSheet(MultiPeriodField):
    """
    Sum of the carrying values as of the balance sheet date of all long-term debt, which is debt initially having maturities due after one

                year or beyond the operating cycle, if longer, but excluding the portions thereof scheduled to be repaid within one year or the

                normal operating cycle, if longer. Long-term debt includes notes payable, bonds payable, mortgage loans, convertible debt,

                subordinated debt and other types of long term debt.



    LongTermDebtBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: LongTermDebtBalanceSheet) -> Decimal



Set: NineMonths(self: LongTermDebtBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: LongTermDebtBalanceSheet) -> Decimal



Set: OneMonth(self: LongTermDebtBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: LongTermDebtBalanceSheet) -> Decimal



Set: SixMonths(self: LongTermDebtBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: LongTermDebtBalanceSheet) -> Decimal



Set: ThreeMonths(self: LongTermDebtBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: LongTermDebtBalanceSheet) -> Decimal



Set: TwelveMonths(self: LongTermDebtBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: LongTermDebtBalanceSheet) -> Decimal



Set: TwoMonths(self: LongTermDebtBalanceSheet) = value

"""

    Store = None


class LongTermDebtEquityRatio(MultiPeriodField):
    """
    Refers to the ratio of Long Term Debt to Common Equity. Morningstar calculates the ratio by using the underlying data reported in

                the Balance Sheet within the company filings or reports:    Long-Term Debt And Capital Lease Obligation / Common Equity.

                [Note: Common Equity = Total Shareholder's Equity - Preferred Stock]



    LongTermDebtEquityRatio(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: LongTermDebtEquityRatio) -> Decimal



Set: NineMonths(self: LongTermDebtEquityRatio) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: LongTermDebtEquityRatio) -> Decimal



Set: OneMonth(self: LongTermDebtEquityRatio) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: LongTermDebtEquityRatio) -> Decimal



Set: OneYear(self: LongTermDebtEquityRatio) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: LongTermDebtEquityRatio) -> Decimal



Set: SixMonths(self: LongTermDebtEquityRatio) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: LongTermDebtEquityRatio) -> Decimal



Set: ThreeMonths(self: LongTermDebtEquityRatio) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: LongTermDebtEquityRatio) -> Decimal



Set: TwoMonths(self: LongTermDebtEquityRatio) = value

"""

    Store = None


class LongTermDebtIssuanceCashFlowStatement(MultiPeriodField):
    """
    The cash inflow from a debt initially having maturity due after one year or beyond the operating cycle, if longer.



    LongTermDebtIssuanceCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: LongTermDebtIssuanceCashFlowStatement) -> Decimal



Set: NineMonths(self: LongTermDebtIssuanceCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: LongTermDebtIssuanceCashFlowStatement) -> Decimal



Set: OneMonth(self: LongTermDebtIssuanceCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: LongTermDebtIssuanceCashFlowStatement) -> Decimal



Set: SixMonths(self: LongTermDebtIssuanceCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: LongTermDebtIssuanceCashFlowStatement) -> Decimal



Set: ThreeMonths(self: LongTermDebtIssuanceCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: LongTermDebtIssuanceCashFlowStatement) -> Decimal



Set: TwelveMonths(self: LongTermDebtIssuanceCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: LongTermDebtIssuanceCashFlowStatement) -> Decimal



Set: TwoMonths(self: LongTermDebtIssuanceCashFlowStatement) = value

"""

    Store = None


class LongTermDebtPaymentsCashFlowStatement(MultiPeriodField):
    """
    The cash outflow for debt initially having maturity due after one year or beyond the normal operating cycle, if longer.



    LongTermDebtPaymentsCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: LongTermDebtPaymentsCashFlowStatement) -> Decimal



Set: NineMonths(self: LongTermDebtPaymentsCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: LongTermDebtPaymentsCashFlowStatement) -> Decimal



Set: OneMonth(self: LongTermDebtPaymentsCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: LongTermDebtPaymentsCashFlowStatement) -> Decimal



Set: SixMonths(self: LongTermDebtPaymentsCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: LongTermDebtPaymentsCashFlowStatement) -> Decimal



Set: ThreeMonths(self: LongTermDebtPaymentsCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: LongTermDebtPaymentsCashFlowStatement) -> Decimal



Set: TwelveMonths(self: LongTermDebtPaymentsCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: LongTermDebtPaymentsCashFlowStatement) -> Decimal



Set: TwoMonths(self: LongTermDebtPaymentsCashFlowStatement) = value

"""

    Store = None


class LongTermDebtTotalCapitalRatio(MultiPeriodField):
    """
    Refers to the ratio of Long Term Debt to Total Capital. Morningstar calculates the ratio by using the underlying data reported in the

                Balance Sheet within the company filings or reports:    Long-Term Debt And Capital Lease Obligation / (Long-Term Debt And Capital

                Lease Obligation + Total Shareholder's Equity)



    LongTermDebtTotalCapitalRatio(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: LongTermDebtTotalCapitalRatio) -> Decimal



Set: NineMonths(self: LongTermDebtTotalCapitalRatio) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: LongTermDebtTotalCapitalRatio) -> Decimal



Set: OneMonth(self: LongTermDebtTotalCapitalRatio) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: LongTermDebtTotalCapitalRatio) -> Decimal



Set: OneYear(self: LongTermDebtTotalCapitalRatio) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: LongTermDebtTotalCapitalRatio) -> Decimal



Set: SixMonths(self: LongTermDebtTotalCapitalRatio) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: LongTermDebtTotalCapitalRatio) -> Decimal



Set: ThreeMonths(self: LongTermDebtTotalCapitalRatio) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: LongTermDebtTotalCapitalRatio) -> Decimal



Set: TwoMonths(self: LongTermDebtTotalCapitalRatio) = value

"""

    Store = None


class LongTermInvestmentsBalanceSheet(MultiPeriodField):
    """
    Often referred to simply as "investments". Long-term investments are to be held for many years and are not intended to be

                disposed in the near future. This group usually consists of four types of investments.



    LongTermInvestmentsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: LongTermInvestmentsBalanceSheet) -> Decimal



Set: SixMonths(self: LongTermInvestmentsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: LongTermInvestmentsBalanceSheet) -> Decimal



Set: ThreeMonths(self: LongTermInvestmentsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: LongTermInvestmentsBalanceSheet) -> Decimal



Set: TwelveMonths(self: LongTermInvestmentsBalanceSheet) = value

"""

    Store = None


class LongTermProvisionsBalanceSheet(MultiPeriodField):
    """
    Provisions are created to protect the interests of one or both parties named in a contract or legal document which is a preparatory

                action or measure. Long-term provision is expired beyond one accounting PeriodAsByte.



    LongTermProvisionsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: LongTermProvisionsBalanceSheet) -> Decimal



Set: NineMonths(self: LongTermProvisionsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: LongTermProvisionsBalanceSheet) -> Decimal



Set: SixMonths(self: LongTermProvisionsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: LongTermProvisionsBalanceSheet) -> Decimal



Set: ThreeMonths(self: LongTermProvisionsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: LongTermProvisionsBalanceSheet) -> Decimal



Set: TwelveMonths(self: LongTermProvisionsBalanceSheet) = value

"""

    Store = None


class LossAdjustmentExpenseIncomeStatement(MultiPeriodField):
    """
    Losses generally refer to (1) the amount of reduction in the value of an insured's property caused by an insured peril, (2) the amount

                sought through an insured's claim, or (3) the amount paid on behalf of an insured under an insurance contract.  Loss Adjustment

                Expenses is expenses incurred in the course of investigating and settling claims that includes any legal and adjusters' fees and the

                costs of paying claims and all related expenses.



    LossAdjustmentExpenseIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: LossAdjustmentExpenseIncomeStatement) -> Decimal



Set: NineMonths(self: LossAdjustmentExpenseIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: LossAdjustmentExpenseIncomeStatement) -> Decimal



Set: SixMonths(self: LossAdjustmentExpenseIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: LossAdjustmentExpenseIncomeStatement) -> Decimal



Set: ThreeMonths(self: LossAdjustmentExpenseIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: LossAdjustmentExpenseIncomeStatement) -> Decimal



Set: TwelveMonths(self: LossAdjustmentExpenseIncomeStatement) = value

"""

    Store = None


class LossonExtinguishmentofDebtIncomeStatement(MultiPeriodField):
    """
    Loss on extinguishment of debt is the accounting loss that results from a debt extinguishment. A debt shall be accounted for as

                having been extinguished in a number of circumstances, including when it has been settled through repayment or replacement by

                another liability. It generally results in an accounting gain or loss. Amount represents the difference between the fair value of the

                payments made and the carrying amount of the debt at the time of its extinguishment.



    LossonExtinguishmentofDebtIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: LossonExtinguishmentofDebtIncomeStatement) -> Decimal



Set: NineMonths(self: LossonExtinguishmentofDebtIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: LossonExtinguishmentofDebtIncomeStatement) -> Decimal



Set: SixMonths(self: LossonExtinguishmentofDebtIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: LossonExtinguishmentofDebtIncomeStatement) -> Decimal



Set: ThreeMonths(self: LossonExtinguishmentofDebtIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: LossonExtinguishmentofDebtIncomeStatement) -> Decimal



Set: TwelveMonths(self: LossonExtinguishmentofDebtIncomeStatement) = value

"""

    Store = None


class LossRatio(MultiPeriodField):
    """
    A measure of operating performance for Insurance companies, as it shows the relationship between the premiums earned and the

                expenses related to claims. A number of 1 or lower is preferred, as this means the premiums exceed the expenses. Calculated as:

                Benefits, Claims and Loss Adjustment Expense, Net / Net Premiums Earned



    LossRatio(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: LossRatio) -> Decimal



Set: OneYear(self: LossRatio) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: LossRatio) -> Decimal



Set: ThreeMonths(self: LossRatio) = value

"""

    Store = None


class MachineryFurnitureEquipmentBalanceSheet(MultiPeriodField):
    """
    Fixed assets specifically dealing with tools, equipment and office furniture. This item is usually not available for the insurance and

                utility industries.



    MachineryFurnitureEquipmentBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: MachineryFurnitureEquipmentBalanceSheet) -> Decimal



Set: NineMonths(self: MachineryFurnitureEquipmentBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: MachineryFurnitureEquipmentBalanceSheet) -> Decimal



Set: OneMonth(self: MachineryFurnitureEquipmentBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: MachineryFurnitureEquipmentBalanceSheet) -> Decimal



Set: SixMonths(self: MachineryFurnitureEquipmentBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: MachineryFurnitureEquipmentBalanceSheet) -> Decimal



Set: ThreeMonths(self: MachineryFurnitureEquipmentBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: MachineryFurnitureEquipmentBalanceSheet) -> Decimal



Set: TwelveMonths(self: MachineryFurnitureEquipmentBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: MachineryFurnitureEquipmentBalanceSheet) -> Decimal



Set: TwoMonths(self: MachineryFurnitureEquipmentBalanceSheet) = value

"""

    Store = None


class MaintenanceAndRepairsIncomeStatement(MultiPeriodField):
    """
    The aggregate amount of maintenance and repair expenses in the current period associated with the revenue generation. Mainly

                for fixed assets. This item is usually only available for transportation industry.



    MaintenanceAndRepairsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: MaintenanceAndRepairsIncomeStatement) -> Decimal



Set: NineMonths(self: MaintenanceAndRepairsIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: MaintenanceAndRepairsIncomeStatement) -> Decimal



Set: OneMonth(self: MaintenanceAndRepairsIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: MaintenanceAndRepairsIncomeStatement) -> Decimal



Set: SixMonths(self: MaintenanceAndRepairsIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: MaintenanceAndRepairsIncomeStatement) -> Decimal



Set: ThreeMonths(self: MaintenanceAndRepairsIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: MaintenanceAndRepairsIncomeStatement) -> Decimal



Set: TwelveMonths(self: MaintenanceAndRepairsIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: MaintenanceAndRepairsIncomeStatement) -> Decimal



Set: TwoMonths(self: MaintenanceAndRepairsIncomeStatement) = value

"""

    Store = None


class MaterialsAndSuppliesBalanceSheet(MultiPeriodField):
    """
    Aggregated amount of unprocessed materials to be used in manufacturing or production process and supplies that will be

                consumed. This item is typically available for the utility industry.



    MaterialsAndSuppliesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: MaterialsAndSuppliesBalanceSheet) -> Decimal



Set: ThreeMonths(self: MaterialsAndSuppliesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: MaterialsAndSuppliesBalanceSheet) -> Decimal



Set: TwelveMonths(self: MaterialsAndSuppliesBalanceSheet) = value

"""

    Store = None


class MineralPropertiesBalanceSheet(MultiPeriodField):
    """
    A fixed asset that represents strictly mineral type properties.  This item is typically available for mining industry.



    MineralPropertiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: MineralPropertiesBalanceSheet) -> Decimal



Set: NineMonths(self: MineralPropertiesBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: MineralPropertiesBalanceSheet) -> Decimal



Set: SixMonths(self: MineralPropertiesBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: MineralPropertiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: MineralPropertiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: MineralPropertiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: MineralPropertiesBalanceSheet) = value

"""

    Store = None


class MinimumPensionLiabilitiesBalanceSheet(MultiPeriodField):
    """
    The company's minimum pension obligations to its former employees, paid into a defined pension plan to satisfy all pension

                entitlements that have been earned by employees to date.



    MinimumPensionLiabilitiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: MinimumPensionLiabilitiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: MinimumPensionLiabilitiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: MinimumPensionLiabilitiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: MinimumPensionLiabilitiesBalanceSheet) = value

"""

    Store = None


class MinorityInterestBalanceSheet(MultiPeriodField):
    """
    Carrying amount of the equity interests owned by non-controlling shareholders, partners, or other equity holders in one or more of

                the entities included in the reporting entity's consolidated financial statements.



    MinorityInterestBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: MinorityInterestBalanceSheet) -> Decimal



Set: NineMonths(self: MinorityInterestBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: MinorityInterestBalanceSheet) -> Decimal



Set: OneMonth(self: MinorityInterestBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: MinorityInterestBalanceSheet) -> Decimal



Set: SixMonths(self: MinorityInterestBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: MinorityInterestBalanceSheet) -> Decimal



Set: ThreeMonths(self: MinorityInterestBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: MinorityInterestBalanceSheet) -> Decimal



Set: TwelveMonths(self: MinorityInterestBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: MinorityInterestBalanceSheet) -> Decimal



Set: TwoMonths(self: MinorityInterestBalanceSheet) = value

"""

    Store = None


class MinorityInterestCashFlowStatement(MultiPeriodField):
    """
    Amount of net income (loss) for the period allocated to non-controlling shareholders, partners, or other equity holders in one or

                more of the entities included.



    MinorityInterestCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: MinorityInterestCashFlowStatement) -> Decimal



Set: TwelveMonths(self: MinorityInterestCashFlowStatement) = value

"""

    Store = None


class MinorityInterestsIncomeStatement(MultiPeriodField):
    """
    Represents par or stated value of the subsidiary stock not owned by the parent company plus the minority interest's equity in the

                surplus of the subsidiary. This item includes preferred dividend averages on the minority preferred stock (preferred shares not

                owned by the reporting parent company). Minority interest also refers to stockholders who own less than 50% of a subsidiary's

                outstanding voting common stock. The minority stockholders hold an interest in the subsidiary's net assets and share earnings with

                the parent company.



    MinorityInterestsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: MinorityInterestsIncomeStatement) -> Decimal



Set: NineMonths(self: MinorityInterestsIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: MinorityInterestsIncomeStatement) -> Decimal



Set: OneMonth(self: MinorityInterestsIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: MinorityInterestsIncomeStatement) -> Decimal



Set: SixMonths(self: MinorityInterestsIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: MinorityInterestsIncomeStatement) -> Decimal



Set: ThreeMonths(self: MinorityInterestsIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: MinorityInterestsIncomeStatement) -> Decimal



Set: TwelveMonths(self: MinorityInterestsIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: MinorityInterestsIncomeStatement) -> Decimal



Set: TwoMonths(self: MinorityInterestsIncomeStatement) = value

"""

    Store = None


class MoneyMarketInvestmentsBalanceSheet(MultiPeriodField):
    """
    Short-term (typical maturity is less than one year), highly liquid government or corporate debt instrument such as bankers'

                acceptance, promissory notes, and treasury bills.



    MoneyMarketInvestmentsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: MoneyMarketInvestmentsBalanceSheet) -> Decimal



Set: NineMonths(self: MoneyMarketInvestmentsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: MoneyMarketInvestmentsBalanceSheet) -> Decimal



Set: SixMonths(self: MoneyMarketInvestmentsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: MoneyMarketInvestmentsBalanceSheet) -> Decimal



Set: ThreeMonths(self: MoneyMarketInvestmentsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: MoneyMarketInvestmentsBalanceSheet) -> Decimal



Set: TwelveMonths(self: MoneyMarketInvestmentsBalanceSheet) = value

"""

    Store = None


class MorningstarEconomySphereCode(object):
    """ Helper class for the AssetClassification's MorningstarEconomySphereCode field QuantConnect.Data.Fundamental.AssetClassification.MorningstarEconomySphereCode. """
    Cyclical = 1
    Defensive = 2
    Sensitive = 3
    __all__ = []


class MorningstarIndustryCode(object):
    """ Helper class for the AssetClassification's MorningstarIndustryCode field QuantConnect.Data.Fundamental.AssetClassification.MorningstarIndustryCode. """
    AdvertisingAgencies = 30820010
    AerospaceAndDefense = 31010010
    AgriculturalInputs = 10110010
    Airlines = 31080020
    AirportsAndAirServices = 31080010
    Aluminum = 10150010
    ApparelManufacturing = 10240020
    ApparelRetail = 10280010
    AssetManagement = 10310010
    AutoAndTruckDealerships = 10200010
    AutoManufacturers = 10200020
    AutoParts = 10200030
    BanksDiversified = 10320010
    BanksRegional = 10320020
    BeveragesBrewers = 20510010
    BeveragesNonAlcoholic = 20520010
    BeveragesWineriesAndDistilleries = 20510020
    Biotechnology = 20610010
    Broadcasting = 30820030
    BuildingMaterials = 10120010
    BuildingProductsAndEquipment = 31040030
    BusinessEquipmentAndSupplies = 31070010
    CapitalMarkets = 10330010
    Chemicals = 10130010
    CokingCoal = 10160010
    CommunicationEquipment = 31120010
    ComputerHardware = 31120020
    Confectioners = 20525010
    Conglomerates = 31030010
    ConsultingServices = 31020020
    ConsumerElectronics = 31120030
    Copper = 10150020
    CreditServices = 10360010
    DepartmentStores = 10280020
    DiagnosticsAndResearch = 20660010
    DiscountStores = 20550010
    DrugManufacturersGeneral = 20620010
    DrugManufacturersSpecialtyAndGeneric = 20620020
    EducationAndTrainingServices = 20540010
    ElectricalEquipmentAndParts = 31070060
    ElectronicComponents = 31120040
    ElectronicGamingAndMultimedia = 30830020
    ElectronicsAndComputerDistribution = 31120050
    EngineeringAndConstruction = 31040010
    Entertainment = 30820040
    FarmAndHeavyConstructionMachinery = 31050010
    FarmProducts = 20525020
    FinancialConglomerates = 10350020
    FinancialDataAndStockExchanges = 10330020
    FixturesAndAppliances = 10220010
    FoodDistribution = 20550020
    FootwearAndAccessories = 10240030
    Furnishings = 0
    Gambling = 10290010
    Gold = 10150040
    GroceryStores = 20550030
    HealthcarePlans = 20630010
    HealthInformationServices = 20645030
    HomeImprovementRetail = 10280030
    HouseholdAndPersonalProducts = 20525030
    IndustrialDistribution = 31060010
    InformationTechnologyServices = 31110010
    InfrastructureOperations = 31040020
    InsuranceBrokers = 10340050
    InsuranceDiversified = 10340060
    InsuranceLife = 10340010
    InsurancePropertyAndCasualty = 10340020
    InsuranceReinsurance = 10340030
    InsuranceSpecialty = 10340040
    IntegratedFreightAndLogistics = 31080060
    InternetContentAndInformation = 30830010
    InternetRetail = 10280050
    Leisure = 10290020
    Lodging = 10290030
    LumberAndWoodProduction = 10140010
    LuxuryGoods = 10280040
    MarineShipping = 31080040
    MedicalCareFacilities = 20645010
    MedicalDevices = 20650010
    MedicalDistribution = 20670010
    MedicalInstrumentsAndSupplies = 20650020
    MetalFabrication = 31070030
    MortgageFinance = 10320030
    OilAndGasDrilling = 30910010
    OilAndGasEAndP = 30910020
    OilAndGasEquipmentAndServices = 30910060
    OilAndGasIntegrated = 30910030
    OilAndGasMidstream = 30910040
    OilAndGasRefiningAndMarketing = 30910050
    OtherIndustrialMetalsAndMining = 10150030
    OtherPreciousMetalsAndMining = 10150060
    PackagedFoods = 20525040
    PackagingAndContainers = 10250010
    PaperAndPaperProducts = 10140020
    PersonalServices = 10260010
    PharmaceuticalRetailers = 20645020
    PollutionAndTreatmentControls = 31070040
    Publishing = 30820020
    Railroads = 31080030
    RealEstateDevelopment = 10410010
    RealEstateDiversified = 10410030
    RealEstateServices = 10410020
    RecreationalVehicles = 10200040
    REITDiversified = 10420090
    REITHealthcareFacilities = 10420010
    REITHotelAndMotel = 10420020
    REITIndustrial = 10420030
    REITMortgage = 10420070
    REITOffice = 10420040
    REITResidential = 10420050
    REITRetail = 10420060
    REITSpecialty = 10420080
    RentalAndLeasingServices = 31020030
    ResidentialConstruction = 10230010
    ResortsAndCasinos = 10290040
    Restaurants = 10270010
    ScientificAndTechnicalInstruments = 31120060
    SecurityAndProtectionServices = 31020040
    SemiconductorEquipmentAndMaterials = 31130010
    Semiconductors = 31130020
    ShellCompanies = 10350010
    Silver = 10150050
    SoftwareApplication = 31110020
    SoftwareInfrastructure = 31110030
    Solar = 31130030
    SpecialtyBusinessServices = 31020010
    SpecialtyChemicals = 10130020
    SpecialtyIndustrialMachinery = 31070020
    SpecialtyRetail = 10280060
    StaffingAndEmploymentServices = 31020050
    Steel = 10160020
    TelecomServices = 30810010
    TextileManufacturing = 10240010
    ThermalCoal = 30920010
    Tobacco = 20560010
    ToolsAndAccessories = 31070050
    TravelServices = 10290050
    Trucking = 31080050
    Uranium = 30920020
    UtilitiesDiversified = 20720040
    UtilitiesIndependentPowerProducers = 20710010
    UtilitiesRegulatedElectric = 20720020
    UtilitiesRegulatedGas = 20720030
    UtilitiesRegulatedWater = 20720010
    UtilitiesRenewable = 20710020
    WasteManagement = 31090010
    __all__ = []


class MorningstarIndustryGroupCode(object):
    """ Helper class for the AssetClassification's MorningstarIndustryGroupCode field QuantConnect.Data.Fundamental.AssetClassification.MorningstarIndustryGroupCode. """
    AerospaceAndDefense = 31010
    Agriculture = 10110
    AssetManagement = 10310
    Banks = 10320
    BeveragesAlcoholic = 20510
    BeveragesNonAlcoholic = 20520
    Biotechnology = 20610
    BuildingMaterials = 10120
    BusinessServices = 31020
    CapitalMarkets = 10330
    Chemicals = 10130
    Conglomerates = 31030
    Construction = 31040
    ConsumerPackagedGoods = 20525
    CreditServices = 10360
    DiversifiedFinancialServices = 10350
    DrugManufacturers = 20620
    Education = 20540
    FarmAndHeavyConstructionMachinery = 31050
    FixturesAndAppliances = 10220
    ForestProducts = 10140
    Furnishings = 0
    Hardware = 31120
    HealthcarePlans = 20630
    HealthcareProvidersAndServices = 20645
    HomebuildingAndConstruction = 10230
    IndustrialDistribution = 31060
    IndustrialProducts = 31070
    Insurance = 10340
    InteractiveMedia = 30830
    ManufacturingApparelAndAccessories = 10240
    MediaDiversified = 30820
    MedicalDevicesAndInstruments = 20650
    MedicalDiagnosticsAndResearch = 20660
    MedicalDistribution = 20670
    MetalsAndMining = 10150
    OilAndGas = 30910
    OtherEnergySources = 30920
    PackagingAndContainers = 10250
    PersonalServices = 10260
    RealEstate = 10410
    REITs = 10420
    Restaurants = 10270
    RetailCyclical = 10280
    RetailDefensive = 20550
    Semiconductors = 31130
    Software = 31110
    Steel = 10160
    TelecommunicationServices = 30810
    TobaccoProducts = 20560
    Transportation = 31080
    TravelAndLeisure = 10290
    UtilitiesIndependentPowerProducers = 20710
    UtilitiesRegulated = 20720
    VehiclesAndParts = 10200
    WasteManagement = 31090
    __all__ = []


class MorningstarSectorCode(object):
    """ Helper class for the AssetClassification's MorningstarSectorCode field QuantConnect.Data.Fundamental.AssetClassification.MorningstarSectorCode. """
    BasicMaterials = 101
    CommunicationServices = 308
    ConsumerCyclical = 102
    ConsumerDefensive = 205
    Energy = 309
    FinancialServices = 103
    Healthcare = 206
    Industrials = 310
    RealEstate = 104
    Technology = 311
    Utilities = 207
    __all__ = []


class MortgageAndConsumerloansBalanceSheet(MultiPeriodField):
    """
    It means the aggregate amount of mortgage and consumer loans.  This item is typically available for the insurance industry.



    MortgageAndConsumerloansBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: MortgageAndConsumerloansBalanceSheet) -> Decimal



Set: ThreeMonths(self: MortgageAndConsumerloansBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: MortgageAndConsumerloansBalanceSheet) -> Decimal



Set: TwelveMonths(self: MortgageAndConsumerloansBalanceSheet) = value

"""

    Store = None


class MortgageLoanBalanceSheet(MultiPeriodField):
    """
    This is a lien on real estate to protect a lender.  This item is typically available for bank industry.



    MortgageLoanBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: MortgageLoanBalanceSheet) -> Decimal



Set: NineMonths(self: MortgageLoanBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: MortgageLoanBalanceSheet) -> Decimal



Set: SixMonths(self: MortgageLoanBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: MortgageLoanBalanceSheet) -> Decimal



Set: ThreeMonths(self: MortgageLoanBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: MortgageLoanBalanceSheet) -> Decimal



Set: TwelveMonths(self: MortgageLoanBalanceSheet) = value

"""

    Store = None


class NaturalGasFuelAndOtherBalanceSheet(MultiPeriodField):
    """
    The amount for the natural gas, fuel and other items related to the utility industry, which might include oil and gas wells, the

                properties to exploit oil and gas or liquefied natural gas sites.



    NaturalGasFuelAndOtherBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NaturalGasFuelAndOtherBalanceSheet) -> Decimal



Set: ThreeMonths(self: NaturalGasFuelAndOtherBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NaturalGasFuelAndOtherBalanceSheet) -> Decimal



Set: TwelveMonths(self: NaturalGasFuelAndOtherBalanceSheet) = value

"""

    Store = None


class NegativeGoodwillImmediatelyRecognizedIncomeStatement(MultiPeriodField):
    """
    Negative Goodwill recognized in the Income Statement. Negative Goodwill arises where the net assets at the date of acquisition,

                fairly valued, falls below the cost of acquisition.



    NegativeGoodwillImmediatelyRecognizedIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NegativeGoodwillImmediatelyRecognizedIncomeStatement) -> Decimal



Set: SixMonths(self: NegativeGoodwillImmediatelyRecognizedIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NegativeGoodwillImmediatelyRecognizedIncomeStatement) -> Decimal



Set: ThreeMonths(self: NegativeGoodwillImmediatelyRecognizedIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NegativeGoodwillImmediatelyRecognizedIncomeStatement) -> Decimal



Set: TwelveMonths(self: NegativeGoodwillImmediatelyRecognizedIncomeStatement) = value

"""

    Store = None


class NetBusinessPurchaseAndSaleCashFlowStatement(MultiPeriodField):
    """
    The net change between Purchases/Sales of Business.



    NetBusinessPurchaseAndSaleCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetBusinessPurchaseAndSaleCashFlowStatement) -> Decimal



Set: NineMonths(self: NetBusinessPurchaseAndSaleCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NetBusinessPurchaseAndSaleCashFlowStatement) -> Decimal



Set: OneMonth(self: NetBusinessPurchaseAndSaleCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetBusinessPurchaseAndSaleCashFlowStatement) -> Decimal



Set: SixMonths(self: NetBusinessPurchaseAndSaleCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetBusinessPurchaseAndSaleCashFlowStatement) -> Decimal



Set: ThreeMonths(self: NetBusinessPurchaseAndSaleCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetBusinessPurchaseAndSaleCashFlowStatement) -> Decimal



Set: TwelveMonths(self: NetBusinessPurchaseAndSaleCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NetBusinessPurchaseAndSaleCashFlowStatement) -> Decimal



Set: TwoMonths(self: NetBusinessPurchaseAndSaleCashFlowStatement) = value

"""

    Store = None


class NetCashFromDiscontinuedOperationsCashFlowStatement(MultiPeriodField):
    """
    The net cash from (used in) all of the entity's discontinued operating activities, excluding those of continued operations, of the

                reporting entity.



    NetCashFromDiscontinuedOperationsCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetCashFromDiscontinuedOperationsCashFlowStatement) -> Decimal



Set: NineMonths(self: NetCashFromDiscontinuedOperationsCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetCashFromDiscontinuedOperationsCashFlowStatement) -> Decimal



Set: SixMonths(self: NetCashFromDiscontinuedOperationsCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetCashFromDiscontinuedOperationsCashFlowStatement) -> Decimal



Set: ThreeMonths(self: NetCashFromDiscontinuedOperationsCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetCashFromDiscontinuedOperationsCashFlowStatement) -> Decimal



Set: TwelveMonths(self: NetCashFromDiscontinuedOperationsCashFlowStatement) = value

"""

    Store = None


class NetCommonStockIssuanceCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods of common stock.



    NetCommonStockIssuanceCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetCommonStockIssuanceCashFlowStatement) -> Decimal



Set: NineMonths(self: NetCommonStockIssuanceCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NetCommonStockIssuanceCashFlowStatement) -> Decimal



Set: OneMonth(self: NetCommonStockIssuanceCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetCommonStockIssuanceCashFlowStatement) -> Decimal



Set: SixMonths(self: NetCommonStockIssuanceCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetCommonStockIssuanceCashFlowStatement) -> Decimal



Set: ThreeMonths(self: NetCommonStockIssuanceCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetCommonStockIssuanceCashFlowStatement) -> Decimal



Set: TwelveMonths(self: NetCommonStockIssuanceCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NetCommonStockIssuanceCashFlowStatement) -> Decimal



Set: TwoMonths(self: NetCommonStockIssuanceCashFlowStatement) = value

"""

    Store = None


class NetDebtBalanceSheet(MultiPeriodField):
    """
    This is a metric that shows a company's overall debt situation by netting the value of a company's liabilities and

                debts with its cash and other similar liquid assets. It is calculated using [Current Debt] + [Long Term Debt] - [Cash and Cash

                Equivalents].



    NetDebtBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetDebtBalanceSheet) -> Decimal



Set: NineMonths(self: NetDebtBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NetDebtBalanceSheet) -> Decimal



Set: OneMonth(self: NetDebtBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetDebtBalanceSheet) -> Decimal



Set: SixMonths(self: NetDebtBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetDebtBalanceSheet) -> Decimal



Set: ThreeMonths(self: NetDebtBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetDebtBalanceSheet) -> Decimal



Set: TwelveMonths(self: NetDebtBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NetDebtBalanceSheet) -> Decimal



Set: TwoMonths(self: NetDebtBalanceSheet) = value

"""

    Store = None


class NetForeignCurrencyExchangeGainLossCashFlowStatement(MultiPeriodField):
    """
    The aggregate amount of realized and unrealized gain or loss resulting from changes in exchange rates between currencies.

                (Excludes foreign currency transactions designated as hedges of net investment in a foreign entity and inter-company foreign

                currency transactions that are of a long-term nature, when the entities to the transaction are consolidated, combined, or accounted

                for by the equity method in the reporting entity's financial statements. For certain entities, primarily banks, which are dealers in

                foreign exchange, foreign currency transaction gains or losses, may be disclosed as dealer gains or losses.)



    NetForeignCurrencyExchangeGainLossCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetForeignCurrencyExchangeGainLossCashFlowStatement) -> Decimal



Set: NineMonths(self: NetForeignCurrencyExchangeGainLossCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NetForeignCurrencyExchangeGainLossCashFlowStatement) -> Decimal



Set: OneMonth(self: NetForeignCurrencyExchangeGainLossCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetForeignCurrencyExchangeGainLossCashFlowStatement) -> Decimal



Set: SixMonths(self: NetForeignCurrencyExchangeGainLossCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetForeignCurrencyExchangeGainLossCashFlowStatement) -> Decimal



Set: ThreeMonths(self: NetForeignCurrencyExchangeGainLossCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetForeignCurrencyExchangeGainLossCashFlowStatement) -> Decimal



Set: TwelveMonths(self: NetForeignCurrencyExchangeGainLossCashFlowStatement) = value

"""

    Store = None


class NetForeignExchangeGainLossIncomeStatement(MultiPeriodField):
    """
    The aggregate foreign currency translation gain or loss (both realized and unrealized) included as part of revenue. This item is

                usually only available for insurance industry.



    NetForeignExchangeGainLossIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetForeignExchangeGainLossIncomeStatement) -> Decimal



Set: NineMonths(self: NetForeignExchangeGainLossIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetForeignExchangeGainLossIncomeStatement) -> Decimal



Set: SixMonths(self: NetForeignExchangeGainLossIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetForeignExchangeGainLossIncomeStatement) -> Decimal



Set: ThreeMonths(self: NetForeignExchangeGainLossIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetForeignExchangeGainLossIncomeStatement) -> Decimal



Set: TwelveMonths(self: NetForeignExchangeGainLossIncomeStatement) = value

"""

    Store = None


class NetIncomeCommonStockholdersIncomeStatement(MultiPeriodField):
    """
    Net income minus the preferred dividends paid as presented in the Income Statement.



    NetIncomeCommonStockholdersIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetIncomeCommonStockholdersIncomeStatement) -> Decimal



Set: NineMonths(self: NetIncomeCommonStockholdersIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NetIncomeCommonStockholdersIncomeStatement) -> Decimal



Set: OneMonth(self: NetIncomeCommonStockholdersIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetIncomeCommonStockholdersIncomeStatement) -> Decimal



Set: SixMonths(self: NetIncomeCommonStockholdersIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetIncomeCommonStockholdersIncomeStatement) -> Decimal



Set: ThreeMonths(self: NetIncomeCommonStockholdersIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetIncomeCommonStockholdersIncomeStatement) -> Decimal



Set: TwelveMonths(self: NetIncomeCommonStockholdersIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NetIncomeCommonStockholdersIncomeStatement) -> Decimal



Set: TwoMonths(self: NetIncomeCommonStockholdersIncomeStatement) = value

"""

    Store = None


class NetIncomeContinuousOperationsIncomeStatement(MultiPeriodField):
    """
    Revenue less expenses and taxes from the entity's ongoing operations and before income (loss) from: Preferred Dividends;

                Extraordinary Gains and Losses; Income from Cumulative Effects of Accounting Change; Discontinuing Operation; Income from Tax

                Loss Carry forward; Other Gains/Losses.



    NetIncomeContinuousOperationsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetIncomeContinuousOperationsIncomeStatement) -> Decimal



Set: NineMonths(self: NetIncomeContinuousOperationsIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NetIncomeContinuousOperationsIncomeStatement) -> Decimal



Set: OneMonth(self: NetIncomeContinuousOperationsIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetIncomeContinuousOperationsIncomeStatement) -> Decimal



Set: SixMonths(self: NetIncomeContinuousOperationsIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetIncomeContinuousOperationsIncomeStatement) -> Decimal



Set: ThreeMonths(self: NetIncomeContinuousOperationsIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetIncomeContinuousOperationsIncomeStatement) -> Decimal



Set: TwelveMonths(self: NetIncomeContinuousOperationsIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NetIncomeContinuousOperationsIncomeStatement) -> Decimal



Set: TwoMonths(self: NetIncomeContinuousOperationsIncomeStatement) = value

"""

    Store = None


class NetIncomeContinuousOperationsNetMinorityInterestIncomeStatement(MultiPeriodField):
    """
    Revenue less expenses and taxes from the entity's ongoing operations net of minority interest and before income (loss) from:

                Preferred Dividends; Extraordinary Gains and Losses; Income from Cumulative Effects of Accounting Change; Discontinuing

                Operation; Income from Tax Loss Carry forward; Other Gains/Losses.



    NetIncomeContinuousOperationsNetMinorityInterestIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetIncomeContinuousOperationsNetMinorityInterestIncomeStatement) -> Decimal



Set: NineMonths(self: NetIncomeContinuousOperationsNetMinorityInterestIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetIncomeContinuousOperationsNetMinorityInterestIncomeStatement) -> Decimal



Set: SixMonths(self: NetIncomeContinuousOperationsNetMinorityInterestIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetIncomeContinuousOperationsNetMinorityInterestIncomeStatement) -> Decimal



Set: ThreeMonths(self: NetIncomeContinuousOperationsNetMinorityInterestIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetIncomeContinuousOperationsNetMinorityInterestIncomeStatement) -> Decimal



Set: TwelveMonths(self: NetIncomeContinuousOperationsNetMinorityInterestIncomeStatement) = value

"""

    Store = None


class NetIncomeContOpsGrowth(MultiPeriodField):
    """
    The growth in the company's net income from continuing operations on a percentage basis. Morningstar calculates the growth

                percentage based on the underlying net income from continuing operations data reported in the Income Statement within the

                company filings or reports. This figure represents the rate of net income growth for parts of the business that will continue to

                generate revenue in the future.



    NetIncomeContOpsGrowth(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: NetIncomeContOpsGrowth) -> Decimal



Set: FiveYears(self: NetIncomeContOpsGrowth) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: NetIncomeContOpsGrowth) -> Decimal



Set: OneYear(self: NetIncomeContOpsGrowth) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetIncomeContOpsGrowth) -> Decimal



Set: ThreeMonths(self: NetIncomeContOpsGrowth) = value

"""

    ThreeYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeYears period value for the field



Get: ThreeYears(self: NetIncomeContOpsGrowth) -> Decimal



Set: ThreeYears(self: NetIncomeContOpsGrowth) = value

"""

    Store = None


class NetIncomeDiscontinuousOperationsIncomeStatement(MultiPeriodField):
    """
    To be classified as discontinued operations, if both of the following conditions are met:

                1: The operations and cash flow of the component have been or will be removed from the ongoing operations of the entity as a

                result of the disposal transaction, and

                2: The entity will have no significant continuing involvement in the operations of the component after the disposal transaction.

                The discontinued operation is reported net of tax.

                Gains/Loss on Disposal of Discontinued Operations: Any gains or loss recognized on disposal of discontinued operations,

                which is the difference between the carrying value of the division and its fair value less costs to sell.

                Provision for Gain/Loss on Disposal: The amount of current expense charged in order to prepare for the disposal of

                discontinued operations.



    NetIncomeDiscontinuousOperationsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetIncomeDiscontinuousOperationsIncomeStatement) -> Decimal



Set: NineMonths(self: NetIncomeDiscontinuousOperationsIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NetIncomeDiscontinuousOperationsIncomeStatement) -> Decimal



Set: OneMonth(self: NetIncomeDiscontinuousOperationsIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetIncomeDiscontinuousOperationsIncomeStatement) -> Decimal



Set: SixMonths(self: NetIncomeDiscontinuousOperationsIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetIncomeDiscontinuousOperationsIncomeStatement) -> Decimal



Set: ThreeMonths(self: NetIncomeDiscontinuousOperationsIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetIncomeDiscontinuousOperationsIncomeStatement) -> Decimal



Set: TwelveMonths(self: NetIncomeDiscontinuousOperationsIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NetIncomeDiscontinuousOperationsIncomeStatement) -> Decimal



Set: TwoMonths(self: NetIncomeDiscontinuousOperationsIncomeStatement) = value

"""

    Store = None


class NetIncomeExtraordinaryIncomeStatement(MultiPeriodField):
    """
    Gains (losses), whether arising from extinguishment of debt, prior period adjustments, or from other events or transactions, that are

                both unusual in nature and infrequent in occurrence thereby meeting the criteria for an event or transaction to be classified as an

                extraordinary item.



    NetIncomeExtraordinaryIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetIncomeExtraordinaryIncomeStatement) -> Decimal



Set: NineMonths(self: NetIncomeExtraordinaryIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NetIncomeExtraordinaryIncomeStatement) -> Decimal



Set: OneMonth(self: NetIncomeExtraordinaryIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetIncomeExtraordinaryIncomeStatement) -> Decimal



Set: SixMonths(self: NetIncomeExtraordinaryIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetIncomeExtraordinaryIncomeStatement) -> Decimal



Set: ThreeMonths(self: NetIncomeExtraordinaryIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetIncomeExtraordinaryIncomeStatement) -> Decimal



Set: TwelveMonths(self: NetIncomeExtraordinaryIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NetIncomeExtraordinaryIncomeStatement) -> Decimal



Set: TwoMonths(self: NetIncomeExtraordinaryIncomeStatement) = value

"""

    Store = None


class NetIncomeFromContinuingAndDiscontinuedOperationIncomeStatement(MultiPeriodField):
    """
    Net Income from Continuing Operations and Discontinued Operations, added together.



    NetIncomeFromContinuingAndDiscontinuedOperationIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetIncomeFromContinuingAndDiscontinuedOperationIncomeStatement) -> Decimal



Set: NineMonths(self: NetIncomeFromContinuingAndDiscontinuedOperationIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NetIncomeFromContinuingAndDiscontinuedOperationIncomeStatement) -> Decimal



Set: OneMonth(self: NetIncomeFromContinuingAndDiscontinuedOperationIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetIncomeFromContinuingAndDiscontinuedOperationIncomeStatement) -> Decimal



Set: SixMonths(self: NetIncomeFromContinuingAndDiscontinuedOperationIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetIncomeFromContinuingAndDiscontinuedOperationIncomeStatement) -> Decimal



Set: ThreeMonths(self: NetIncomeFromContinuingAndDiscontinuedOperationIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetIncomeFromContinuingAndDiscontinuedOperationIncomeStatement) -> Decimal



Set: TwelveMonths(self: NetIncomeFromContinuingAndDiscontinuedOperationIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NetIncomeFromContinuingAndDiscontinuedOperationIncomeStatement) -> Decimal



Set: TwoMonths(self: NetIncomeFromContinuingAndDiscontinuedOperationIncomeStatement) = value

"""

    Store = None


class NetIncomeFromContinuingOperationNetMinorityInterestIncomeStatement(MultiPeriodField):
    """
    Revenue less expenses and taxes from the entity's ongoing operations net of minority interest and before income (loss) from:

                Preferred Dividends; Extraordinary Gains and Losses; Income from Cumulative Effects of Accounting Change; Discontinuing

                Operation; Income from Tax Loss Carry forward; Other Gains/Losses.



    NetIncomeFromContinuingOperationNetMinorityInterestIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetIncomeFromContinuingOperationNetMinorityInterestIncomeStatement) -> Decimal



Set: NineMonths(self: NetIncomeFromContinuingOperationNetMinorityInterestIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NetIncomeFromContinuingOperationNetMinorityInterestIncomeStatement) -> Decimal



Set: OneMonth(self: NetIncomeFromContinuingOperationNetMinorityInterestIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetIncomeFromContinuingOperationNetMinorityInterestIncomeStatement) -> Decimal



Set: SixMonths(self: NetIncomeFromContinuingOperationNetMinorityInterestIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetIncomeFromContinuingOperationNetMinorityInterestIncomeStatement) -> Decimal



Set: ThreeMonths(self: NetIncomeFromContinuingOperationNetMinorityInterestIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetIncomeFromContinuingOperationNetMinorityInterestIncomeStatement) -> Decimal



Set: TwelveMonths(self: NetIncomeFromContinuingOperationNetMinorityInterestIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NetIncomeFromContinuingOperationNetMinorityInterestIncomeStatement) -> Decimal



Set: TwoMonths(self: NetIncomeFromContinuingOperationNetMinorityInterestIncomeStatement) = value

"""

    Store = None


class NetIncomeFromContinuingOperationsCashFlowStatement(MultiPeriodField):
    """
    Revenue less expenses and taxes from the entity's ongoing operations and before income (loss) from discontinued operations,

                extraordinary items, impact of changes in accounting principles, minority interest, and various other reconciling adjustments;

                represents the starting line for Operating Cash Flow.



    NetIncomeFromContinuingOperationsCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetIncomeFromContinuingOperationsCashFlowStatement) -> Decimal



Set: NineMonths(self: NetIncomeFromContinuingOperationsCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NetIncomeFromContinuingOperationsCashFlowStatement) -> Decimal



Set: OneMonth(self: NetIncomeFromContinuingOperationsCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetIncomeFromContinuingOperationsCashFlowStatement) -> Decimal



Set: SixMonths(self: NetIncomeFromContinuingOperationsCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetIncomeFromContinuingOperationsCashFlowStatement) -> Decimal



Set: ThreeMonths(self: NetIncomeFromContinuingOperationsCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetIncomeFromContinuingOperationsCashFlowStatement) -> Decimal



Set: TwelveMonths(self: NetIncomeFromContinuingOperationsCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NetIncomeFromContinuingOperationsCashFlowStatement) -> Decimal



Set: TwoMonths(self: NetIncomeFromContinuingOperationsCashFlowStatement) = value

"""

    Store = None


class NetIncomeFromTaxLossCarryforwardIncomeStatement(MultiPeriodField):
    """
    Occurs if a company has had a net loss from operations on a previous year that can be carried forward to reduce net income for tax

                purposes.



    NetIncomeFromTaxLossCarryforwardIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetIncomeFromTaxLossCarryforwardIncomeStatement) -> Decimal



Set: NineMonths(self: NetIncomeFromTaxLossCarryforwardIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetIncomeFromTaxLossCarryforwardIncomeStatement) -> Decimal



Set: SixMonths(self: NetIncomeFromTaxLossCarryforwardIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetIncomeFromTaxLossCarryforwardIncomeStatement) -> Decimal



Set: ThreeMonths(self: NetIncomeFromTaxLossCarryforwardIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetIncomeFromTaxLossCarryforwardIncomeStatement) -> Decimal



Set: TwelveMonths(self: NetIncomeFromTaxLossCarryforwardIncomeStatement) = value

"""

    Store = None


class NetIncomeGrowth(MultiPeriodField):
    """
    The growth in the company's net income on a percentage basis. Morningstar calculates the growth percentage based on the

                underlying net income data reported in the Income Statement within the company filings or reports.



    NetIncomeGrowth(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: NetIncomeGrowth) -> Decimal



Set: FiveYears(self: NetIncomeGrowth) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: NetIncomeGrowth) -> Decimal



Set: OneYear(self: NetIncomeGrowth) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetIncomeGrowth) -> Decimal



Set: ThreeMonths(self: NetIncomeGrowth) = value

"""

    ThreeYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeYears period value for the field



Get: ThreeYears(self: NetIncomeGrowth) -> Decimal



Set: ThreeYears(self: NetIncomeGrowth) = value

"""

    Store = None


class NetIncomeIncludingNoncontrollingInterestsIncomeStatement(MultiPeriodField):
    """
    Net income of the group after the adjustment of all expenses and benefit.



    NetIncomeIncludingNoncontrollingInterestsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetIncomeIncludingNoncontrollingInterestsIncomeStatement) -> Decimal



Set: NineMonths(self: NetIncomeIncludingNoncontrollingInterestsIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NetIncomeIncludingNoncontrollingInterestsIncomeStatement) -> Decimal



Set: OneMonth(self: NetIncomeIncludingNoncontrollingInterestsIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetIncomeIncludingNoncontrollingInterestsIncomeStatement) -> Decimal



Set: SixMonths(self: NetIncomeIncludingNoncontrollingInterestsIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetIncomeIncludingNoncontrollingInterestsIncomeStatement) -> Decimal



Set: ThreeMonths(self: NetIncomeIncludingNoncontrollingInterestsIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetIncomeIncludingNoncontrollingInterestsIncomeStatement) -> Decimal



Set: TwelveMonths(self: NetIncomeIncludingNoncontrollingInterestsIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NetIncomeIncludingNoncontrollingInterestsIncomeStatement) -> Decimal



Set: TwoMonths(self: NetIncomeIncludingNoncontrollingInterestsIncomeStatement) = value

"""

    Store = None


class NetIncomeIncomeStatement(MultiPeriodField):
    """
    Includes all the operations (continuing and discontinued) and all the other income or charges (extraordinary, accounting changes,

                tax loss carry forward, and other gains and losses).



    NetIncomeIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetIncomeIncomeStatement) -> Decimal



Set: NineMonths(self: NetIncomeIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NetIncomeIncomeStatement) -> Decimal



Set: OneMonth(self: NetIncomeIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetIncomeIncomeStatement) -> Decimal



Set: SixMonths(self: NetIncomeIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetIncomeIncomeStatement) -> Decimal



Set: ThreeMonths(self: NetIncomeIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetIncomeIncomeStatement) -> Decimal



Set: TwelveMonths(self: NetIncomeIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NetIncomeIncomeStatement) -> Decimal



Set: TwoMonths(self: NetIncomeIncomeStatement) = value

"""

    Store = None


class NetIncomePerEmployee(MultiPeriodField):
    """
    Refers to the ratio of Net Income to Employees. Morningstar calculates the ratio by using the underlying data reported in the

                company filings or reports:     Net Income / Employee Number.



    NetIncomePerEmployee(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: NetIncomePerEmployee) -> Decimal



Set: OneYear(self: NetIncomePerEmployee) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetIncomePerEmployee) -> Decimal



Set: ThreeMonths(self: NetIncomePerEmployee) = value

"""

    Store = None


class NetIntangiblesPurchaseAndSaleCashFlowStatement(MultiPeriodField):
    """
    The net change between Purchases/Sales of Intangibles.



    NetIntangiblesPurchaseAndSaleCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetIntangiblesPurchaseAndSaleCashFlowStatement) -> Decimal



Set: NineMonths(self: NetIntangiblesPurchaseAndSaleCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NetIntangiblesPurchaseAndSaleCashFlowStatement) -> Decimal



Set: OneMonth(self: NetIntangiblesPurchaseAndSaleCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetIntangiblesPurchaseAndSaleCashFlowStatement) -> Decimal



Set: SixMonths(self: NetIntangiblesPurchaseAndSaleCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetIntangiblesPurchaseAndSaleCashFlowStatement) -> Decimal



Set: ThreeMonths(self: NetIntangiblesPurchaseAndSaleCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetIntangiblesPurchaseAndSaleCashFlowStatement) -> Decimal



Set: TwelveMonths(self: NetIntangiblesPurchaseAndSaleCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NetIntangiblesPurchaseAndSaleCashFlowStatement) -> Decimal



Set: TwoMonths(self: NetIntangiblesPurchaseAndSaleCashFlowStatement) = value

"""

    Store = None


class NetInterestIncomeIncomeStatement(MultiPeriodField):
    """
    Total interest income minus total interest expense. It represents the difference between interest and dividends earned on interest-

                bearing assets and interest paid to depositors and other creditors.



    NetInterestIncomeIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetInterestIncomeIncomeStatement) -> Decimal



Set: NineMonths(self: NetInterestIncomeIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NetInterestIncomeIncomeStatement) -> Decimal



Set: OneMonth(self: NetInterestIncomeIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetInterestIncomeIncomeStatement) -> Decimal



Set: SixMonths(self: NetInterestIncomeIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetInterestIncomeIncomeStatement) -> Decimal



Set: ThreeMonths(self: NetInterestIncomeIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetInterestIncomeIncomeStatement) -> Decimal



Set: TwelveMonths(self: NetInterestIncomeIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NetInterestIncomeIncomeStatement) -> Decimal



Set: TwoMonths(self: NetInterestIncomeIncomeStatement) = value

"""

    Store = None


class NetInvestmentIncomeIncomeStatement(MultiPeriodField):
    """
    Total of interest, dividends, and other earnings derived from the insurance company's invested assets minus the expenses

                associated with these investments. Excluded from this income are capital gains or losses as the result of the sale of assets, as well

                as any unrealized capital gains or losses.



    NetInvestmentIncomeIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetInvestmentIncomeIncomeStatement) -> Decimal



Set: NineMonths(self: NetInvestmentIncomeIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetInvestmentIncomeIncomeStatement) -> Decimal



Set: SixMonths(self: NetInvestmentIncomeIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetInvestmentIncomeIncomeStatement) -> Decimal



Set: ThreeMonths(self: NetInvestmentIncomeIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetInvestmentIncomeIncomeStatement) -> Decimal



Set: TwelveMonths(self: NetInvestmentIncomeIncomeStatement) = value

"""

    Store = None


class NetInvestmentPropertiesPurchaseAndSaleCashFlowStatement(MultiPeriodField):
    """
    Net increase or decrease in cash due to purchases or sales of investment properties during the accounting PeriodAsByte.



    NetInvestmentPropertiesPurchaseAndSaleCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetInvestmentPropertiesPurchaseAndSaleCashFlowStatement) -> Decimal



Set: NineMonths(self: NetInvestmentPropertiesPurchaseAndSaleCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetInvestmentPropertiesPurchaseAndSaleCashFlowStatement) -> Decimal



Set: SixMonths(self: NetInvestmentPropertiesPurchaseAndSaleCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetInvestmentPropertiesPurchaseAndSaleCashFlowStatement) -> Decimal



Set: ThreeMonths(self: NetInvestmentPropertiesPurchaseAndSaleCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetInvestmentPropertiesPurchaseAndSaleCashFlowStatement) -> Decimal



Set: TwelveMonths(self: NetInvestmentPropertiesPurchaseAndSaleCashFlowStatement) = value

"""

    Store = None


class NetInvestmentPurchaseAndSaleCashFlowStatement(MultiPeriodField):
    """
    The net change between Purchases/Sales of Investments.



    NetInvestmentPurchaseAndSaleCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetInvestmentPurchaseAndSaleCashFlowStatement) -> Decimal



Set: NineMonths(self: NetInvestmentPurchaseAndSaleCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NetInvestmentPurchaseAndSaleCashFlowStatement) -> Decimal



Set: OneMonth(self: NetInvestmentPurchaseAndSaleCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetInvestmentPurchaseAndSaleCashFlowStatement) -> Decimal



Set: SixMonths(self: NetInvestmentPurchaseAndSaleCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetInvestmentPurchaseAndSaleCashFlowStatement) -> Decimal



Set: ThreeMonths(self: NetInvestmentPurchaseAndSaleCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetInvestmentPurchaseAndSaleCashFlowStatement) -> Decimal



Set: TwelveMonths(self: NetInvestmentPurchaseAndSaleCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NetInvestmentPurchaseAndSaleCashFlowStatement) -> Decimal



Set: TwoMonths(self: NetInvestmentPurchaseAndSaleCashFlowStatement) = value

"""

    Store = None


class NetIssuancePaymentsOfDebtCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods of debt.



    NetIssuancePaymentsOfDebtCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetIssuancePaymentsOfDebtCashFlowStatement) -> Decimal



Set: NineMonths(self: NetIssuancePaymentsOfDebtCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NetIssuancePaymentsOfDebtCashFlowStatement) -> Decimal



Set: OneMonth(self: NetIssuancePaymentsOfDebtCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetIssuancePaymentsOfDebtCashFlowStatement) -> Decimal



Set: SixMonths(self: NetIssuancePaymentsOfDebtCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetIssuancePaymentsOfDebtCashFlowStatement) -> Decimal



Set: ThreeMonths(self: NetIssuancePaymentsOfDebtCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetIssuancePaymentsOfDebtCashFlowStatement) -> Decimal



Set: TwelveMonths(self: NetIssuancePaymentsOfDebtCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NetIssuancePaymentsOfDebtCashFlowStatement) -> Decimal



Set: TwoMonths(self: NetIssuancePaymentsOfDebtCashFlowStatement) = value

"""

    Store = None


class NetLoanBalanceSheet(MultiPeriodField):
    """
    Represents the value of all loans after deduction of the appropriate allowances for loan and lease losses.



    NetLoanBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetLoanBalanceSheet) -> Decimal



Set: NineMonths(self: NetLoanBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetLoanBalanceSheet) -> Decimal



Set: SixMonths(self: NetLoanBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetLoanBalanceSheet) -> Decimal



Set: ThreeMonths(self: NetLoanBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetLoanBalanceSheet) -> Decimal



Set: TwelveMonths(self: NetLoanBalanceSheet) = value

"""

    Store = None


class NetLongTermDebtIssuanceCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods of long term debt. Long term debt includes notes payable, bonds payable, mortgage

                loans, convertible debt, subordinated debt and other types of long term debt.



    NetLongTermDebtIssuanceCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetLongTermDebtIssuanceCashFlowStatement) -> Decimal



Set: NineMonths(self: NetLongTermDebtIssuanceCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NetLongTermDebtIssuanceCashFlowStatement) -> Decimal



Set: OneMonth(self: NetLongTermDebtIssuanceCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetLongTermDebtIssuanceCashFlowStatement) -> Decimal



Set: SixMonths(self: NetLongTermDebtIssuanceCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetLongTermDebtIssuanceCashFlowStatement) -> Decimal



Set: ThreeMonths(self: NetLongTermDebtIssuanceCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetLongTermDebtIssuanceCashFlowStatement) -> Decimal



Set: TwelveMonths(self: NetLongTermDebtIssuanceCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NetLongTermDebtIssuanceCashFlowStatement) -> Decimal



Set: TwoMonths(self: NetLongTermDebtIssuanceCashFlowStatement) = value

"""

    Store = None


class NetMargin(MultiPeriodField):
    """
    Refers to the ratio of net income to revenue. Morningstar calculates the ratio by using the underlying data reported in the company

                filings or reports:   Net Income / Revenue.



    NetMargin(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetMargin) -> Decimal



Set: NineMonths(self: NetMargin) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NetMargin) -> Decimal



Set: OneMonth(self: NetMargin) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: NetMargin) -> Decimal



Set: OneYear(self: NetMargin) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetMargin) -> Decimal



Set: SixMonths(self: NetMargin) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetMargin) -> Decimal



Set: ThreeMonths(self: NetMargin) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NetMargin) -> Decimal



Set: TwoMonths(self: NetMargin) = value

"""

    Store = None


class NetNonOperatingInterestIncomeExpenseIncomeStatement(MultiPeriodField):
    """
    Net-Non Operating interest income or expenses caused by financing activities.



    NetNonOperatingInterestIncomeExpenseIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetNonOperatingInterestIncomeExpenseIncomeStatement) -> Decimal



Set: NineMonths(self: NetNonOperatingInterestIncomeExpenseIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NetNonOperatingInterestIncomeExpenseIncomeStatement) -> Decimal



Set: OneMonth(self: NetNonOperatingInterestIncomeExpenseIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetNonOperatingInterestIncomeExpenseIncomeStatement) -> Decimal



Set: SixMonths(self: NetNonOperatingInterestIncomeExpenseIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetNonOperatingInterestIncomeExpenseIncomeStatement) -> Decimal



Set: ThreeMonths(self: NetNonOperatingInterestIncomeExpenseIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetNonOperatingInterestIncomeExpenseIncomeStatement) -> Decimal



Set: TwelveMonths(self: NetNonOperatingInterestIncomeExpenseIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NetNonOperatingInterestIncomeExpenseIncomeStatement) -> Decimal



Set: TwoMonths(self: NetNonOperatingInterestIncomeExpenseIncomeStatement) = value

"""

    Store = None


class NetOccupancyExpenseIncomeStatement(MultiPeriodField):
    """
    Occupancy expense may include items, such as depreciation of facilities and equipment, lease expenses, property taxes and

                property and casualty insurance expense. This item is usually only available for bank industry.



    NetOccupancyExpenseIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetOccupancyExpenseIncomeStatement) -> Decimal



Set: NineMonths(self: NetOccupancyExpenseIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetOccupancyExpenseIncomeStatement) -> Decimal



Set: SixMonths(self: NetOccupancyExpenseIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetOccupancyExpenseIncomeStatement) -> Decimal



Set: ThreeMonths(self: NetOccupancyExpenseIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetOccupancyExpenseIncomeStatement) -> Decimal



Set: TwelveMonths(self: NetOccupancyExpenseIncomeStatement) = value

"""

    Store = None


class NetOtherFinancingChargesCashFlowStatement(MultiPeriodField):
    """
    Miscellaneous charges incurred due to Financing activities.



    NetOtherFinancingChargesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetOtherFinancingChargesCashFlowStatement) -> Decimal



Set: NineMonths(self: NetOtherFinancingChargesCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NetOtherFinancingChargesCashFlowStatement) -> Decimal



Set: OneMonth(self: NetOtherFinancingChargesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetOtherFinancingChargesCashFlowStatement) -> Decimal



Set: SixMonths(self: NetOtherFinancingChargesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetOtherFinancingChargesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: NetOtherFinancingChargesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetOtherFinancingChargesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: NetOtherFinancingChargesCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NetOtherFinancingChargesCashFlowStatement) -> Decimal



Set: TwoMonths(self: NetOtherFinancingChargesCashFlowStatement) = value

"""

    Store = None


class NetOtherInvestingChangesCashFlowStatement(MultiPeriodField):
    """
    Miscellaneous charges incurred due to Investing activities.



    NetOtherInvestingChangesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetOtherInvestingChangesCashFlowStatement) -> Decimal



Set: NineMonths(self: NetOtherInvestingChangesCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NetOtherInvestingChangesCashFlowStatement) -> Decimal



Set: OneMonth(self: NetOtherInvestingChangesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetOtherInvestingChangesCashFlowStatement) -> Decimal



Set: SixMonths(self: NetOtherInvestingChangesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetOtherInvestingChangesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: NetOtherInvestingChangesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetOtherInvestingChangesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: NetOtherInvestingChangesCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NetOtherInvestingChangesCashFlowStatement) -> Decimal



Set: TwoMonths(self: NetOtherInvestingChangesCashFlowStatement) = value

"""

    Store = None


class NetOutwardLoansCashFlowStatement(MultiPeriodField):
    """
    Adjustments due to net loans to/from outsiders in the Investing Cash Flow section.



    NetOutwardLoansCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetOutwardLoansCashFlowStatement) -> Decimal



Set: TwelveMonths(self: NetOutwardLoansCashFlowStatement) = value

"""

    Store = None


class NetPolicyholderBenefitsAndClaimsIncomeStatement(MultiPeriodField):
    """
    The net provision in current period for future policy benefits, claims, and claims settlement expenses incurred in the claims

                settlement process before the effects of reinsurance arrangements. The value is net of the effects of contracts assumed and

                ceded.



    NetPolicyholderBenefitsAndClaimsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetPolicyholderBenefitsAndClaimsIncomeStatement) -> Decimal



Set: NineMonths(self: NetPolicyholderBenefitsAndClaimsIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetPolicyholderBenefitsAndClaimsIncomeStatement) -> Decimal



Set: SixMonths(self: NetPolicyholderBenefitsAndClaimsIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetPolicyholderBenefitsAndClaimsIncomeStatement) -> Decimal



Set: ThreeMonths(self: NetPolicyholderBenefitsAndClaimsIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetPolicyholderBenefitsAndClaimsIncomeStatement) -> Decimal



Set: TwelveMonths(self: NetPolicyholderBenefitsAndClaimsIncomeStatement) = value

"""

    Store = None


class NetPPEBalanceSheet(MultiPeriodField):
    """
    Tangible assets that are held by an entity for use in the production or supply of goods and services, for rental to others, or for

                administrative purposes and that are expected to provide economic benefit for more than one year; net of accumulated

                depreciation.



    NetPPEBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetPPEBalanceSheet) -> Decimal



Set: NineMonths(self: NetPPEBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NetPPEBalanceSheet) -> Decimal



Set: OneMonth(self: NetPPEBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetPPEBalanceSheet) -> Decimal



Set: SixMonths(self: NetPPEBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetPPEBalanceSheet) -> Decimal



Set: ThreeMonths(self: NetPPEBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetPPEBalanceSheet) -> Decimal



Set: TwelveMonths(self: NetPPEBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NetPPEBalanceSheet) -> Decimal



Set: TwoMonths(self: NetPPEBalanceSheet) = value

"""

    Store = None


class NetPPEPurchaseAndSaleCashFlowStatement(MultiPeriodField):
    """
    The net change between Purchases/Sales of PPE.



    NetPPEPurchaseAndSaleCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetPPEPurchaseAndSaleCashFlowStatement) -> Decimal



Set: NineMonths(self: NetPPEPurchaseAndSaleCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NetPPEPurchaseAndSaleCashFlowStatement) -> Decimal



Set: OneMonth(self: NetPPEPurchaseAndSaleCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetPPEPurchaseAndSaleCashFlowStatement) -> Decimal



Set: SixMonths(self: NetPPEPurchaseAndSaleCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetPPEPurchaseAndSaleCashFlowStatement) -> Decimal



Set: ThreeMonths(self: NetPPEPurchaseAndSaleCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetPPEPurchaseAndSaleCashFlowStatement) -> Decimal



Set: TwelveMonths(self: NetPPEPurchaseAndSaleCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NetPPEPurchaseAndSaleCashFlowStatement) -> Decimal



Set: TwoMonths(self: NetPPEPurchaseAndSaleCashFlowStatement) = value

"""

    Store = None


class NetPreferredStockIssuanceCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods of preferred stock.



    NetPreferredStockIssuanceCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetPreferredStockIssuanceCashFlowStatement) -> Decimal



Set: NineMonths(self: NetPreferredStockIssuanceCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NetPreferredStockIssuanceCashFlowStatement) -> Decimal



Set: OneMonth(self: NetPreferredStockIssuanceCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetPreferredStockIssuanceCashFlowStatement) -> Decimal



Set: SixMonths(self: NetPreferredStockIssuanceCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetPreferredStockIssuanceCashFlowStatement) -> Decimal



Set: ThreeMonths(self: NetPreferredStockIssuanceCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetPreferredStockIssuanceCashFlowStatement) -> Decimal



Set: TwelveMonths(self: NetPreferredStockIssuanceCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NetPreferredStockIssuanceCashFlowStatement) -> Decimal



Set: TwoMonths(self: NetPreferredStockIssuanceCashFlowStatement) = value

"""

    Store = None


class NetPremiumsWrittenIncomeStatement(MultiPeriodField):
    """
    Net premiums written are gross premiums written less ceded premiums. This item is usually only available for insurance industry.



    NetPremiumsWrittenIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetPremiumsWrittenIncomeStatement) -> Decimal



Set: NineMonths(self: NetPremiumsWrittenIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetPremiumsWrittenIncomeStatement) -> Decimal



Set: SixMonths(self: NetPremiumsWrittenIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetPremiumsWrittenIncomeStatement) -> Decimal



Set: ThreeMonths(self: NetPremiumsWrittenIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetPremiumsWrittenIncomeStatement) -> Decimal



Set: TwelveMonths(self: NetPremiumsWrittenIncomeStatement) = value

"""

    Store = None


class NetProceedsPaymentForLoanCashFlowStatement(MultiPeriodField):
    """
    The net value of proceeds or payments of loans.



    NetProceedsPaymentForLoanCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetProceedsPaymentForLoanCashFlowStatement) -> Decimal



Set: NineMonths(self: NetProceedsPaymentForLoanCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetProceedsPaymentForLoanCashFlowStatement) -> Decimal



Set: SixMonths(self: NetProceedsPaymentForLoanCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetProceedsPaymentForLoanCashFlowStatement) -> Decimal



Set: ThreeMonths(self: NetProceedsPaymentForLoanCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetProceedsPaymentForLoanCashFlowStatement) -> Decimal



Set: TwelveMonths(self: NetProceedsPaymentForLoanCashFlowStatement) = value

"""

    Store = None


class NetRealizedGainLossOnInvestmentsIncomeStatement(MultiPeriodField):
    """
    Gain or loss realized during the period of time for all kinds of investment securities. In might include trading, available-for-sale, or

                held-to-maturity securities. This item is usually only available for insurance industry.



    NetRealizedGainLossOnInvestmentsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetRealizedGainLossOnInvestmentsIncomeStatement) -> Decimal



Set: NineMonths(self: NetRealizedGainLossOnInvestmentsIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetRealizedGainLossOnInvestmentsIncomeStatement) -> Decimal



Set: SixMonths(self: NetRealizedGainLossOnInvestmentsIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetRealizedGainLossOnInvestmentsIncomeStatement) -> Decimal



Set: ThreeMonths(self: NetRealizedGainLossOnInvestmentsIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetRealizedGainLossOnInvestmentsIncomeStatement) -> Decimal



Set: TwelveMonths(self: NetRealizedGainLossOnInvestmentsIncomeStatement) = value

"""

    Store = None


class NetShortTermDebtIssuanceCashFlowStatement(MultiPeriodField):
    """
    The increase or decrease between periods of short term debt.



    NetShortTermDebtIssuanceCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetShortTermDebtIssuanceCashFlowStatement) -> Decimal



Set: NineMonths(self: NetShortTermDebtIssuanceCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NetShortTermDebtIssuanceCashFlowStatement) -> Decimal



Set: OneMonth(self: NetShortTermDebtIssuanceCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetShortTermDebtIssuanceCashFlowStatement) -> Decimal



Set: SixMonths(self: NetShortTermDebtIssuanceCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetShortTermDebtIssuanceCashFlowStatement) -> Decimal



Set: ThreeMonths(self: NetShortTermDebtIssuanceCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetShortTermDebtIssuanceCashFlowStatement) -> Decimal



Set: TwelveMonths(self: NetShortTermDebtIssuanceCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NetShortTermDebtIssuanceCashFlowStatement) -> Decimal



Set: TwoMonths(self: NetShortTermDebtIssuanceCashFlowStatement) = value

"""

    Store = None


class NetTangibleAssetsBalanceSheet(MultiPeriodField):
    """
    Net assets in physical form. This is calculated using Stockholders' Equity less Intangible Assets (including Goodwill).



    NetTangibleAssetsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetTangibleAssetsBalanceSheet) -> Decimal



Set: NineMonths(self: NetTangibleAssetsBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NetTangibleAssetsBalanceSheet) -> Decimal



Set: OneMonth(self: NetTangibleAssetsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NetTangibleAssetsBalanceSheet) -> Decimal



Set: SixMonths(self: NetTangibleAssetsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetTangibleAssetsBalanceSheet) -> Decimal



Set: ThreeMonths(self: NetTangibleAssetsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetTangibleAssetsBalanceSheet) -> Decimal



Set: TwelveMonths(self: NetTangibleAssetsBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NetTangibleAssetsBalanceSheet) -> Decimal



Set: TwoMonths(self: NetTangibleAssetsBalanceSheet) = value

"""

    Store = None


class NetTradingIncomeIncomeStatement(MultiPeriodField):
    """
    Any trading income on the securities.



    NetTradingIncomeIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetTradingIncomeIncomeStatement) -> Decimal



Set: TwelveMonths(self: NetTradingIncomeIncomeStatement) = value

"""

    Store = None


class NetUtilityPlantBalanceSheet(MultiPeriodField):
    """
    Net utility plant might include water production, electric utility plan, natural gas, fuel and other, common utility plant and

                accumulated depreciation. This item is usually only available for utility industry.



    NetUtilityPlantBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NetUtilityPlantBalanceSheet) -> Decimal



Set: NineMonths(self: NetUtilityPlantBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NetUtilityPlantBalanceSheet) -> Decimal



Set: ThreeMonths(self: NetUtilityPlantBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NetUtilityPlantBalanceSheet) -> Decimal



Set: TwelveMonths(self: NetUtilityPlantBalanceSheet) = value

"""

    Store = None


class NonCurrentAccountsReceivableBalanceSheet(MultiPeriodField):
    """
    Accounts receivable represents sums owed to the business that the business records as revenue. Gross accounts receivable is

                accounts receivable before the business deducts uncollectable accounts to calculate the true value of accounts receivable.



    NonCurrentAccountsReceivableBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NonCurrentAccountsReceivableBalanceSheet) -> Decimal



Set: NineMonths(self: NonCurrentAccountsReceivableBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NonCurrentAccountsReceivableBalanceSheet) -> Decimal



Set: SixMonths(self: NonCurrentAccountsReceivableBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NonCurrentAccountsReceivableBalanceSheet) -> Decimal



Set: ThreeMonths(self: NonCurrentAccountsReceivableBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NonCurrentAccountsReceivableBalanceSheet) -> Decimal



Set: TwelveMonths(self: NonCurrentAccountsReceivableBalanceSheet) = value

"""

    Store = None


class NonCurrentAccruedExpensesBalanceSheet(MultiPeriodField):
    """
    An expense that has occurred but the transaction has not been entered in the accounting records. Accordingly, an adjusting entry

                is made to debit the appropriate expense account and to credit a liability account such as accrued expenses payable or accounts

                payable.



    NonCurrentAccruedExpensesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NonCurrentAccruedExpensesBalanceSheet) -> Decimal



Set: NineMonths(self: NonCurrentAccruedExpensesBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NonCurrentAccruedExpensesBalanceSheet) -> Decimal



Set: SixMonths(self: NonCurrentAccruedExpensesBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NonCurrentAccruedExpensesBalanceSheet) -> Decimal



Set: ThreeMonths(self: NonCurrentAccruedExpensesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NonCurrentAccruedExpensesBalanceSheet) -> Decimal



Set: TwelveMonths(self: NonCurrentAccruedExpensesBalanceSheet) = value

"""

    Store = None


class NonCurrentDeferredAssetsBalanceSheet(MultiPeriodField):
    """
    Payments that will be assigned as expenses longer than one accounting period, but that are paid in advance and temporarily set up

                as non-current assets on the balance sheet.



    NonCurrentDeferredAssetsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NonCurrentDeferredAssetsBalanceSheet) -> Decimal



Set: NineMonths(self: NonCurrentDeferredAssetsBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NonCurrentDeferredAssetsBalanceSheet) -> Decimal



Set: OneMonth(self: NonCurrentDeferredAssetsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NonCurrentDeferredAssetsBalanceSheet) -> Decimal



Set: SixMonths(self: NonCurrentDeferredAssetsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NonCurrentDeferredAssetsBalanceSheet) -> Decimal



Set: ThreeMonths(self: NonCurrentDeferredAssetsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NonCurrentDeferredAssetsBalanceSheet) -> Decimal



Set: TwelveMonths(self: NonCurrentDeferredAssetsBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NonCurrentDeferredAssetsBalanceSheet) -> Decimal



Set: TwoMonths(self: NonCurrentDeferredAssetsBalanceSheet) = value

"""

    Store = None


class NonCurrentDeferredLiabilitiesBalanceSheet(MultiPeriodField):
    """
    Represents the non-current portion of obligations, which is a liability that usually would have been paid but is now past due.



    NonCurrentDeferredLiabilitiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NonCurrentDeferredLiabilitiesBalanceSheet) -> Decimal



Set: NineMonths(self: NonCurrentDeferredLiabilitiesBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NonCurrentDeferredLiabilitiesBalanceSheet) -> Decimal



Set: OneMonth(self: NonCurrentDeferredLiabilitiesBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NonCurrentDeferredLiabilitiesBalanceSheet) -> Decimal



Set: SixMonths(self: NonCurrentDeferredLiabilitiesBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NonCurrentDeferredLiabilitiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: NonCurrentDeferredLiabilitiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NonCurrentDeferredLiabilitiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: NonCurrentDeferredLiabilitiesBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NonCurrentDeferredLiabilitiesBalanceSheet) -> Decimal



Set: TwoMonths(self: NonCurrentDeferredLiabilitiesBalanceSheet) = value

"""

    Store = None


class NonCurrentDeferredRevenueBalanceSheet(MultiPeriodField):
    """
    The non-current portion of deferred revenue amount as of the balance sheet date. Deferred revenue is a liability related to revenue

                producing activity for which revenue has not yet been recognized, and is not expected be recognized in the next twelve months.



    NonCurrentDeferredRevenueBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NonCurrentDeferredRevenueBalanceSheet) -> Decimal



Set: NineMonths(self: NonCurrentDeferredRevenueBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NonCurrentDeferredRevenueBalanceSheet) -> Decimal



Set: OneMonth(self: NonCurrentDeferredRevenueBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NonCurrentDeferredRevenueBalanceSheet) -> Decimal



Set: SixMonths(self: NonCurrentDeferredRevenueBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NonCurrentDeferredRevenueBalanceSheet) -> Decimal



Set: ThreeMonths(self: NonCurrentDeferredRevenueBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NonCurrentDeferredRevenueBalanceSheet) -> Decimal



Set: TwelveMonths(self: NonCurrentDeferredRevenueBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NonCurrentDeferredRevenueBalanceSheet) -> Decimal



Set: TwoMonths(self: NonCurrentDeferredRevenueBalanceSheet) = value

"""

    Store = None


class NonCurrentDeferredTaxesAssetsBalanceSheet(MultiPeriodField):
    """
    A result of timing differences between taxable incomes reported on the income statement and taxable income from the company's

                tax return. Depending on the positioning of deferred income taxes, the field may be either current (within current assets) or non-

                current (below total current assets). Typically a company will have two deferred income taxes fields.



    NonCurrentDeferredTaxesAssetsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NonCurrentDeferredTaxesAssetsBalanceSheet) -> Decimal



Set: NineMonths(self: NonCurrentDeferredTaxesAssetsBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NonCurrentDeferredTaxesAssetsBalanceSheet) -> Decimal



Set: OneMonth(self: NonCurrentDeferredTaxesAssetsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NonCurrentDeferredTaxesAssetsBalanceSheet) -> Decimal



Set: SixMonths(self: NonCurrentDeferredTaxesAssetsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NonCurrentDeferredTaxesAssetsBalanceSheet) -> Decimal



Set: ThreeMonths(self: NonCurrentDeferredTaxesAssetsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NonCurrentDeferredTaxesAssetsBalanceSheet) -> Decimal



Set: TwelveMonths(self: NonCurrentDeferredTaxesAssetsBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NonCurrentDeferredTaxesAssetsBalanceSheet) -> Decimal



Set: TwoMonths(self: NonCurrentDeferredTaxesAssetsBalanceSheet) = value

"""

    Store = None


class NonCurrentDeferredTaxesLiabilitiesBalanceSheet(MultiPeriodField):
    """
    The estimated future tax obligations, which usually arise when different accounting methods are used for financial statements and

                tax statement It is also an add-back to the cash flow statement. Deferred income taxes include accumulated tax deferrals due to

                accelerated depreciation and investment credit.



    NonCurrentDeferredTaxesLiabilitiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NonCurrentDeferredTaxesLiabilitiesBalanceSheet) -> Decimal



Set: NineMonths(self: NonCurrentDeferredTaxesLiabilitiesBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NonCurrentDeferredTaxesLiabilitiesBalanceSheet) -> Decimal



Set: OneMonth(self: NonCurrentDeferredTaxesLiabilitiesBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NonCurrentDeferredTaxesLiabilitiesBalanceSheet) -> Decimal



Set: SixMonths(self: NonCurrentDeferredTaxesLiabilitiesBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NonCurrentDeferredTaxesLiabilitiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: NonCurrentDeferredTaxesLiabilitiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NonCurrentDeferredTaxesLiabilitiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: NonCurrentDeferredTaxesLiabilitiesBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NonCurrentDeferredTaxesLiabilitiesBalanceSheet) -> Decimal



Set: TwoMonths(self: NonCurrentDeferredTaxesLiabilitiesBalanceSheet) = value

"""

    Store = None


class NonCurrentNoteReceivablesBalanceSheet(MultiPeriodField):
    """
    An amount representing an agreement for an unconditional promise by the maker to pay the entity (holder) a definite sum of money

                at a future date(s), excluding the portion that is expected to be received within one year of the balance sheet date or the normal

                operating cycle, whichever is longer.



    NonCurrentNoteReceivablesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NonCurrentNoteReceivablesBalanceSheet) -> Decimal



Set: NineMonths(self: NonCurrentNoteReceivablesBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NonCurrentNoteReceivablesBalanceSheet) -> Decimal



Set: SixMonths(self: NonCurrentNoteReceivablesBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NonCurrentNoteReceivablesBalanceSheet) -> Decimal



Set: ThreeMonths(self: NonCurrentNoteReceivablesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NonCurrentNoteReceivablesBalanceSheet) -> Decimal



Set: TwelveMonths(self: NonCurrentNoteReceivablesBalanceSheet) = value

"""

    Store = None


class NonCurrentOtherFinancialLiabilitiesBalanceSheet(MultiPeriodField):
    """
    Other long term financial liabilities not categorized and due over one year or a normal operating cycle (whichever is longer).



    NonCurrentOtherFinancialLiabilitiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NonCurrentOtherFinancialLiabilitiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: NonCurrentOtherFinancialLiabilitiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NonCurrentOtherFinancialLiabilitiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: NonCurrentOtherFinancialLiabilitiesBalanceSheet) = value

"""

    Store = None


class NonCurrentPensionAndOtherPostretirementBenefitPlansBalanceSheet(MultiPeriodField):
    """
    A loan issued by an insurance company that uses the cash value of a person's life insurance policy as collateral.  This item is usually

                only available in the insurance industry.



    NonCurrentPensionAndOtherPostretirementBenefitPlansBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NonCurrentPensionAndOtherPostretirementBenefitPlansBalanceSheet) -> Decimal



Set: NineMonths(self: NonCurrentPensionAndOtherPostretirementBenefitPlansBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NonCurrentPensionAndOtherPostretirementBenefitPlansBalanceSheet) -> Decimal



Set: SixMonths(self: NonCurrentPensionAndOtherPostretirementBenefitPlansBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NonCurrentPensionAndOtherPostretirementBenefitPlansBalanceSheet) -> Decimal



Set: ThreeMonths(self: NonCurrentPensionAndOtherPostretirementBenefitPlansBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NonCurrentPensionAndOtherPostretirementBenefitPlansBalanceSheet) -> Decimal



Set: TwelveMonths(self: NonCurrentPensionAndOtherPostretirementBenefitPlansBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NonCurrentPensionAndOtherPostretirementBenefitPlansBalanceSheet) -> Decimal



Set: TwoMonths(self: NonCurrentPensionAndOtherPostretirementBenefitPlansBalanceSheet) = value

"""

    Store = None


class NonCurrentPrepaidAssetsBalanceSheet(MultiPeriodField):
    """
    Sum of the carrying amounts that are paid in advance for expenses, which will be charged against earnings in periods after one

                year or beyond the operating cycle, if longer.



    NonCurrentPrepaidAssetsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NonCurrentPrepaidAssetsBalanceSheet) -> Decimal



Set: OneMonth(self: NonCurrentPrepaidAssetsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NonCurrentPrepaidAssetsBalanceSheet) -> Decimal



Set: SixMonths(self: NonCurrentPrepaidAssetsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NonCurrentPrepaidAssetsBalanceSheet) -> Decimal



Set: ThreeMonths(self: NonCurrentPrepaidAssetsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NonCurrentPrepaidAssetsBalanceSheet) -> Decimal



Set: TwelveMonths(self: NonCurrentPrepaidAssetsBalanceSheet) = value

"""

    Store = None


class NonInterestBearingBorrowingsCurrentBalanceSheet(MultiPeriodField):
    """
    Non-interest bearing deposits in other financial institutions for short periods of time, usually less than 12 months.



    NonInterestBearingBorrowingsCurrentBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NonInterestBearingBorrowingsCurrentBalanceSheet) -> Decimal



Set: ThreeMonths(self: NonInterestBearingBorrowingsCurrentBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NonInterestBearingBorrowingsCurrentBalanceSheet) -> Decimal



Set: TwelveMonths(self: NonInterestBearingBorrowingsCurrentBalanceSheet) = value

"""

    Store = None


class NonInterestBearingBorrowingsNonCurrentBalanceSheet(MultiPeriodField):
    """
    Non-interest bearing borrowings due after a year.



    NonInterestBearingBorrowingsNonCurrentBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NonInterestBearingBorrowingsNonCurrentBalanceSheet) -> Decimal



Set: ThreeMonths(self: NonInterestBearingBorrowingsNonCurrentBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NonInterestBearingBorrowingsNonCurrentBalanceSheet) -> Decimal



Set: TwelveMonths(self: NonInterestBearingBorrowingsNonCurrentBalanceSheet) = value

"""

    Store = None


class NonInterestBearingBorrowingsTotalBalanceSheet(MultiPeriodField):
    """
    Non-interest bearing deposits in other financial institutions for relatively short periods of time; on a Non-Differentiated Balance

                Sheet.



    NonInterestBearingBorrowingsTotalBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NonInterestBearingBorrowingsTotalBalanceSheet) -> Decimal



Set: ThreeMonths(self: NonInterestBearingBorrowingsTotalBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NonInterestBearingBorrowingsTotalBalanceSheet) -> Decimal



Set: TwelveMonths(self: NonInterestBearingBorrowingsTotalBalanceSheet) = value

"""

    Store = None


class NonInterestBearingDepositsBalanceSheet(MultiPeriodField):
    """
    The aggregate amount of all domestic and foreign deposits in the banks that do not draw interest.



    NonInterestBearingDepositsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NonInterestBearingDepositsBalanceSheet) -> Decimal



Set: NineMonths(self: NonInterestBearingDepositsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NonInterestBearingDepositsBalanceSheet) -> Decimal



Set: SixMonths(self: NonInterestBearingDepositsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NonInterestBearingDepositsBalanceSheet) -> Decimal



Set: ThreeMonths(self: NonInterestBearingDepositsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NonInterestBearingDepositsBalanceSheet) -> Decimal



Set: TwelveMonths(self: NonInterestBearingDepositsBalanceSheet) = value

"""

    Store = None


class NonInterestExpenseIncomeStatement(MultiPeriodField):
    """
    Any expenses that not related to interest. It includes labor and related expense, occupancy and equipment, commission,

                professional expense and contract services expenses, selling, general and administrative, research and development depreciation,

                amortization and depletion, and any other special income/charges.



    NonInterestExpenseIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NonInterestExpenseIncomeStatement) -> Decimal



Set: NineMonths(self: NonInterestExpenseIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NonInterestExpenseIncomeStatement) -> Decimal



Set: OneMonth(self: NonInterestExpenseIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NonInterestExpenseIncomeStatement) -> Decimal



Set: SixMonths(self: NonInterestExpenseIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NonInterestExpenseIncomeStatement) -> Decimal



Set: ThreeMonths(self: NonInterestExpenseIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NonInterestExpenseIncomeStatement) -> Decimal



Set: TwelveMonths(self: NonInterestExpenseIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NonInterestExpenseIncomeStatement) -> Decimal



Set: TwoMonths(self: NonInterestExpenseIncomeStatement) = value

"""

    Store = None


class NonInterestIncomeIncomeStatement(MultiPeriodField):
    """
    The total amount of non-interest income which may be derived from: (1) fees and commissions; (2) premiums earned; (3) equity

                investment; (4) the sale or disposal of assets; and (5) other sources not otherwise specified.



    NonInterestIncomeIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NonInterestIncomeIncomeStatement) -> Decimal



Set: NineMonths(self: NonInterestIncomeIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NonInterestIncomeIncomeStatement) -> Decimal



Set: OneMonth(self: NonInterestIncomeIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NonInterestIncomeIncomeStatement) -> Decimal



Set: SixMonths(self: NonInterestIncomeIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NonInterestIncomeIncomeStatement) -> Decimal



Set: ThreeMonths(self: NonInterestIncomeIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NonInterestIncomeIncomeStatement) -> Decimal



Set: TwelveMonths(self: NonInterestIncomeIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NonInterestIncomeIncomeStatement) -> Decimal



Set: TwoMonths(self: NonInterestIncomeIncomeStatement) = value

"""

    Store = None


class NormalizedBasicEPS(MultiPeriodField):
    """
    The basic normalized earnings per share. Normalized EPS removes onetime and unusual items from EPS, to provide investors with a

                more accurate measure of the company's true earnings. Normalized Earnings / Basic Weighted Average Shares Outstanding.



    NormalizedBasicEPS(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NormalizedBasicEPS) -> Decimal



Set: NineMonths(self: NormalizedBasicEPS) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NormalizedBasicEPS) -> Decimal



Set: OneMonth(self: NormalizedBasicEPS) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NormalizedBasicEPS) -> Decimal



Set: SixMonths(self: NormalizedBasicEPS) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NormalizedBasicEPS) -> Decimal



Set: ThreeMonths(self: NormalizedBasicEPS) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NormalizedBasicEPS) -> Decimal



Set: TwelveMonths(self: NormalizedBasicEPS) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NormalizedBasicEPS) -> Decimal



Set: TwoMonths(self: NormalizedBasicEPS) = value

"""

    Store = None


class NormalizedBasicEPSGrowth(MultiPeriodField):
    """
    The growth in the company's Normalized Basic EPS on a percentage basis.



    NormalizedBasicEPSGrowth(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: NormalizedBasicEPSGrowth) -> Decimal



Set: FiveYears(self: NormalizedBasicEPSGrowth) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: NormalizedBasicEPSGrowth) -> Decimal



Set: OneYear(self: NormalizedBasicEPSGrowth) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NormalizedBasicEPSGrowth) -> Decimal



Set: ThreeMonths(self: NormalizedBasicEPSGrowth) = value

"""

    ThreeYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeYears period value for the field



Get: ThreeYears(self: NormalizedBasicEPSGrowth) -> Decimal



Set: ThreeYears(self: NormalizedBasicEPSGrowth) = value

"""

    Store = None


class NormalizedDilutedEPS(MultiPeriodField):
    """
    The diluted normalized earnings per share. Normalized EPS removes onetime and unusual items from EPS, to provide investors with

                a more accurate measure of the company's true earnings. Normalized Earnings / Diluted Weighted Average Shares Outstanding.



    NormalizedDilutedEPS(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NormalizedDilutedEPS) -> Decimal



Set: NineMonths(self: NormalizedDilutedEPS) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NormalizedDilutedEPS) -> Decimal



Set: OneMonth(self: NormalizedDilutedEPS) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NormalizedDilutedEPS) -> Decimal



Set: SixMonths(self: NormalizedDilutedEPS) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NormalizedDilutedEPS) -> Decimal



Set: ThreeMonths(self: NormalizedDilutedEPS) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NormalizedDilutedEPS) -> Decimal



Set: TwelveMonths(self: NormalizedDilutedEPS) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NormalizedDilutedEPS) -> Decimal



Set: TwoMonths(self: NormalizedDilutedEPS) = value

"""

    Store = None


class NormalizedDilutedEPSGrowth(MultiPeriodField):
    """
    The growth in the company's Normalized Diluted EPS on a percentage basis.



    NormalizedDilutedEPSGrowth(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: NormalizedDilutedEPSGrowth) -> Decimal



Set: FiveYears(self: NormalizedDilutedEPSGrowth) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: NormalizedDilutedEPSGrowth) -> Decimal



Set: OneYear(self: NormalizedDilutedEPSGrowth) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NormalizedDilutedEPSGrowth) -> Decimal



Set: ThreeMonths(self: NormalizedDilutedEPSGrowth) = value

"""

    ThreeYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeYears period value for the field



Get: ThreeYears(self: NormalizedDilutedEPSGrowth) -> Decimal



Set: ThreeYears(self: NormalizedDilutedEPSGrowth) = value

"""

    Store = None


class NormalizedEBITAsReportedIncomeStatement(MultiPeriodField):
    """
    EBIT less Total Unusual Items. This is as reported by the company, may be the same or not the same as Morningstar's standardized

                definition.



    NormalizedEBITAsReportedIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NormalizedEBITAsReportedIncomeStatement) -> Decimal



Set: NineMonths(self: NormalizedEBITAsReportedIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NormalizedEBITAsReportedIncomeStatement) -> Decimal



Set: SixMonths(self: NormalizedEBITAsReportedIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NormalizedEBITAsReportedIncomeStatement) -> Decimal



Set: ThreeMonths(self: NormalizedEBITAsReportedIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NormalizedEBITAsReportedIncomeStatement) -> Decimal



Set: TwelveMonths(self: NormalizedEBITAsReportedIncomeStatement) = value

"""

    Store = None


class NormalizedEBITDAAsReportedIncomeStatement(MultiPeriodField):
    """
    EBITDA less Total Unusual Items. This is as reported by the company, may be the same or not the same as Morningstar's

                standardized definition.



    NormalizedEBITDAAsReportedIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NormalizedEBITDAAsReportedIncomeStatement) -> Decimal



Set: NineMonths(self: NormalizedEBITDAAsReportedIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NormalizedEBITDAAsReportedIncomeStatement) -> Decimal



Set: SixMonths(self: NormalizedEBITDAAsReportedIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NormalizedEBITDAAsReportedIncomeStatement) -> Decimal



Set: ThreeMonths(self: NormalizedEBITDAAsReportedIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NormalizedEBITDAAsReportedIncomeStatement) -> Decimal



Set: TwelveMonths(self: NormalizedEBITDAAsReportedIncomeStatement) = value

"""

    Store = None


class NormalizedEBITDAIncomeStatement(MultiPeriodField):
    """
    EBITDA less Total Unusual Items



    NormalizedEBITDAIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NormalizedEBITDAIncomeStatement) -> Decimal



Set: NineMonths(self: NormalizedEBITDAIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NormalizedEBITDAIncomeStatement) -> Decimal



Set: OneMonth(self: NormalizedEBITDAIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NormalizedEBITDAIncomeStatement) -> Decimal



Set: SixMonths(self: NormalizedEBITDAIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NormalizedEBITDAIncomeStatement) -> Decimal



Set: ThreeMonths(self: NormalizedEBITDAIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NormalizedEBITDAIncomeStatement) -> Decimal



Set: TwelveMonths(self: NormalizedEBITDAIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NormalizedEBITDAIncomeStatement) -> Decimal



Set: TwoMonths(self: NormalizedEBITDAIncomeStatement) = value

"""

    Store = None


class NormalizedIncomeAsReportedIncomeStatement(MultiPeriodField):
    """
    Earnings adjusted for items that are irregular or unusual in nature, and/or are non-recurring. This can be used to fairly measure a

                company's profitability. This is as reported by the company, may be the same or not the same as Morningstar's standardized

                definition.



    NormalizedIncomeAsReportedIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NormalizedIncomeAsReportedIncomeStatement) -> Decimal



Set: NineMonths(self: NormalizedIncomeAsReportedIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NormalizedIncomeAsReportedIncomeStatement) -> Decimal



Set: SixMonths(self: NormalizedIncomeAsReportedIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NormalizedIncomeAsReportedIncomeStatement) -> Decimal



Set: ThreeMonths(self: NormalizedIncomeAsReportedIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NormalizedIncomeAsReportedIncomeStatement) -> Decimal



Set: TwelveMonths(self: NormalizedIncomeAsReportedIncomeStatement) = value

"""

    Store = None


class NormalizedIncomeIncomeStatement(MultiPeriodField):
    """
    This calculation represents earnings adjusted for items that are irregular or unusual in nature, and/or are non-recurring. This can be

                used to fairly measure a company's profitability. This is calculated using Net Income from Continuing Operations plus/minus any tax

                affected unusual Items and Goodwill Impairments/Write Offs.



    NormalizedIncomeIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NormalizedIncomeIncomeStatement) -> Decimal



Set: NineMonths(self: NormalizedIncomeIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NormalizedIncomeIncomeStatement) -> Decimal



Set: OneMonth(self: NormalizedIncomeIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NormalizedIncomeIncomeStatement) -> Decimal



Set: SixMonths(self: NormalizedIncomeIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NormalizedIncomeIncomeStatement) -> Decimal



Set: ThreeMonths(self: NormalizedIncomeIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NormalizedIncomeIncomeStatement) -> Decimal



Set: TwelveMonths(self: NormalizedIncomeIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NormalizedIncomeIncomeStatement) -> Decimal



Set: TwoMonths(self: NormalizedIncomeIncomeStatement) = value

"""

    Store = None


class NormalizedNetProfitMargin(MultiPeriodField):
    """
    Normalized Income / Total Revenue. A measure of profitability of the company calculated by finding Normalized Net Profit as a

                percentage of Total Revenues.



    NormalizedNetProfitMargin(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NormalizedNetProfitMargin) -> Decimal



Set: NineMonths(self: NormalizedNetProfitMargin) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: NormalizedNetProfitMargin) -> Decimal



Set: OneMonth(self: NormalizedNetProfitMargin) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: NormalizedNetProfitMargin) -> Decimal



Set: OneYear(self: NormalizedNetProfitMargin) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NormalizedNetProfitMargin) -> Decimal



Set: SixMonths(self: NormalizedNetProfitMargin) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NormalizedNetProfitMargin) -> Decimal



Set: ThreeMonths(self: NormalizedNetProfitMargin) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: NormalizedNetProfitMargin) -> Decimal



Set: TwoMonths(self: NormalizedNetProfitMargin) = value

"""

    Store = None


class NormalizedOperatingProfitAsReportedIncomeStatement(MultiPeriodField):
    """
    Operating profit adjusted for items that are irregular or unusual in nature, and/or are non-recurring. This can be used to fairly

                measure a company's profitability. This is as reported by the company, may be the same or not the same as Morningstar's

                standardized definition.



    NormalizedOperatingProfitAsReportedIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NormalizedOperatingProfitAsReportedIncomeStatement) -> Decimal



Set: NineMonths(self: NormalizedOperatingProfitAsReportedIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NormalizedOperatingProfitAsReportedIncomeStatement) -> Decimal



Set: SixMonths(self: NormalizedOperatingProfitAsReportedIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NormalizedOperatingProfitAsReportedIncomeStatement) -> Decimal



Set: ThreeMonths(self: NormalizedOperatingProfitAsReportedIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NormalizedOperatingProfitAsReportedIncomeStatement) -> Decimal



Set: TwelveMonths(self: NormalizedOperatingProfitAsReportedIncomeStatement) = value

"""

    Store = None


class NormalizedPreTaxIncomeIncomeStatement(MultiPeriodField):
    """
    This calculation represents pre-tax earnings adjusted for items that are irregular or unusual in nature, and/or are non-recurring. This

                can be used to fairly measure a company's profitability. This is calculated using Pre-Tax Income plus/minus any unusual Items and

                Goodwill Impairments/Write Offs.



    NormalizedPreTaxIncomeIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: NormalizedPreTaxIncomeIncomeStatement) -> Decimal



Set: NineMonths(self: NormalizedPreTaxIncomeIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NormalizedPreTaxIncomeIncomeStatement) -> Decimal



Set: SixMonths(self: NormalizedPreTaxIncomeIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NormalizedPreTaxIncomeIncomeStatement) -> Decimal



Set: ThreeMonths(self: NormalizedPreTaxIncomeIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NormalizedPreTaxIncomeIncomeStatement) -> Decimal



Set: TwelveMonths(self: NormalizedPreTaxIncomeIncomeStatement) = value

"""

    Store = None


class NormalizedROIC(MultiPeriodField):
    """
    [Normalized Income + (Interest Expense * (1-Tax Rate))]  / Invested Capital



    NormalizedROIC(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: NormalizedROIC) -> Decimal



Set: OneYear(self: NormalizedROIC) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NormalizedROIC) -> Decimal



Set: SixMonths(self: NormalizedROIC) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NormalizedROIC) -> Decimal



Set: ThreeMonths(self: NormalizedROIC) = value

"""

    Store = None


class NotesReceivableBalanceSheet(MultiPeriodField):
    """
    An amount representing an agreement for an unconditional promise by the maker to pay the entity (holder) a definite sum of money

                at a future date(s) within one year of the balance sheet date or the normal operating cycle, whichever is longer. Such amount may

                include accrued interest receivable in accordance with the terms of the note. The note also may contain provisions including a

                discount or premium, payable on demand, secured, or unsecured, interest bearing or non-interest bearing, among a myriad of other

                features and characteristics.



    NotesReceivableBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: NotesReceivableBalanceSheet) -> Decimal



Set: SixMonths(self: NotesReceivableBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: NotesReceivableBalanceSheet) -> Decimal



Set: ThreeMonths(self: NotesReceivableBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: NotesReceivableBalanceSheet) -> Decimal



Set: TwelveMonths(self: NotesReceivableBalanceSheet) = value

"""

    Store = None


class OccupancyAndEquipmentIncomeStatement(MultiPeriodField):
    """
    Includes total expenses of occupancy and equipment. This item is usually only available for bank industry.



    OccupancyAndEquipmentIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OccupancyAndEquipmentIncomeStatement) -> Decimal



Set: NineMonths(self: OccupancyAndEquipmentIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OccupancyAndEquipmentIncomeStatement) -> Decimal



Set: SixMonths(self: OccupancyAndEquipmentIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OccupancyAndEquipmentIncomeStatement) -> Decimal



Set: ThreeMonths(self: OccupancyAndEquipmentIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OccupancyAndEquipmentIncomeStatement) -> Decimal



Set: TwelveMonths(self: OccupancyAndEquipmentIncomeStatement) = value

"""

    Store = None


class OperatingCashFlowCashFlowStatement(MultiPeriodField):
    """
    The net cash from (used in) all of the entity's operating activities, including those of discontinued operations, of the reporting entity.

                Operating activities include all transactions and events that are not defined as investing or financing activities. Operating activities

                generally involve producing and delivering goods and providing services. Cash flows from operating activities are generally the cash

                effects of transactions and other events that enter into the determination of net income.



    OperatingCashFlowCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OperatingCashFlowCashFlowStatement) -> Decimal



Set: NineMonths(self: OperatingCashFlowCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: OperatingCashFlowCashFlowStatement) -> Decimal



Set: OneMonth(self: OperatingCashFlowCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OperatingCashFlowCashFlowStatement) -> Decimal



Set: SixMonths(self: OperatingCashFlowCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OperatingCashFlowCashFlowStatement) -> Decimal



Set: ThreeMonths(self: OperatingCashFlowCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OperatingCashFlowCashFlowStatement) -> Decimal



Set: TwelveMonths(self: OperatingCashFlowCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: OperatingCashFlowCashFlowStatement) -> Decimal



Set: TwoMonths(self: OperatingCashFlowCashFlowStatement) = value

"""

    Store = None


class OperatingExpenseAsReportedIncomeStatement(MultiPeriodField):
    """
    Operating expense as reported by the company, may be the same or not the same as Morningstar's standardized definition.



    OperatingExpenseAsReportedIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OperatingExpenseAsReportedIncomeStatement) -> Decimal



Set: NineMonths(self: OperatingExpenseAsReportedIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OperatingExpenseAsReportedIncomeStatement) -> Decimal



Set: SixMonths(self: OperatingExpenseAsReportedIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OperatingExpenseAsReportedIncomeStatement) -> Decimal



Set: ThreeMonths(self: OperatingExpenseAsReportedIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OperatingExpenseAsReportedIncomeStatement) -> Decimal



Set: TwelveMonths(self: OperatingExpenseAsReportedIncomeStatement) = value

"""

    Store = None


class OperatingExpenseIncomeStatement(MultiPeriodField):
    """
    Operating expenses are primary recurring costs associated with central operations (other than cost of goods sold) that are incurred

                in order to generate sales.



    OperatingExpenseIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OperatingExpenseIncomeStatement) -> Decimal



Set: NineMonths(self: OperatingExpenseIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: OperatingExpenseIncomeStatement) -> Decimal



Set: OneMonth(self: OperatingExpenseIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OperatingExpenseIncomeStatement) -> Decimal



Set: SixMonths(self: OperatingExpenseIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OperatingExpenseIncomeStatement) -> Decimal



Set: ThreeMonths(self: OperatingExpenseIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OperatingExpenseIncomeStatement) -> Decimal



Set: TwelveMonths(self: OperatingExpenseIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: OperatingExpenseIncomeStatement) -> Decimal



Set: TwoMonths(self: OperatingExpenseIncomeStatement) = value

"""

    Store = None


class OperatingGainsLossesCashFlowStatement(MultiPeriodField):
    """
    The gain or loss from the entity's ongoing operations.



    OperatingGainsLossesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OperatingGainsLossesCashFlowStatement) -> Decimal



Set: NineMonths(self: OperatingGainsLossesCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: OperatingGainsLossesCashFlowStatement) -> Decimal



Set: OneMonth(self: OperatingGainsLossesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OperatingGainsLossesCashFlowStatement) -> Decimal



Set: SixMonths(self: OperatingGainsLossesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OperatingGainsLossesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: OperatingGainsLossesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OperatingGainsLossesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: OperatingGainsLossesCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: OperatingGainsLossesCashFlowStatement) -> Decimal



Set: TwoMonths(self: OperatingGainsLossesCashFlowStatement) = value

"""

    Store = None


class OperatingIncomeIncomeStatement(MultiPeriodField):
    """
    Income from normal business operations after deducting cost of revenue and operating expenses. It does not include income from

                any investing activities.



    OperatingIncomeIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OperatingIncomeIncomeStatement) -> Decimal



Set: NineMonths(self: OperatingIncomeIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: OperatingIncomeIncomeStatement) -> Decimal



Set: OneMonth(self: OperatingIncomeIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OperatingIncomeIncomeStatement) -> Decimal



Set: SixMonths(self: OperatingIncomeIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OperatingIncomeIncomeStatement) -> Decimal



Set: ThreeMonths(self: OperatingIncomeIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OperatingIncomeIncomeStatement) -> Decimal



Set: TwelveMonths(self: OperatingIncomeIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: OperatingIncomeIncomeStatement) -> Decimal



Set: TwoMonths(self: OperatingIncomeIncomeStatement) = value

"""

    Store = None


class OperatingLeaseAssetsBalanceSheet(MultiPeriodField):
    """
    A contract that allows for the use of an asset, but does not convey rights of ownership of the asset. An operating lease is not

                capitalized; it is accounted for as a rental expense in what is known as "off balance sheet financing." For the lessor, the asset being

                leased is accounted for as an asset and is depreciated as such.



    OperatingLeaseAssetsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OperatingLeaseAssetsBalanceSheet) -> Decimal



Set: ThreeMonths(self: OperatingLeaseAssetsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OperatingLeaseAssetsBalanceSheet) -> Decimal



Set: TwelveMonths(self: OperatingLeaseAssetsBalanceSheet) = value

"""

    Store = None


class OperatingRevenueIncomeStatement(MultiPeriodField):
    """
    Sales and income that the company makes from its business operations. This applies only to non-bank and insurance companies.

                For Utility template companies, this is the sum of revenue from electric, gas, transportation and other operating revenue.

                For Transportation template companies, this is the sum of revenue-passenger, revenue-cargo, and other operating revenue.



    OperatingRevenueIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OperatingRevenueIncomeStatement) -> Decimal



Set: NineMonths(self: OperatingRevenueIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: OperatingRevenueIncomeStatement) -> Decimal



Set: OneMonth(self: OperatingRevenueIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OperatingRevenueIncomeStatement) -> Decimal



Set: SixMonths(self: OperatingRevenueIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OperatingRevenueIncomeStatement) -> Decimal



Set: ThreeMonths(self: OperatingRevenueIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OperatingRevenueIncomeStatement) -> Decimal



Set: TwelveMonths(self: OperatingRevenueIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: OperatingRevenueIncomeStatement) -> Decimal



Set: TwoMonths(self: OperatingRevenueIncomeStatement) = value

"""

    Store = None


class OperationAndMaintenanceIncomeStatement(MultiPeriodField):
    """
    The aggregate amount of operation and maintenance expenses, which is the one important operating expense for the utility

                industry. It includes any costs related to production and maintenance cost of the property during the revenue generation process.

                This item is usually only available for mining and utility industries.



    OperationAndMaintenanceIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OperationAndMaintenanceIncomeStatement) -> Decimal



Set: NineMonths(self: OperationAndMaintenanceIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: OperationAndMaintenanceIncomeStatement) -> Decimal



Set: OneMonth(self: OperationAndMaintenanceIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OperationAndMaintenanceIncomeStatement) -> Decimal



Set: SixMonths(self: OperationAndMaintenanceIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OperationAndMaintenanceIncomeStatement) -> Decimal



Set: ThreeMonths(self: OperationAndMaintenanceIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OperationAndMaintenanceIncomeStatement) -> Decimal



Set: TwelveMonths(self: OperationAndMaintenanceIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: OperationAndMaintenanceIncomeStatement) -> Decimal



Set: TwoMonths(self: OperationAndMaintenanceIncomeStatement) = value

"""

    Store = None


class OperationIncomeGrowth(MultiPeriodField):
    """
    The growth in the company's operating income on a percentage basis. Morningstar calculates the growth percentage based on the

                underlying operating income data reported in the Income Statement within the company filings or reports.



    OperationIncomeGrowth(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: OperationIncomeGrowth) -> Decimal



Set: FiveYears(self: OperationIncomeGrowth) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: OperationIncomeGrowth) -> Decimal



Set: OneYear(self: OperationIncomeGrowth) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OperationIncomeGrowth) -> Decimal



Set: ThreeMonths(self: OperationIncomeGrowth) = value

"""

    ThreeYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeYears period value for the field



Get: ThreeYears(self: OperationIncomeGrowth) -> Decimal



Set: ThreeYears(self: OperationIncomeGrowth) = value

"""

    Store = None


class OperationMargin(MultiPeriodField):
    """
    Refers to the ratio of operating income to revenue. Morningstar calculates the ratio by using the underlying data reported in the

                company filings or reports:   Operating Income / Revenue.



    OperationMargin(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OperationMargin) -> Decimal



Set: NineMonths(self: OperationMargin) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: OperationMargin) -> Decimal



Set: OneMonth(self: OperationMargin) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: OperationMargin) -> Decimal



Set: OneYear(self: OperationMargin) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OperationMargin) -> Decimal



Set: SixMonths(self: OperationMargin) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OperationMargin) -> Decimal



Set: ThreeMonths(self: OperationMargin) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: OperationMargin) -> Decimal



Set: TwoMonths(self: OperationMargin) = value

"""

    Store = None


class OperationRatios(object):
    """
    Definition of the OperationRatios class



    OperationRatios()
    """

    def UpdateValues(self, update):
        """
        UpdateValues(self: OperationRatios, update: OperationRatios)

            Applies updated values from update to this

             instance





            update: The next data update for this instance
        """
        pass

    AssetsTurnover = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Revenue / Average Total Assets



Get: AssetsTurnover(self: OperationRatios) -> AssetsTurnover



Set: AssetsTurnover(self: OperationRatios) = value

"""

    AVG5YrsROIC = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This is the simple average of the company's ROIC over the last 5 years. Return on invested capital is calculated by taking net

            operating profit after taxes and dividends and dividing by the total amount of capital invested and expressing the result as a

            percentage.



Get: AVG5YrsROIC(self: OperationRatios) -> AVG5YrsROIC



Set: AVG5YrsROIC(self: OperationRatios) = value

"""

    CapExGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the company's capital expenditures on a percentage basis. Morningstar calculates the growth percentage based on

            the capital expenditures reported in the Cash Flow Statement within the company filings or reports.



Get: CapExGrowth(self: OperationRatios) -> CapExGrowth



Set: CapExGrowth(self: OperationRatios) = value

"""

    CapExSalesRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Capital Expenditure / Revenue



Get: CapExSalesRatio(self: OperationRatios) -> CapExSalesRatio



Set: CapExSalesRatio(self: OperationRatios) = value

"""

    CapitalExpenditureAnnual5YrGrowth = property(lambda self: object(), lambda self, v: None,
                                                 lambda self: None)  # default
    """This is the compound annual growth rate of the company's capital spending over the last 5 years. Capital Spending is the sum of

            the Capital Expenditure items found in the Statement of Cash Flows.



Get: CapitalExpenditureAnnual5YrGrowth(self: OperationRatios) -> CapitalExpenditureAnnual5YrGrowth



Set: CapitalExpenditureAnnual5YrGrowth(self: OperationRatios) = value

"""

    CapitalExpendituretoEBITDA = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Measures the amount a company is investing in its business relative to EBITDA generated in a given period.



Get: CapitalExpendituretoEBITDA(self: OperationRatios) -> CapitalExpendituretoEBITDA



Set: CapitalExpendituretoEBITDA(self: OperationRatios) = value

"""

    CashConversionCycle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Days In Inventory + Days In Sales - Days In Payment



Get: CashConversionCycle(self: OperationRatios) -> CashConversionCycle



Set: CashConversionCycle(self: OperationRatios) = value

"""

    CashFlowfromFinancingGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the company's cash flows from financing on a percentage basis. Morningstar calculates the growth percentage

            based on the financing cash flows reported in the Cash Flow Statement within the company filings or reports.



Get: CashFlowfromFinancingGrowth(self: OperationRatios) -> CashFlowfromFinancingGrowth



Set: CashFlowfromFinancingGrowth(self: OperationRatios) = value

"""

    CashFlowfromInvestingGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the company's cash flows from investing on a percentage basis. Morningstar calculates the growth percentage

            based on the cash flows from investing reported in the Cash Flow Statement within the company filings or reports.



Get: CashFlowfromInvestingGrowth(self: OperationRatios) -> CashFlowfromInvestingGrowth



Set: CashFlowfromInvestingGrowth(self: OperationRatios) = value

"""

    CashRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates a company's short-term liquidity, defined as short term liquid investments (cash, cash equivalents, short term

            investments) divided by current liabilities.



Get: CashRatio(self: OperationRatios) -> CashRatio



Set: CashRatio(self: OperationRatios) = value

"""

    CashRatioGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the company's cash ratio on a percentage basis. Morningstar calculates the growth percentage based on the short

            term liquid investments (cash, cash equivalents, short term investments) divided by current liabilities reported in the Balance Sheet

            within the company filings or reports.



Get: CashRatioGrowth(self: OperationRatios) -> CashRatioGrowth



Set: CashRatioGrowth(self: OperationRatios) = value

"""

    CashtoTotalAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Represents the percentage of a company's total assets is in cash.



Get: CashtoTotalAssets(self: OperationRatios) -> CashtoTotalAssets



Set: CashtoTotalAssets(self: OperationRatios) = value

"""

    CFOGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the company's cash flow from operations on a percentage basis. Morningstar calculates the growth percentage

            based on the underlying cash flow from operations data reported in the Cash Flow Statement within the company filings or reports.



Get: CFOGrowth(self: OperationRatios) -> CFOGrowth



Set: CFOGrowth(self: OperationRatios) = value

"""

    CommonEquityToAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This is a financial ratio of common stock equity to total assets that indicates the relative proportion of equity used to finance a

            company's assets.



Get: CommonEquityToAssets(self: OperationRatios) -> CommonEquityToAssets



Set: CommonEquityToAssets(self: OperationRatios) = value

"""

    CurrentRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Refers to the ratio of Current Assets to Current Liabilities. Morningstar calculates the ratio by using the underlying data reported in

            the Balance Sheet within the company filings or reports:     Current Assets / Current Liabilities.



Get: CurrentRatio(self: OperationRatios) -> CurrentRatio



Set: CurrentRatio(self: OperationRatios) = value

"""

    CurrentRatioGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the company's current ratio on a percentage basis. Morningstar calculates the growth percentage based on the

            current assets divided by current liabilities reported in the Balance Sheet within the company filings or reports.



Get: CurrentRatioGrowth(self: OperationRatios) -> CurrentRatioGrowth



Set: CurrentRatioGrowth(self: OperationRatios) = value

"""

    DaysInInventory = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """365 / Inventory turnover



Get: DaysInInventory(self: OperationRatios) -> DaysInInventory



Set: DaysInInventory(self: OperationRatios) = value

"""

    DaysInPayment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """365 / Payable turnover



Get: DaysInPayment(self: OperationRatios) -> DaysInPayment



Set: DaysInPayment(self: OperationRatios) = value

"""

    DaysInSales = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """365 / Receivable Turnover



Get: DaysInSales(self: OperationRatios) -> DaysInSales



Set: DaysInSales(self: OperationRatios) = value

"""

    DebttoAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This is a leverage ratio used to determine how much debt (a sum of long term and current portion of debt) a company has on its

            balance sheet relative to total assets. This ratio examines the percent of the company that is financed by debt.



Get: DebttoAssets(self: OperationRatios) -> DebttoAssets



Set: DebttoAssets(self: OperationRatios) = value

"""

    EBITDAGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the company's EBITDA on a percentage basis. Morningstar calculates the growth percentage based on the earnings

            minus expenses (excluding interest, tax, depreciation, and amortization expenses) reported in the Financial Statements within the

            company filings or reports.



Get: EBITDAGrowth(self: OperationRatios) -> EBITDAGrowth



Set: EBITDAGrowth(self: OperationRatios) = value

"""

    EBITDAMargin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Refers to the ratio of earnings before interest, taxes and depreciation and amortization to revenue. Morningstar calculates the ratio

            by using the underlying data reported in the company filings or reports:   EBITDA / Revenue.



Get: EBITDAMargin(self: OperationRatios) -> EBITDAMargin



Set: EBITDAMargin(self: OperationRatios) = value

"""

    EBITMargin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Refers to the ratio of earnings before interest and taxes to revenue. Morningstar calculates the ratio by using the underlying data

            reported in the company filings or reports:   EBIT / Revenue.



Get: EBITMargin(self: OperationRatios) -> EBITMargin



Set: EBITMargin(self: OperationRatios) = value

"""

    ExpenseRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A measure of operating performance for Insurance companies, as it shows the relationship between the premiums earned and

            administrative expenses related to claims such as fees and commissions. A number of 1 or lower is preferred, as this means the

            premiums exceed the expenses. Calculated as: (Deferred Policy Acquisition Amortization Expense+Fees and Commission

            Expense+Other Underwriting Expenses+Selling, General and Administrative) / Net Premiums Earned



Get: ExpenseRatio(self: OperationRatios) -> ExpenseRatio



Set: ExpenseRatio(self: OperationRatios) = value

"""

    FCFGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the company's free cash flow on a percentage basis. Morningstar calculates the growth percentage based on the

            underlying cash flow from operations and capital expenditures data reported in the Cash Flow Statement within the company filings

            or reports:   Free Cash Flow = Cash flow from operations - Capital Expenditures.



Get: FCFGrowth(self: OperationRatios) -> FCFGrowth



Set: FCFGrowth(self: OperationRatios) = value

"""

    FCFNetIncomeRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Free Cash Flow / Net Income



Get: FCFNetIncomeRatio(self: OperationRatios) -> FCFNetIncomeRatio



Set: FCFNetIncomeRatio(self: OperationRatios) = value

"""

    FCFSalesRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Free Cash flow / Revenue



Get: FCFSalesRatio(self: OperationRatios) -> FCFSalesRatio



Set: FCFSalesRatio(self: OperationRatios) = value

"""

    FCFtoCFO = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates the percentage of a company's operating cash flow is free to be invested in its business after capital expenditures.



Get: FCFtoCFO(self: OperationRatios) -> FCFtoCFO



Set: FCFtoCFO(self: OperationRatios) = value

"""

    FinancialLeverage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Refers to the ratio of Total Assets to Common Equity. Morningstar calculates the ratio by using the underlying data reported in the

            Balance Sheet within the company filings or reports:    Total Assets / Common Equity.   [Note: Common Equity = Total

            Shareholder's Equity - Preferred Stock]



Get: FinancialLeverage(self: OperationRatios) -> FinancialLeverage



Set: FinancialLeverage(self: OperationRatios) = value

"""

    FixAssetsTuronver = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Revenue / Average PP&E



Get: FixAssetsTuronver(self: OperationRatios) -> FixAssetsTuronver



Set: FixAssetsTuronver(self: OperationRatios) = value

"""

    GrossMargin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Refers to the ratio of gross profit to revenue. Morningstar calculates the ratio by using the underlying data reported in the company

            filings or reports:   (Revenue - Cost of Goods Sold) / Revenue.



Get: GrossMargin(self: OperationRatios) -> GrossMargin



Set: GrossMargin(self: OperationRatios) = value

"""

    GrossMargin5YrAvg = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This is the simple average of the company's Annual Gross Margin over the last 5 years. Gross Margin is Total Revenue minus Cost

            of Goods Sold divided by Total Revenue and is expressed as a percentage.



Get: GrossMargin5YrAvg(self: OperationRatios) -> GrossMargin5YrAvg



Set: GrossMargin5YrAvg(self: OperationRatios) = value

"""

    GrossProfitAnnual5YrGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This is the compound annual growth rate of the company's Gross Profit over the last 5 years.



Get: GrossProfitAnnual5YrGrowth(self: OperationRatios) -> GrossProfitAnnual5YrGrowth



Set: GrossProfitAnnual5YrGrowth(self: OperationRatios) = value

"""

    InterestCoverage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Refers to the ratio of EBIT to Interest Expense. Morningstar calculates the ratio by using the underlying data reported in the Income

            Statement within the company filings or reports:    EBIT / Interest Expense.



Get: InterestCoverage(self: OperationRatios) -> InterestCoverage



Set: InterestCoverage(self: OperationRatios) = value

"""

    InventoryTurnover = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cost Of Goods Sold / Average Inventory



Get: InventoryTurnover(self: OperationRatios) -> InventoryTurnover



Set: InventoryTurnover(self: OperationRatios) = value

"""

    LongTermDebtEquityRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Refers to the ratio of Long Term Debt to Common Equity. Morningstar calculates the ratio by using the underlying data reported in

            the Balance Sheet within the company filings or reports:    Long-Term Debt And Capital Lease Obligation / Common Equity.

            [Note: Common Equity = Total Shareholder's Equity - Preferred Stock]



Get: LongTermDebtEquityRatio(self: OperationRatios) -> LongTermDebtEquityRatio



Set: LongTermDebtEquityRatio(self: OperationRatios) = value

"""

    LongTermDebtTotalCapitalRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Refers to the ratio of Long Term Debt to Total Capital. Morningstar calculates the ratio by using the underlying data reported in the

            Balance Sheet within the company filings or reports:    Long-Term Debt And Capital Lease Obligation / (Long-Term Debt And Capital

            Lease Obligation + Total Shareholder's Equity)



Get: LongTermDebtTotalCapitalRatio(self: OperationRatios) -> LongTermDebtTotalCapitalRatio



Set: LongTermDebtTotalCapitalRatio(self: OperationRatios) = value

"""

    LossRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A measure of operating performance for Insurance companies, as it shows the relationship between the premiums earned and the

            expenses related to claims. A number of 1 or lower is preferred, as this means the premiums exceed the expenses. Calculated as:

            Benefits, Claims and Loss Adjustment Expense, Net / Net Premiums Earned



Get: LossRatio(self: OperationRatios) -> LossRatio



Set: LossRatio(self: OperationRatios) = value

"""

    NetIncomeContOpsGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the company's net income from continuing operations on a percentage basis. Morningstar calculates the growth

            percentage based on the underlying net income from continuing operations data reported in the Income Statement within the

            company filings or reports. This figure represents the rate of net income growth for parts of the business that will continue to

            generate revenue in the future.



Get: NetIncomeContOpsGrowth(self: OperationRatios) -> NetIncomeContOpsGrowth



Set: NetIncomeContOpsGrowth(self: OperationRatios) = value

"""

    NetIncomeGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the company's net income on a percentage basis. Morningstar calculates the growth percentage based on the

            underlying net income data reported in the Income Statement within the company filings or reports.



Get: NetIncomeGrowth(self: OperationRatios) -> NetIncomeGrowth



Set: NetIncomeGrowth(self: OperationRatios) = value

"""

    NetIncomePerEmployee = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Refers to the ratio of Net Income to Employees. Morningstar calculates the ratio by using the underlying data reported in the

            company filings or reports:     Net Income / Employee Number.



Get: NetIncomePerEmployee(self: OperationRatios) -> NetIncomePerEmployee



Set: NetIncomePerEmployee(self: OperationRatios) = value

"""

    NetMargin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Refers to the ratio of net income to revenue. Morningstar calculates the ratio by using the underlying data reported in the company

            filings or reports:   Net Income / Revenue.



Get: NetMargin(self: OperationRatios) -> NetMargin



Set: NetMargin(self: OperationRatios) = value

"""

    NormalizedNetProfitMargin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Normalized Income / Total Revenue. A measure of profitability of the company calculated by finding Normalized Net Profit as a

            percentage of Total Revenues.



Get: NormalizedNetProfitMargin(self: OperationRatios) -> NormalizedNetProfitMargin



Set: NormalizedNetProfitMargin(self: OperationRatios) = value

"""

    NormalizedROIC = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """[Normalized Income + (Interest Expense * (1-Tax Rate))]  / Invested Capital



Get: NormalizedROIC(self: OperationRatios) -> NormalizedROIC



Set: NormalizedROIC(self: OperationRatios) = value

"""

    OperationIncomeGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the company's operating income on a percentage basis. Morningstar calculates the growth percentage based on the

            underlying operating income data reported in the Income Statement within the company filings or reports.



Get: OperationIncomeGrowth(self: OperationRatios) -> OperationIncomeGrowth



Set: OperationIncomeGrowth(self: OperationRatios) = value

"""

    OperationMargin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Refers to the ratio of operating income to revenue. Morningstar calculates the ratio by using the underlying data reported in the

            company filings or reports:   Operating Income / Revenue.



Get: OperationMargin(self: OperationRatios) -> OperationMargin



Set: OperationMargin(self: OperationRatios) = value

"""

    OperationRevenueGrowth3MonthAvg = property(lambda self: object(), lambda self, v: None,
                                               lambda self: None)  # default
    """The growth in the company's operating revenue on a percentage basis. Morningstar calculates the growth percentage based on

            the underlying operating revenue data reported in the Income Statement within the company filings or reports.



Get: OperationRevenueGrowth3MonthAvg(self: OperationRatios) -> OperationRevenueGrowth3MonthAvg



Set: OperationRevenueGrowth3MonthAvg(self: OperationRatios) = value

"""

    PaymentTurnover = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cost of Goods Sold / Average Accounts Payables



Get: PaymentTurnover(self: OperationRatios) -> PaymentTurnover



Set: PaymentTurnover(self: OperationRatios) = value

"""

    PostTaxMargin5YrAvg = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This is the simple average of the company's Annual Post Tax Margin over the last 5 years. Post tax margin is Post tax divided by

            total revenue for the same period.



Get: PostTaxMargin5YrAvg(self: OperationRatios) -> PostTaxMargin5YrAvg



Set: PostTaxMargin5YrAvg(self: OperationRatios) = value

"""

    PretaxMargin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Refers to the ratio of pretax income to revenue. Morningstar calculates the ratio by using the underlying data reported in the

            company filings or reports:   Pretax Income / Revenue.



Get: PretaxMargin(self: OperationRatios) -> PretaxMargin



Set: PretaxMargin(self: OperationRatios) = value

"""

    PreTaxMargin5YrAvg = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This is the simple average of the company's Annual Pre Tax Margin over the last 5 years. Pre tax margin is Pre tax divided by total

            revenue for the same period.



Get: PreTaxMargin5YrAvg(self: OperationRatios) -> PreTaxMargin5YrAvg



Set: PreTaxMargin5YrAvg(self: OperationRatios) = value

"""

    ProfitMargin5YrAvg = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This is the simple average of the company's Annual Net Profit Margin over the last 5 years. Net profit margin is post tax income

            divided by total revenue for the same period.



Get: ProfitMargin5YrAvg(self: OperationRatios) -> ProfitMargin5YrAvg



Set: ProfitMargin5YrAvg(self: OperationRatios) = value

"""

    QuickRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Refers to the ratio of liquid assets to Current Liabilities. Morningstar calculates the ratio by using the underlying data reported in the

            Balance Sheet within the company filings or reports:(Cash, Cash Equivalents, and Short Term Investments + Receivables ) /

            Current Liabilities.



Get: QuickRatio(self: OperationRatios) -> QuickRatio



Set: QuickRatio(self: OperationRatios) = value

"""

    ReceivableTurnover = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Revenue / Average Accounts Receivables



Get: ReceivableTurnover(self: OperationRatios) -> ReceivableTurnover



Set: ReceivableTurnover(self: OperationRatios) = value

"""

    RegressionGrowthOperatingRevenue5Years = property(lambda self: object(), lambda self, v: None,
                                                      lambda self: None)  # default
    """The five-year growth rate of operating revenue, calculated using regression analysis.



Get: RegressionGrowthOperatingRevenue5Years(self: OperationRatios) -> RegressionGrowthOperatingRevenue5Years



Set: RegressionGrowthOperatingRevenue5Years(self: OperationRatios) = value

"""

    RevenueGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the company's revenue on a percentage basis. Morningstar calculates the growth percentage based on the

            underlying revenue data reported in the Income Statement within the company filings or reports.



Get: RevenueGrowth(self: OperationRatios) -> RevenueGrowth



Set: RevenueGrowth(self: OperationRatios) = value

"""

    ROA = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Net Income / Average Total Assets



Get: ROA(self: OperationRatios) -> ROA



Set: ROA(self: OperationRatios) = value

"""

    ROA5YrAvg = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This is the simple average of the company's ROA over the last 5 years. Return on asset is calculated by dividing a company's annual

            earnings by its average total assets.



Get: ROA5YrAvg(self: OperationRatios) -> ROA5YrAvg



Set: ROA5YrAvg(self: OperationRatios) = value

"""

    ROE = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Net Income / Average Total Common Equity



Get: ROE(self: OperationRatios) -> ROE



Set: ROE(self: OperationRatios) = value

"""

    ROE5YrAvg = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This is the simple average of the company's ROE over the last 5 years. Return on equity reveals how much profit a company has

            earned in comparison to the total amount of shareholder equity found on the balance sheet.



Get: ROE5YrAvg(self: OperationRatios) -> ROE5YrAvg



Set: ROE5YrAvg(self: OperationRatios) = value

"""

    ROIC = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Net Income / (Total Equity + Long-term Debt and Capital Lease Obligation + Short-term Debt and Capital Lease Obligation)



Get: ROIC(self: OperationRatios) -> ROIC



Set: ROIC(self: OperationRatios) = value

"""

    SalesPerEmployee = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Refers to the ratio of Revenue to Employees. Morningstar calculates the ratio by using the underlying data reported in the company

            filings or reports:     Revenue / Employee Number.



Get: SalesPerEmployee(self: OperationRatios) -> SalesPerEmployee



Set: SalesPerEmployee(self: OperationRatios) = value

"""

    SolvencyRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Measure of whether a company's cash flow is sufficient to meet its short-term and long-term debt requirements. The lower this

            ratio is, the greater the probability that the company will be in financial distress. Net Income + Depreciation, Depletion and

            Amortization/ average of annual Total Liabilities over the most recent two periods.



Get: SolvencyRatio(self: OperationRatios) -> SolvencyRatio



Set: SolvencyRatio(self: OperationRatios) = value

"""

    StockholdersEquityGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the stockholder's equity on a percentage basis. Morningstar calculates the growth percentage based on the residual

            interest in the assets of the enterprise that remains after deducting its liabilities reported in the Balance Sheet within the company

            filings or reports.



Get: StockholdersEquityGrowth(self: OperationRatios) -> StockholdersEquityGrowth



Set: StockholdersEquityGrowth(self: OperationRatios) = value

"""

    TaxRate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Refers to the ratio of tax provision to pretax income. Morningstar calculates the ratio by using the underlying data reported in the

            company filings or reports:   Tax Provision / Pretax Income.

            [Note: Valid only when positive pretax income, and positive tax expense (not tax benefit)]



Get: TaxRate(self: OperationRatios) -> TaxRate



Set: TaxRate(self: OperationRatios) = value

"""

    TotalAssetsGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the total assets on a percentage basis. Morningstar calculates the growth percentage based on the total assets

            reported in the Balance Sheet within the company filings or reports.



Get: TotalAssetsGrowth(self: OperationRatios) -> TotalAssetsGrowth



Set: TotalAssetsGrowth(self: OperationRatios) = value

"""

    TotalDebtEquityRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Refers to the ratio of Total Debt to Common Equity. Morningstar calculates the ratio by using the underlying data reported in the

            Balance Sheet within the company filings or reports: (Current Debt And Current Capital Lease Obligation + Long-Term Debt And

            Long-Term Capital Lease Obligation / Common Equity.   [Note: Common Equity = Total Shareholder's Equity - Preferred Stock]



Get: TotalDebtEquityRatio(self: OperationRatios) -> TotalDebtEquityRatio



Set: TotalDebtEquityRatio(self: OperationRatios) = value

"""

    TotalDebtEquityRatioGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the company's total debt to equity ratio on a percentage basis. Morningstar calculates the growth percentage based

            on the total debt divided by the shareholder's equity reported in the Balance Sheet within the company filings or reports.



Get: TotalDebtEquityRatioGrowth(self: OperationRatios) -> TotalDebtEquityRatioGrowth



Set: TotalDebtEquityRatioGrowth(self: OperationRatios) = value

"""

    TotalLiabilitiesGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the total liabilities on a percentage basis. Morningstar calculates the growth percentage based on the total liabilities

            reported in the Balance Sheet within the company filings or reports.



Get: TotalLiabilitiesGrowth(self: OperationRatios) -> TotalLiabilitiesGrowth



Set: TotalLiabilitiesGrowth(self: OperationRatios) = value

"""

    WorkingCapitalTurnoverRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Total revenue / working capital (current assets minus current liabilities)



Get: WorkingCapitalTurnoverRatio(self: OperationRatios) -> WorkingCapitalTurnoverRatio



Set: WorkingCapitalTurnoverRatio(self: OperationRatios) = value

"""


class OperationRevenueGrowth3MonthAvg(MultiPeriodField):
    """
    The growth in the company's operating revenue on a percentage basis. Morningstar calculates the growth percentage based on

                the underlying operating revenue data reported in the Income Statement within the company filings or reports.



    OperationRevenueGrowth3MonthAvg(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: OperationRevenueGrowth3MonthAvg) -> Decimal



Set: FiveYears(self: OperationRevenueGrowth3MonthAvg) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: OperationRevenueGrowth3MonthAvg) -> Decimal



Set: OneYear(self: OperationRevenueGrowth3MonthAvg) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OperationRevenueGrowth3MonthAvg) -> Decimal



Set: ThreeMonths(self: OperationRevenueGrowth3MonthAvg) = value

"""

    ThreeYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeYears period value for the field



Get: ThreeYears(self: OperationRevenueGrowth3MonthAvg) -> Decimal



Set: ThreeYears(self: OperationRevenueGrowth3MonthAvg) = value

"""

    Store = None


class OrdinarySharesNumberBalanceSheet(MultiPeriodField):
    """
    Number of Common or Ordinary Shares.



    OrdinarySharesNumberBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OrdinarySharesNumberBalanceSheet) -> Decimal



Set: ThreeMonths(self: OrdinarySharesNumberBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OrdinarySharesNumberBalanceSheet) -> Decimal



Set: TwelveMonths(self: OrdinarySharesNumberBalanceSheet) = value

"""

    Store = None


class OtherAssetsBalanceSheet(MultiPeriodField):
    """
    Other non-current assets that are not otherwise classified.



    OtherAssetsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherAssetsBalanceSheet) -> Decimal



Set: NineMonths(self: OtherAssetsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherAssetsBalanceSheet) -> Decimal



Set: SixMonths(self: OtherAssetsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherAssetsBalanceSheet) -> Decimal



Set: ThreeMonths(self: OtherAssetsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherAssetsBalanceSheet) -> Decimal



Set: TwelveMonths(self: OtherAssetsBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: OtherAssetsBalanceSheet) -> Decimal



Set: TwoMonths(self: OtherAssetsBalanceSheet) = value

"""

    Store = None


class OtherBorrowedFundsBalanceSheet(MultiPeriodField):
    """
    Other borrowings by the bank to fund its activities that cannot be identified by other specific items in the Liabilities section.



    OtherBorrowedFundsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherBorrowedFundsBalanceSheet) -> Decimal



Set: ThreeMonths(self: OtherBorrowedFundsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherBorrowedFundsBalanceSheet) -> Decimal



Set: TwelveMonths(self: OtherBorrowedFundsBalanceSheet) = value

"""

    Store = None


class OtherCapitalStockBalanceSheet(MultiPeriodField):
    """
    Other Capital Stock that is not otherwise classified.



    OtherCapitalStockBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherCapitalStockBalanceSheet) -> Decimal



Set: NineMonths(self: OtherCapitalStockBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: OtherCapitalStockBalanceSheet) -> Decimal



Set: OneMonth(self: OtherCapitalStockBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherCapitalStockBalanceSheet) -> Decimal



Set: ThreeMonths(self: OtherCapitalStockBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherCapitalStockBalanceSheet) -> Decimal



Set: TwelveMonths(self: OtherCapitalStockBalanceSheet) = value

"""

    Store = None


class OtherCashAdjustExcludeFromChangeinCashCashFlowStatement(MultiPeriodField):
    """
    Other changes to cash and cash equivalents during the accounting PeriodAsByte.



    OtherCashAdjustExcludeFromChangeinCashCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherCashAdjustExcludeFromChangeinCashCashFlowStatement) -> Decimal



Set: NineMonths(self: OtherCashAdjustExcludeFromChangeinCashCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherCashAdjustExcludeFromChangeinCashCashFlowStatement) -> Decimal



Set: SixMonths(self: OtherCashAdjustExcludeFromChangeinCashCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherCashAdjustExcludeFromChangeinCashCashFlowStatement) -> Decimal



Set: ThreeMonths(self: OtherCashAdjustExcludeFromChangeinCashCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherCashAdjustExcludeFromChangeinCashCashFlowStatement) -> Decimal



Set: TwelveMonths(self: OtherCashAdjustExcludeFromChangeinCashCashFlowStatement) = value

"""

    Store = None


class OtherCashAdjustIncludedIntoChangeinCashCashFlowStatement(MultiPeriodField):
    """
    Other cash adjustments included in change in cash not categorized above.



    OtherCashAdjustIncludedIntoChangeinCashCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherCashAdjustIncludedIntoChangeinCashCashFlowStatement) -> Decimal



Set: NineMonths(self: OtherCashAdjustIncludedIntoChangeinCashCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherCashAdjustIncludedIntoChangeinCashCashFlowStatement) -> Decimal



Set: SixMonths(self: OtherCashAdjustIncludedIntoChangeinCashCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherCashAdjustIncludedIntoChangeinCashCashFlowStatement) -> Decimal



Set: ThreeMonths(self: OtherCashAdjustIncludedIntoChangeinCashCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherCashAdjustIncludedIntoChangeinCashCashFlowStatement) -> Decimal



Set: TwelveMonths(self: OtherCashAdjustIncludedIntoChangeinCashCashFlowStatement) = value

"""

    Store = None


class OtherCashPaymentsfromOperatingActivitiesCashFlowStatement(MultiPeriodField):
    """
    Other cash payments for the direct cash flow.



    OtherCashPaymentsfromOperatingActivitiesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherCashPaymentsfromOperatingActivitiesCashFlowStatement) -> Decimal



Set: NineMonths(self: OtherCashPaymentsfromOperatingActivitiesCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: OtherCashPaymentsfromOperatingActivitiesCashFlowStatement) -> Decimal



Set: OneMonth(self: OtherCashPaymentsfromOperatingActivitiesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherCashPaymentsfromOperatingActivitiesCashFlowStatement) -> Decimal



Set: SixMonths(self: OtherCashPaymentsfromOperatingActivitiesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherCashPaymentsfromOperatingActivitiesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: OtherCashPaymentsfromOperatingActivitiesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherCashPaymentsfromOperatingActivitiesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: OtherCashPaymentsfromOperatingActivitiesCashFlowStatement) = value

"""

    Store = None


class OtherCashReceiptsfromOperatingActivitiesCashFlowStatement(MultiPeriodField):
    """
    Other cash receipts for the direct cash flow.



    OtherCashReceiptsfromOperatingActivitiesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherCashReceiptsfromOperatingActivitiesCashFlowStatement) -> Decimal



Set: NineMonths(self: OtherCashReceiptsfromOperatingActivitiesCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: OtherCashReceiptsfromOperatingActivitiesCashFlowStatement) -> Decimal



Set: OneMonth(self: OtherCashReceiptsfromOperatingActivitiesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherCashReceiptsfromOperatingActivitiesCashFlowStatement) -> Decimal



Set: SixMonths(self: OtherCashReceiptsfromOperatingActivitiesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherCashReceiptsfromOperatingActivitiesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: OtherCashReceiptsfromOperatingActivitiesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherCashReceiptsfromOperatingActivitiesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: OtherCashReceiptsfromOperatingActivitiesCashFlowStatement) = value

"""

    Store = None


class OtherCostofRevenueIncomeStatement(MultiPeriodField):
    """
    Other costs associated with the revenue-generating activities of the company not categorized above.



    OtherCostofRevenueIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherCostofRevenueIncomeStatement) -> Decimal



Set: NineMonths(self: OtherCostofRevenueIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherCostofRevenueIncomeStatement) -> Decimal



Set: SixMonths(self: OtherCostofRevenueIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherCostofRevenueIncomeStatement) -> Decimal



Set: ThreeMonths(self: OtherCostofRevenueIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherCostofRevenueIncomeStatement) -> Decimal



Set: TwelveMonths(self: OtherCostofRevenueIncomeStatement) = value

"""

    Store = None


class OtherCurrentAssetsBalanceSheet(MultiPeriodField):
    """
    Other current assets that are not otherwise classified.



    OtherCurrentAssetsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherCurrentAssetsBalanceSheet) -> Decimal



Set: NineMonths(self: OtherCurrentAssetsBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: OtherCurrentAssetsBalanceSheet) -> Decimal



Set: OneMonth(self: OtherCurrentAssetsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherCurrentAssetsBalanceSheet) -> Decimal



Set: SixMonths(self: OtherCurrentAssetsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherCurrentAssetsBalanceSheet) -> Decimal



Set: ThreeMonths(self: OtherCurrentAssetsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherCurrentAssetsBalanceSheet) -> Decimal



Set: TwelveMonths(self: OtherCurrentAssetsBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: OtherCurrentAssetsBalanceSheet) -> Decimal



Set: TwoMonths(self: OtherCurrentAssetsBalanceSheet) = value

"""

    Store = None


class OtherCurrentBorrowingsBalanceSheet(MultiPeriodField):
    """
    Short Term Borrowings that are not otherwise classified.



    OtherCurrentBorrowingsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherCurrentBorrowingsBalanceSheet) -> Decimal



Set: NineMonths(self: OtherCurrentBorrowingsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherCurrentBorrowingsBalanceSheet) -> Decimal



Set: SixMonths(self: OtherCurrentBorrowingsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherCurrentBorrowingsBalanceSheet) -> Decimal



Set: ThreeMonths(self: OtherCurrentBorrowingsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherCurrentBorrowingsBalanceSheet) -> Decimal



Set: TwelveMonths(self: OtherCurrentBorrowingsBalanceSheet) = value

"""

    Store = None


class OtherCurrentLiabilitiesBalanceSheet(MultiPeriodField):
    """
    Other current liabilities = Total current liabilities - Payables and accrued Expenses - Current debt and capital lease obligation -

                provisions, current - deferred liabilities, current.



    OtherCurrentLiabilitiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherCurrentLiabilitiesBalanceSheet) -> Decimal



Set: NineMonths(self: OtherCurrentLiabilitiesBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: OtherCurrentLiabilitiesBalanceSheet) -> Decimal



Set: OneMonth(self: OtherCurrentLiabilitiesBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherCurrentLiabilitiesBalanceSheet) -> Decimal



Set: SixMonths(self: OtherCurrentLiabilitiesBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherCurrentLiabilitiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: OtherCurrentLiabilitiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherCurrentLiabilitiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: OtherCurrentLiabilitiesBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: OtherCurrentLiabilitiesBalanceSheet) -> Decimal



Set: TwoMonths(self: OtherCurrentLiabilitiesBalanceSheet) = value

"""

    Store = None


class OtherCustomerServicesIncomeStatement(MultiPeriodField):
    """
    Represents fees and commissions earned from provide other services. This item is usually only available for bank industry.



    OtherCustomerServicesIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherCustomerServicesIncomeStatement) -> Decimal



Set: NineMonths(self: OtherCustomerServicesIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: OtherCustomerServicesIncomeStatement) -> Decimal



Set: OneMonth(self: OtherCustomerServicesIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherCustomerServicesIncomeStatement) -> Decimal



Set: SixMonths(self: OtherCustomerServicesIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherCustomerServicesIncomeStatement) -> Decimal



Set: ThreeMonths(self: OtherCustomerServicesIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherCustomerServicesIncomeStatement) -> Decimal



Set: TwelveMonths(self: OtherCustomerServicesIncomeStatement) = value

"""

    Store = None


class OtherEquityAdjustmentsBalanceSheet(MultiPeriodField):
    """
    Other adjustments to stockholders' equity that is not otherwise classified, including other reserves.



    OtherEquityAdjustmentsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherEquityAdjustmentsBalanceSheet) -> Decimal



Set: SixMonths(self: OtherEquityAdjustmentsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherEquityAdjustmentsBalanceSheet) -> Decimal



Set: ThreeMonths(self: OtherEquityAdjustmentsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherEquityAdjustmentsBalanceSheet) -> Decimal



Set: TwelveMonths(self: OtherEquityAdjustmentsBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: OtherEquityAdjustmentsBalanceSheet) -> Decimal



Set: TwoMonths(self: OtherEquityAdjustmentsBalanceSheet) = value

"""

    Store = None


class OtherEquityInterestBalanceSheet(MultiPeriodField):
    """
    Other equity instruments issued by the company that cannot be identified by other specific items in the Equity section.



    OtherEquityInterestBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherEquityInterestBalanceSheet) -> Decimal



Set: ThreeMonths(self: OtherEquityInterestBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherEquityInterestBalanceSheet) -> Decimal



Set: TwelveMonths(self: OtherEquityInterestBalanceSheet) = value

"""

    Store = None


class OtherFinancialLiabilitiesBalanceSheet(MultiPeriodField):
    """
    Other financial liabilities not categorized.



    OtherFinancialLiabilitiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherFinancialLiabilitiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: OtherFinancialLiabilitiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherFinancialLiabilitiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: OtherFinancialLiabilitiesBalanceSheet) = value

"""

    Store = None


class OtherGAIncomeStatement(MultiPeriodField):
    """
    Other General and Administrative Expenses not categorized that the company incurs that are not directly tied to a specific function

                such as manufacturing, production, or sales.



    OtherGAIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherGAIncomeStatement) -> Decimal



Set: NineMonths(self: OtherGAIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherGAIncomeStatement) -> Decimal



Set: SixMonths(self: OtherGAIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherGAIncomeStatement) -> Decimal



Set: ThreeMonths(self: OtherGAIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherGAIncomeStatement) -> Decimal



Set: TwelveMonths(self: OtherGAIncomeStatement) = value

"""

    Store = None


class OtherIncomeExpenseIncomeStatement(MultiPeriodField):
    """
    Income or expense that comes from miscellaneous sources.



    OtherIncomeExpenseIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherIncomeExpenseIncomeStatement) -> Decimal



Set: NineMonths(self: OtherIncomeExpenseIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: OtherIncomeExpenseIncomeStatement) -> Decimal



Set: OneMonth(self: OtherIncomeExpenseIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherIncomeExpenseIncomeStatement) -> Decimal



Set: SixMonths(self: OtherIncomeExpenseIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherIncomeExpenseIncomeStatement) -> Decimal



Set: ThreeMonths(self: OtherIncomeExpenseIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherIncomeExpenseIncomeStatement) -> Decimal



Set: TwelveMonths(self: OtherIncomeExpenseIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: OtherIncomeExpenseIncomeStatement) -> Decimal



Set: TwoMonths(self: OtherIncomeExpenseIncomeStatement) = value

"""

    Store = None


class OtherIntangibleAssetsBalanceSheet(MultiPeriodField):
    """
    Sum of the carrying amounts of all intangible assets, excluding goodwill.



    OtherIntangibleAssetsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherIntangibleAssetsBalanceSheet) -> Decimal



Set: NineMonths(self: OtherIntangibleAssetsBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: OtherIntangibleAssetsBalanceSheet) -> Decimal



Set: OneMonth(self: OtherIntangibleAssetsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherIntangibleAssetsBalanceSheet) -> Decimal



Set: SixMonths(self: OtherIntangibleAssetsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherIntangibleAssetsBalanceSheet) -> Decimal



Set: ThreeMonths(self: OtherIntangibleAssetsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherIntangibleAssetsBalanceSheet) -> Decimal



Set: TwelveMonths(self: OtherIntangibleAssetsBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: OtherIntangibleAssetsBalanceSheet) -> Decimal



Set: TwoMonths(self: OtherIntangibleAssetsBalanceSheet) = value

"""

    Store = None


class OtherInterestExpenseIncomeStatement(MultiPeriodField):
    """
    All other interest expense that is not otherwise classified



    OtherInterestExpenseIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherInterestExpenseIncomeStatement) -> Decimal



Set: NineMonths(self: OtherInterestExpenseIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: OtherInterestExpenseIncomeStatement) -> Decimal



Set: OneMonth(self: OtherInterestExpenseIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherInterestExpenseIncomeStatement) -> Decimal



Set: SixMonths(self: OtherInterestExpenseIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherInterestExpenseIncomeStatement) -> Decimal



Set: ThreeMonths(self: OtherInterestExpenseIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherInterestExpenseIncomeStatement) -> Decimal



Set: TwelveMonths(self: OtherInterestExpenseIncomeStatement) = value

"""

    Store = None


class OtherInterestIncomeIncomeStatement(MultiPeriodField):
    """
    All other interest income that is not otherwise classified



    OtherInterestIncomeIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherInterestIncomeIncomeStatement) -> Decimal



Set: NineMonths(self: OtherInterestIncomeIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: OtherInterestIncomeIncomeStatement) -> Decimal



Set: OneMonth(self: OtherInterestIncomeIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherInterestIncomeIncomeStatement) -> Decimal



Set: SixMonths(self: OtherInterestIncomeIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherInterestIncomeIncomeStatement) -> Decimal



Set: ThreeMonths(self: OtherInterestIncomeIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherInterestIncomeIncomeStatement) -> Decimal



Set: TwelveMonths(self: OtherInterestIncomeIncomeStatement) = value

"""

    Store = None


class OtherInventoriesBalanceSheet(MultiPeriodField):
    """
    Other non-current inventories not otherwise classified.



    OtherInventoriesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherInventoriesBalanceSheet) -> Decimal



Set: NineMonths(self: OtherInventoriesBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: OtherInventoriesBalanceSheet) -> Decimal



Set: OneMonth(self: OtherInventoriesBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherInventoriesBalanceSheet) -> Decimal



Set: SixMonths(self: OtherInventoriesBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherInventoriesBalanceSheet) -> Decimal



Set: ThreeMonths(self: OtherInventoriesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherInventoriesBalanceSheet) -> Decimal



Set: TwelveMonths(self: OtherInventoriesBalanceSheet) = value

"""

    Store = None


class OtherInvestedAssetsBalanceSheet(MultiPeriodField):
    """
    An item represents all the other investments or/and securities that cannot be defined into any category above. This item is typically

                available for the insurance industry.



    OtherInvestedAssetsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherInvestedAssetsBalanceSheet) -> Decimal



Set: ThreeMonths(self: OtherInvestedAssetsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherInvestedAssetsBalanceSheet) -> Decimal



Set: TwelveMonths(self: OtherInvestedAssetsBalanceSheet) = value

"""

    Store = None


class OtherInvestmentsBalanceSheet(MultiPeriodField):
    """
    Investments that are neither Investment in Financial Assets nor Long term equity investment, not expected to be cashed within a

                year.



    OtherInvestmentsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherInvestmentsBalanceSheet) -> Decimal



Set: ThreeMonths(self: OtherInvestmentsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherInvestmentsBalanceSheet) -> Decimal



Set: TwelveMonths(self: OtherInvestmentsBalanceSheet) = value

"""

    Store = None


class OtherLiabilitiesBalanceSheet(MultiPeriodField):
    """
    This item is available for bank and insurance industries.



    OtherLiabilitiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherLiabilitiesBalanceSheet) -> Decimal



Set: NineMonths(self: OtherLiabilitiesBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherLiabilitiesBalanceSheet) -> Decimal



Set: SixMonths(self: OtherLiabilitiesBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherLiabilitiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: OtherLiabilitiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherLiabilitiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: OtherLiabilitiesBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: OtherLiabilitiesBalanceSheet) -> Decimal



Set: TwoMonths(self: OtherLiabilitiesBalanceSheet) = value

"""

    Store = None


class OtherLoanAssetsBalanceSheet(MultiPeriodField):
    """
    Reflects the carrying amount of any other unpaid loans, an asset of the bank.



    OtherLoanAssetsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherLoanAssetsBalanceSheet) -> Decimal



Set: ThreeMonths(self: OtherLoanAssetsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherLoanAssetsBalanceSheet) -> Decimal



Set: TwelveMonths(self: OtherLoanAssetsBalanceSheet) = value

"""

    Store = None


class OtherLoansCurrentBalanceSheet(MultiPeriodField):
    """
    Other loans between the customer and bank which cannot be identified by other specific items in the Debt section, due within the

                next 12 months or operating cycle.



    OtherLoansCurrentBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherLoansCurrentBalanceSheet) -> Decimal



Set: ThreeMonths(self: OtherLoansCurrentBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherLoansCurrentBalanceSheet) -> Decimal



Set: TwelveMonths(self: OtherLoansCurrentBalanceSheet) = value

"""

    Store = None


class OtherLoansNonCurrentBalanceSheet(MultiPeriodField):
    """
    Other loans between the customer and bank which cannot be identified by other specific items in the Debt section, due beyond the

                current operating cycle.



    OtherLoansNonCurrentBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherLoansNonCurrentBalanceSheet) -> Decimal



Set: ThreeMonths(self: OtherLoansNonCurrentBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherLoansNonCurrentBalanceSheet) -> Decimal



Set: TwelveMonths(self: OtherLoansNonCurrentBalanceSheet) = value

"""

    Store = None


class OtherLoansTotalBalanceSheet(MultiPeriodField):
    """
    Total other loans between the customer and bank which cannot be identified by other specific items in the Debt section; in a Non-

                Differentiated Balance Sheet.



    OtherLoansTotalBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherLoansTotalBalanceSheet) -> Decimal



Set: ThreeMonths(self: OtherLoansTotalBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherLoansTotalBalanceSheet) -> Decimal



Set: TwelveMonths(self: OtherLoansTotalBalanceSheet) = value

"""

    Store = None


class OtherNonCashItemsCashFlowStatement(MultiPeriodField):
    """
    Items which adjusted back from net income but without real cash outflow or inflow.



    OtherNonCashItemsCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherNonCashItemsCashFlowStatement) -> Decimal



Set: NineMonths(self: OtherNonCashItemsCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: OtherNonCashItemsCashFlowStatement) -> Decimal



Set: OneMonth(self: OtherNonCashItemsCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherNonCashItemsCashFlowStatement) -> Decimal



Set: SixMonths(self: OtherNonCashItemsCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherNonCashItemsCashFlowStatement) -> Decimal



Set: ThreeMonths(self: OtherNonCashItemsCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherNonCashItemsCashFlowStatement) -> Decimal



Set: TwelveMonths(self: OtherNonCashItemsCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: OtherNonCashItemsCashFlowStatement) -> Decimal



Set: TwoMonths(self: OtherNonCashItemsCashFlowStatement) = value

"""

    Store = None


class OtherNonCurrentAssetsBalanceSheet(MultiPeriodField):
    """
    Other non-current assets that are not otherwise classified.



    OtherNonCurrentAssetsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherNonCurrentAssetsBalanceSheet) -> Decimal



Set: NineMonths(self: OtherNonCurrentAssetsBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: OtherNonCurrentAssetsBalanceSheet) -> Decimal



Set: OneMonth(self: OtherNonCurrentAssetsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherNonCurrentAssetsBalanceSheet) -> Decimal



Set: SixMonths(self: OtherNonCurrentAssetsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherNonCurrentAssetsBalanceSheet) -> Decimal



Set: ThreeMonths(self: OtherNonCurrentAssetsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherNonCurrentAssetsBalanceSheet) -> Decimal



Set: TwelveMonths(self: OtherNonCurrentAssetsBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: OtherNonCurrentAssetsBalanceSheet) -> Decimal



Set: TwoMonths(self: OtherNonCurrentAssetsBalanceSheet) = value

"""

    Store = None


class OtherNonCurrentLiabilitiesBalanceSheet(MultiPeriodField):
    """
    This item is usually not available for bank and insurance industries.



    OtherNonCurrentLiabilitiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherNonCurrentLiabilitiesBalanceSheet) -> Decimal



Set: NineMonths(self: OtherNonCurrentLiabilitiesBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: OtherNonCurrentLiabilitiesBalanceSheet) -> Decimal



Set: OneMonth(self: OtherNonCurrentLiabilitiesBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherNonCurrentLiabilitiesBalanceSheet) -> Decimal



Set: SixMonths(self: OtherNonCurrentLiabilitiesBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherNonCurrentLiabilitiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: OtherNonCurrentLiabilitiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherNonCurrentLiabilitiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: OtherNonCurrentLiabilitiesBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: OtherNonCurrentLiabilitiesBalanceSheet) -> Decimal



Set: TwoMonths(self: OtherNonCurrentLiabilitiesBalanceSheet) = value

"""

    Store = None


class OtherNonInterestExpenseIncomeStatement(MultiPeriodField):
    """
    All other non interest expense that is not otherwise classified



    OtherNonInterestExpenseIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherNonInterestExpenseIncomeStatement) -> Decimal



Set: NineMonths(self: OtherNonInterestExpenseIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: OtherNonInterestExpenseIncomeStatement) -> Decimal



Set: OneMonth(self: OtherNonInterestExpenseIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherNonInterestExpenseIncomeStatement) -> Decimal



Set: SixMonths(self: OtherNonInterestExpenseIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherNonInterestExpenseIncomeStatement) -> Decimal



Set: ThreeMonths(self: OtherNonInterestExpenseIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherNonInterestExpenseIncomeStatement) -> Decimal



Set: TwelveMonths(self: OtherNonInterestExpenseIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: OtherNonInterestExpenseIncomeStatement) -> Decimal



Set: TwoMonths(self: OtherNonInterestExpenseIncomeStatement) = value

"""

    Store = None


class OtherNonInterestIncomeIncomeStatement(MultiPeriodField):
    """
    Usually available for the banking industry.  This is Non-Interest Income that is not otherwise classified.



    OtherNonInterestIncomeIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherNonInterestIncomeIncomeStatement) -> Decimal



Set: NineMonths(self: OtherNonInterestIncomeIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: OtherNonInterestIncomeIncomeStatement) -> Decimal



Set: OneMonth(self: OtherNonInterestIncomeIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherNonInterestIncomeIncomeStatement) -> Decimal



Set: SixMonths(self: OtherNonInterestIncomeIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherNonInterestIncomeIncomeStatement) -> Decimal



Set: ThreeMonths(self: OtherNonInterestIncomeIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherNonInterestIncomeIncomeStatement) -> Decimal



Set: TwelveMonths(self: OtherNonInterestIncomeIncomeStatement) = value

"""

    Store = None


class OtherNonOperatingExpensesIncomeStatement(MultiPeriodField):
    """
    Other expenses of the company that cannot be identified by other specific items in the Non-Operating section.



    OtherNonOperatingExpensesIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherNonOperatingExpensesIncomeStatement) -> Decimal



Set: NineMonths(self: OtherNonOperatingExpensesIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherNonOperatingExpensesIncomeStatement) -> Decimal



Set: SixMonths(self: OtherNonOperatingExpensesIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherNonOperatingExpensesIncomeStatement) -> Decimal



Set: ThreeMonths(self: OtherNonOperatingExpensesIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherNonOperatingExpensesIncomeStatement) -> Decimal



Set: TwelveMonths(self: OtherNonOperatingExpensesIncomeStatement) = value

"""

    Store = None


class OtherNonOperatingIncomeExpensesIncomeStatement(MultiPeriodField):
    """
    Total other income and expense of the company that cannot be identified by other specific items in the Non-Operating section.



    OtherNonOperatingIncomeExpensesIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherNonOperatingIncomeExpensesIncomeStatement) -> Decimal



Set: NineMonths(self: OtherNonOperatingIncomeExpensesIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherNonOperatingIncomeExpensesIncomeStatement) -> Decimal



Set: SixMonths(self: OtherNonOperatingIncomeExpensesIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherNonOperatingIncomeExpensesIncomeStatement) -> Decimal



Set: ThreeMonths(self: OtherNonOperatingIncomeExpensesIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherNonOperatingIncomeExpensesIncomeStatement) -> Decimal



Set: TwelveMonths(self: OtherNonOperatingIncomeExpensesIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: OtherNonOperatingIncomeExpensesIncomeStatement) -> Decimal



Set: TwoMonths(self: OtherNonOperatingIncomeExpensesIncomeStatement) = value

"""

    Store = None


class OtherNonOperatingIncomeIncomeStatement(MultiPeriodField):
    """
    Other income of the company that cannot be identified by other specific items in the Non-Operating section.



    OtherNonOperatingIncomeIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherNonOperatingIncomeIncomeStatement) -> Decimal



Set: NineMonths(self: OtherNonOperatingIncomeIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherNonOperatingIncomeIncomeStatement) -> Decimal



Set: SixMonths(self: OtherNonOperatingIncomeIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherNonOperatingIncomeIncomeStatement) -> Decimal



Set: ThreeMonths(self: OtherNonOperatingIncomeIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherNonOperatingIncomeIncomeStatement) -> Decimal



Set: TwelveMonths(self: OtherNonOperatingIncomeIncomeStatement) = value

"""

    Store = None


class OtherOperatingExpensesIncomeStatement(MultiPeriodField):
    """
    The aggregate amount of operating expenses associated with normal operations. Will not include any gain, loss, benefit, or income;

                and its value reported by the company should be <0.



    OtherOperatingExpensesIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherOperatingExpensesIncomeStatement) -> Decimal



Set: NineMonths(self: OtherOperatingExpensesIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: OtherOperatingExpensesIncomeStatement) -> Decimal



Set: OneMonth(self: OtherOperatingExpensesIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherOperatingExpensesIncomeStatement) -> Decimal



Set: SixMonths(self: OtherOperatingExpensesIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherOperatingExpensesIncomeStatement) -> Decimal



Set: ThreeMonths(self: OtherOperatingExpensesIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherOperatingExpensesIncomeStatement) -> Decimal



Set: TwelveMonths(self: OtherOperatingExpensesIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: OtherOperatingExpensesIncomeStatement) -> Decimal



Set: TwoMonths(self: OtherOperatingExpensesIncomeStatement) = value

"""

    Store = None


class OtherOperatingIncomeTotalIncomeStatement(MultiPeriodField):
    """
    Total Other Operating Income- including interest income, dividend income and other types of operating income.



    OtherOperatingIncomeTotalIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherOperatingIncomeTotalIncomeStatement) -> Decimal



Set: NineMonths(self: OtherOperatingIncomeTotalIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherOperatingIncomeTotalIncomeStatement) -> Decimal



Set: SixMonths(self: OtherOperatingIncomeTotalIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherOperatingIncomeTotalIncomeStatement) -> Decimal



Set: ThreeMonths(self: OtherOperatingIncomeTotalIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherOperatingIncomeTotalIncomeStatement) -> Decimal



Set: TwelveMonths(self: OtherOperatingIncomeTotalIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: OtherOperatingIncomeTotalIncomeStatement) -> Decimal



Set: TwoMonths(self: OtherOperatingIncomeTotalIncomeStatement) = value

"""

    Store = None


class OtherOperatingInflowsOutflowsofCashCashFlowStatement(MultiPeriodField):
    """
    Any other cash inflows or outflows in the Operating Cash Flow section, not accounted for in the other specified items.



    OtherOperatingInflowsOutflowsofCashCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherOperatingInflowsOutflowsofCashCashFlowStatement) -> Decimal



Set: NineMonths(self: OtherOperatingInflowsOutflowsofCashCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherOperatingInflowsOutflowsofCashCashFlowStatement) -> Decimal



Set: SixMonths(self: OtherOperatingInflowsOutflowsofCashCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherOperatingInflowsOutflowsofCashCashFlowStatement) -> Decimal



Set: ThreeMonths(self: OtherOperatingInflowsOutflowsofCashCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherOperatingInflowsOutflowsofCashCashFlowStatement) -> Decimal



Set: TwelveMonths(self: OtherOperatingInflowsOutflowsofCashCashFlowStatement) = value

"""

    Store = None


class OtherPayableBalanceSheet(MultiPeriodField):
    """
    Payables and Accrued Expenses that are not defined as Trade, Tax or Dividends related.



    OtherPayableBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherPayableBalanceSheet) -> Decimal



Set: NineMonths(self: OtherPayableBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: OtherPayableBalanceSheet) -> Decimal



Set: OneMonth(self: OtherPayableBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherPayableBalanceSheet) -> Decimal



Set: SixMonths(self: OtherPayableBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherPayableBalanceSheet) -> Decimal



Set: ThreeMonths(self: OtherPayableBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherPayableBalanceSheet) -> Decimal



Set: TwelveMonths(self: OtherPayableBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: OtherPayableBalanceSheet) -> Decimal



Set: TwoMonths(self: OtherPayableBalanceSheet) = value

"""

    Store = None


class OtherPropertiesBalanceSheet(MultiPeriodField):
    """
    Other fixed assets not otherwise classified.



    OtherPropertiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherPropertiesBalanceSheet) -> Decimal



Set: NineMonths(self: OtherPropertiesBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: OtherPropertiesBalanceSheet) -> Decimal



Set: OneMonth(self: OtherPropertiesBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherPropertiesBalanceSheet) -> Decimal



Set: SixMonths(self: OtherPropertiesBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherPropertiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: OtherPropertiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherPropertiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: OtherPropertiesBalanceSheet) = value

"""

    Store = None


class OtherRealEstateOwnedBalanceSheet(MultiPeriodField):
    """
    The Carrying amount as of the balance sheet date of other real estate, which may include real estate investments, real estate loans

                that qualify as investments in real estate, and premises that are no longer used in operations may also be included in real estate

                owned. This does not include real estate assets taken in settlement of troubled loans through surrender or foreclosure.  This item is

                typically available for bank industry.



    OtherRealEstateOwnedBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherRealEstateOwnedBalanceSheet) -> Decimal



Set: NineMonths(self: OtherRealEstateOwnedBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherRealEstateOwnedBalanceSheet) -> Decimal



Set: SixMonths(self: OtherRealEstateOwnedBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherRealEstateOwnedBalanceSheet) -> Decimal



Set: ThreeMonths(self: OtherRealEstateOwnedBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherRealEstateOwnedBalanceSheet) -> Decimal



Set: TwelveMonths(self: OtherRealEstateOwnedBalanceSheet) = value

"""

    Store = None


class OtherReceivablesBalanceSheet(MultiPeriodField):
    """
    Other non-current receivables not otherwise classified.



    OtherReceivablesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherReceivablesBalanceSheet) -> Decimal



Set: NineMonths(self: OtherReceivablesBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherReceivablesBalanceSheet) -> Decimal



Set: SixMonths(self: OtherReceivablesBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherReceivablesBalanceSheet) -> Decimal



Set: ThreeMonths(self: OtherReceivablesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherReceivablesBalanceSheet) -> Decimal



Set: TwelveMonths(self: OtherReceivablesBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: OtherReceivablesBalanceSheet) -> Decimal



Set: TwoMonths(self: OtherReceivablesBalanceSheet) = value

"""

    Store = None


class OtherReservesBalanceSheet(MultiPeriodField):
    """
    Other reserves owned by the company that cannot be identified by other specific items in the Reserves section.



    OtherReservesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherReservesBalanceSheet) -> Decimal



Set: ThreeMonths(self: OtherReservesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherReservesBalanceSheet) -> Decimal



Set: TwelveMonths(self: OtherReservesBalanceSheet) = value

"""

    Store = None


class OtherShortTermInvestmentsBalanceSheet(MultiPeriodField):
    """
    The aggregate amount of short term investments, which will be expired within one year that are not specifically classified as

                Available-for-Sale, Held-to-Maturity,  nor Trading investments.



    OtherShortTermInvestmentsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherShortTermInvestmentsBalanceSheet) -> Decimal



Set: NineMonths(self: OtherShortTermInvestmentsBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: OtherShortTermInvestmentsBalanceSheet) -> Decimal



Set: OneMonth(self: OtherShortTermInvestmentsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherShortTermInvestmentsBalanceSheet) -> Decimal



Set: SixMonths(self: OtherShortTermInvestmentsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherShortTermInvestmentsBalanceSheet) -> Decimal



Set: ThreeMonths(self: OtherShortTermInvestmentsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherShortTermInvestmentsBalanceSheet) -> Decimal



Set: TwelveMonths(self: OtherShortTermInvestmentsBalanceSheet) = value

"""

    Store = None


class OtherSpecialChargesIncomeStatement(MultiPeriodField):
    """
    All other special charges that are not otherwise classified



    OtherSpecialChargesIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherSpecialChargesIncomeStatement) -> Decimal



Set: NineMonths(self: OtherSpecialChargesIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherSpecialChargesIncomeStatement) -> Decimal



Set: SixMonths(self: OtherSpecialChargesIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherSpecialChargesIncomeStatement) -> Decimal



Set: ThreeMonths(self: OtherSpecialChargesIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherSpecialChargesIncomeStatement) -> Decimal



Set: TwelveMonths(self: OtherSpecialChargesIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: OtherSpecialChargesIncomeStatement) -> Decimal



Set: TwoMonths(self: OtherSpecialChargesIncomeStatement) = value

"""

    Store = None


class OtherStaffCostsIncomeStatement(MultiPeriodField):
    """
    Other costs in incurred in lieu of the employees that cannot be identified by other specific items in the Staff Costs section.



    OtherStaffCostsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherStaffCostsIncomeStatement) -> Decimal



Set: TwelveMonths(self: OtherStaffCostsIncomeStatement) = value

"""

    Store = None


class OtherTaxesIncomeStatement(MultiPeriodField):
    """
    Any taxes that are not part of income taxes. This item is usually not available for bank and insurance industries.



    OtherTaxesIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherTaxesIncomeStatement) -> Decimal



Set: NineMonths(self: OtherTaxesIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: OtherTaxesIncomeStatement) -> Decimal



Set: OneMonth(self: OtherTaxesIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherTaxesIncomeStatement) -> Decimal



Set: SixMonths(self: OtherTaxesIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherTaxesIncomeStatement) -> Decimal



Set: ThreeMonths(self: OtherTaxesIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherTaxesIncomeStatement) -> Decimal



Set: TwelveMonths(self: OtherTaxesIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: OtherTaxesIncomeStatement) -> Decimal



Set: TwoMonths(self: OtherTaxesIncomeStatement) = value

"""

    Store = None


class OtherunderPreferredStockDividendIncomeStatement(MultiPeriodField):
    """
    Dividend paid to the preferred shareholders before the common stock shareholders.



    OtherunderPreferredStockDividendIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherunderPreferredStockDividendIncomeStatement) -> Decimal



Set: NineMonths(self: OtherunderPreferredStockDividendIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: OtherunderPreferredStockDividendIncomeStatement) -> Decimal



Set: OneMonth(self: OtherunderPreferredStockDividendIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherunderPreferredStockDividendIncomeStatement) -> Decimal



Set: SixMonths(self: OtherunderPreferredStockDividendIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherunderPreferredStockDividendIncomeStatement) -> Decimal



Set: ThreeMonths(self: OtherunderPreferredStockDividendIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherunderPreferredStockDividendIncomeStatement) -> Decimal



Set: TwelveMonths(self: OtherunderPreferredStockDividendIncomeStatement) = value

"""

    Store = None


class OtherUnderwritingExpensesPaidCashFlowStatement(MultiPeriodField):
    """
    Cash paid out for underwriting expenses, such as the acquisition of new and renewal insurance contracts, in operating cash flow,

                using the direct method. This item is usually only available for insurance industry



    OtherUnderwritingExpensesPaidCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: OtherUnderwritingExpensesPaidCashFlowStatement) -> Decimal



Set: NineMonths(self: OtherUnderwritingExpensesPaidCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: OtherUnderwritingExpensesPaidCashFlowStatement) -> Decimal



Set: SixMonths(self: OtherUnderwritingExpensesPaidCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: OtherUnderwritingExpensesPaidCashFlowStatement) -> Decimal



Set: ThreeMonths(self: OtherUnderwritingExpensesPaidCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: OtherUnderwritingExpensesPaidCashFlowStatement) -> Decimal



Set: TwelveMonths(self: OtherUnderwritingExpensesPaidCashFlowStatement) = value

"""

    Store = None


class PayablesAndAccruedExpensesBalanceSheet(MultiPeriodField):
    """
    This balance sheet account includes all current payables and accrued expenses.



    PayablesAndAccruedExpensesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: PayablesAndAccruedExpensesBalanceSheet) -> Decimal



Set: NineMonths(self: PayablesAndAccruedExpensesBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: PayablesAndAccruedExpensesBalanceSheet) -> Decimal



Set: OneMonth(self: PayablesAndAccruedExpensesBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: PayablesAndAccruedExpensesBalanceSheet) -> Decimal



Set: SixMonths(self: PayablesAndAccruedExpensesBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PayablesAndAccruedExpensesBalanceSheet) -> Decimal



Set: ThreeMonths(self: PayablesAndAccruedExpensesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PayablesAndAccruedExpensesBalanceSheet) -> Decimal



Set: TwelveMonths(self: PayablesAndAccruedExpensesBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: PayablesAndAccruedExpensesBalanceSheet) -> Decimal



Set: TwoMonths(self: PayablesAndAccruedExpensesBalanceSheet) = value

"""

    Store = None


class PayablesBalanceSheet(MultiPeriodField):
    """
    The sum of all payables owed and expected to be paid within one year or one operating cycle, including accounts payables, taxes

                payable, dividends payable and all other current payables.



    PayablesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: PayablesBalanceSheet) -> Decimal



Set: NineMonths(self: PayablesBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: PayablesBalanceSheet) -> Decimal



Set: OneMonth(self: PayablesBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: PayablesBalanceSheet) -> Decimal



Set: SixMonths(self: PayablesBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PayablesBalanceSheet) -> Decimal



Set: ThreeMonths(self: PayablesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PayablesBalanceSheet) -> Decimal



Set: TwelveMonths(self: PayablesBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: PayablesBalanceSheet) -> Decimal



Set: TwoMonths(self: PayablesBalanceSheet) = value

"""

    Store = None


class PaymentForLoansCashFlowStatement(MultiPeriodField):
    """
    Payment from a bank or insurance company to the lender who lends money or property based on the agreement, along with

                interest, at a predetermined date in the future.



    PaymentForLoansCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: PaymentForLoansCashFlowStatement) -> Decimal



Set: NineMonths(self: PaymentForLoansCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: PaymentForLoansCashFlowStatement) -> Decimal



Set: SixMonths(self: PaymentForLoansCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PaymentForLoansCashFlowStatement) -> Decimal



Set: ThreeMonths(self: PaymentForLoansCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PaymentForLoansCashFlowStatement) -> Decimal



Set: TwelveMonths(self: PaymentForLoansCashFlowStatement) = value

"""

    Store = None


class PaymentsonBehalfofEmployeesCashFlowStatement(MultiPeriodField):
    """
    Cash paid in a form of salaries or other benefits to employees of the company, in the direct cash flow.



    PaymentsonBehalfofEmployeesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: PaymentsonBehalfofEmployeesCashFlowStatement) -> Decimal



Set: NineMonths(self: PaymentsonBehalfofEmployeesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: PaymentsonBehalfofEmployeesCashFlowStatement) -> Decimal



Set: SixMonths(self: PaymentsonBehalfofEmployeesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PaymentsonBehalfofEmployeesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: PaymentsonBehalfofEmployeesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PaymentsonBehalfofEmployeesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: PaymentsonBehalfofEmployeesCashFlowStatement) = value

"""

    Store = None


class PaymentstoSuppliersforGoodsandServicesCashFlowStatement(MultiPeriodField):
    """
    Cash paid to suppliers when purchasing goods or services by the company, in the direct cash flow.



    PaymentstoSuppliersforGoodsandServicesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: PaymentstoSuppliersforGoodsandServicesCashFlowStatement) -> Decimal



Set: NineMonths(self: PaymentstoSuppliersforGoodsandServicesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: PaymentstoSuppliersforGoodsandServicesCashFlowStatement) -> Decimal



Set: SixMonths(self: PaymentstoSuppliersforGoodsandServicesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PaymentstoSuppliersforGoodsandServicesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: PaymentstoSuppliersforGoodsandServicesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PaymentstoSuppliersforGoodsandServicesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: PaymentstoSuppliersforGoodsandServicesCashFlowStatement) = value

"""

    Store = None


class PaymentTurnover(MultiPeriodField):
    """
    Cost of Goods Sold / Average Accounts Payables



    PaymentTurnover(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: PaymentTurnover) -> Decimal



Set: OneYear(self: PaymentTurnover) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: PaymentTurnover) -> Decimal



Set: SixMonths(self: PaymentTurnover) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PaymentTurnover) -> Decimal



Set: ThreeMonths(self: PaymentTurnover) = value

"""

    Store = None


class PensionAndEmployeeBenefitExpenseCashFlowStatement(MultiPeriodField):
    """
    The amount of pension and other (such as medical, dental and life insurance) postretirement benefit costs recognized during the

                PeriodAsByte.



    PensionAndEmployeeBenefitExpenseCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: PensionAndEmployeeBenefitExpenseCashFlowStatement) -> Decimal



Set: NineMonths(self: PensionAndEmployeeBenefitExpenseCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: PensionAndEmployeeBenefitExpenseCashFlowStatement) -> Decimal



Set: OneMonth(self: PensionAndEmployeeBenefitExpenseCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: PensionAndEmployeeBenefitExpenseCashFlowStatement) -> Decimal



Set: SixMonths(self: PensionAndEmployeeBenefitExpenseCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PensionAndEmployeeBenefitExpenseCashFlowStatement) -> Decimal



Set: ThreeMonths(self: PensionAndEmployeeBenefitExpenseCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PensionAndEmployeeBenefitExpenseCashFlowStatement) -> Decimal



Set: TwelveMonths(self: PensionAndEmployeeBenefitExpenseCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: PensionAndEmployeeBenefitExpenseCashFlowStatement) -> Decimal



Set: TwoMonths(self: PensionAndEmployeeBenefitExpenseCashFlowStatement) = value

"""

    Store = None


class PensionandOtherPostRetirementBenefitPlansCurrentBalanceSheet(MultiPeriodField):
    """
    Total of the carrying values as of the balance sheet date of obligations incurred through that date and payable for obligations related

                to services received from employees, such as accrued salaries and bonuses, payroll taxes and fringe benefits.



    PensionandOtherPostRetirementBenefitPlansCurrentBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PensionandOtherPostRetirementBenefitPlansCurrentBalanceSheet) -> Decimal



Set: ThreeMonths(self: PensionandOtherPostRetirementBenefitPlansCurrentBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PensionandOtherPostRetirementBenefitPlansCurrentBalanceSheet) -> Decimal



Set: TwelveMonths(self: PensionandOtherPostRetirementBenefitPlansCurrentBalanceSheet) = value

"""

    Store = None


class PensionAndOtherPostretirementBenefitPlansTotalBalanceSheet(MultiPeriodField):
    """
    Total of the carrying values as of the balance sheet date of obligations incurred through that date and payable for obligations related

                to services received from employees, such as accrued salaries and bonuses, payroll taxes and fringe benefits. Used to reflect the

                current portion of the liabilities (due within one year or within the normal operating cycle if longer).



    PensionAndOtherPostretirementBenefitPlansTotalBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PensionAndOtherPostretirementBenefitPlansTotalBalanceSheet) -> Decimal



Set: ThreeMonths(self: PensionAndOtherPostretirementBenefitPlansTotalBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PensionAndOtherPostretirementBenefitPlansTotalBalanceSheet) -> Decimal



Set: TwelveMonths(self: PensionAndOtherPostretirementBenefitPlansTotalBalanceSheet) = value

"""

    Store = None


class PensionCostsIncomeStatement(MultiPeriodField):
    """
    The expense that a company incurs each year by providing a pension plan for its employees. Major expenses in the pension cost

                include employer matching contributions and management fees.



    PensionCostsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PensionCostsIncomeStatement) -> Decimal



Set: TwelveMonths(self: PensionCostsIncomeStatement) = value

"""

    Store = None


class Period(object):
    """ Period constants for multi-period fields """
    FiveYears = '5Y'
    NineMonths = '9M'
    OneMonth = '1M'
    OneYear = '1Y'
    SixMonths = '6M'
    TenYears = '10Y'
    ThreeMonths = '3M'
    ThreeYears = '3Y'
    TwelveMonths = '12M'
    TwoMonths = '2M'
    TwoYears = '2Y'
    __all__ = [
        'FiveYears',
        'NineMonths',
        'OneMonth',
        'OneYear',
        'SixMonths',
        'TenYears',
        'ThreeMonths',
        'ThreeYears',
        'TwelveMonths',
        'TwoMonths',
        'TwoYears',
    ]


class PolicyAcquisitionExpenseIncomeStatement(MultiPeriodField):
    """
    Costs that vary with and are primarily related to the acquisition of new and renewal insurance contracts. Also referred to as

                underwriting expenses.



    PolicyAcquisitionExpenseIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: PolicyAcquisitionExpenseIncomeStatement) -> Decimal



Set: NineMonths(self: PolicyAcquisitionExpenseIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: PolicyAcquisitionExpenseIncomeStatement) -> Decimal



Set: SixMonths(self: PolicyAcquisitionExpenseIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PolicyAcquisitionExpenseIncomeStatement) -> Decimal



Set: ThreeMonths(self: PolicyAcquisitionExpenseIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PolicyAcquisitionExpenseIncomeStatement) -> Decimal



Set: TwelveMonths(self: PolicyAcquisitionExpenseIncomeStatement) = value

"""

    Store = None


class PolicyholderBenefitsCededIncomeStatement(MultiPeriodField):
    """
    The provision in current period for future policy benefits, claims, and claims settlement, which is under reinsurance arrangements.

                This item is usually only available for insurance industry.



    PolicyholderBenefitsCededIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PolicyholderBenefitsCededIncomeStatement) -> Decimal



Set: TwelveMonths(self: PolicyholderBenefitsCededIncomeStatement) = value

"""

    Store = None


class PolicyholderBenefitsGrossIncomeStatement(MultiPeriodField):
    """
    The gross amount of provision in current period for future policyholder benefits, claims, and claims settlement, incurred in the

                claims settlement process before the effects of reinsurance arrangements. This item is usually only available for insurance industry.



    PolicyholderBenefitsGrossIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: PolicyholderBenefitsGrossIncomeStatement) -> Decimal



Set: NineMonths(self: PolicyholderBenefitsGrossIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: PolicyholderBenefitsGrossIncomeStatement) -> Decimal



Set: SixMonths(self: PolicyholderBenefitsGrossIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PolicyholderBenefitsGrossIncomeStatement) -> Decimal



Set: ThreeMonths(self: PolicyholderBenefitsGrossIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PolicyholderBenefitsGrossIncomeStatement) -> Decimal



Set: TwelveMonths(self: PolicyholderBenefitsGrossIncomeStatement) = value

"""

    Store = None


class PolicyholderDepositInvestmentReceivedCashFlowStatement(MultiPeriodField):
    """
    Cash received from policyholder deposit investment activities in operating cash flow, using the direct method. This item is usually

                only available for insurance industry



    PolicyholderDepositInvestmentReceivedCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: PolicyholderDepositInvestmentReceivedCashFlowStatement) -> Decimal



Set: NineMonths(self: PolicyholderDepositInvestmentReceivedCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: PolicyholderDepositInvestmentReceivedCashFlowStatement) -> Decimal



Set: SixMonths(self: PolicyholderDepositInvestmentReceivedCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PolicyholderDepositInvestmentReceivedCashFlowStatement) -> Decimal



Set: ThreeMonths(self: PolicyholderDepositInvestmentReceivedCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PolicyholderDepositInvestmentReceivedCashFlowStatement) -> Decimal



Set: TwelveMonths(self: PolicyholderDepositInvestmentReceivedCashFlowStatement) = value

"""

    Store = None


class PolicyholderDividendsIncomeStatement(MultiPeriodField):
    """
    Payments made or credits extended to the insured by the company, usually at the end of a policy year results in reducing the net

                insurance cost to the policyholder. Such dividends may be paid in cash to the insured or applied by the insured as reductions of the

                premiums due for the next policy year. This item is usually only available for insurance industry.



    PolicyholderDividendsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: PolicyholderDividendsIncomeStatement) -> Decimal



Set: NineMonths(self: PolicyholderDividendsIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: PolicyholderDividendsIncomeStatement) -> Decimal



Set: SixMonths(self: PolicyholderDividendsIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PolicyholderDividendsIncomeStatement) -> Decimal



Set: ThreeMonths(self: PolicyholderDividendsIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PolicyholderDividendsIncomeStatement) -> Decimal



Set: TwelveMonths(self: PolicyholderDividendsIncomeStatement) = value

"""

    Store = None


class PolicyholderFundsBalanceSheet(MultiPeriodField):
    """
    The total liability as of the balance sheet date of amounts due to policy holders, excluding future policy benefits and claims,

                including unpaid policy dividends, retrospective refunds, and undistributed earnings on participating business.



    PolicyholderFundsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PolicyholderFundsBalanceSheet) -> Decimal



Set: ThreeMonths(self: PolicyholderFundsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PolicyholderFundsBalanceSheet) -> Decimal



Set: TwelveMonths(self: PolicyholderFundsBalanceSheet) = value

"""

    Store = None


class PolicyholderInterestIncomeStatement(MultiPeriodField):
    """
    The periodic income payment provided to the annuitant by the insurance company, which is determined by the assumed interest

                rate (AIR) and other factors. This item is usually only available for insurance industry.



    PolicyholderInterestIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: PolicyholderInterestIncomeStatement) -> Decimal



Set: NineMonths(self: PolicyholderInterestIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: PolicyholderInterestIncomeStatement) -> Decimal



Set: SixMonths(self: PolicyholderInterestIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PolicyholderInterestIncomeStatement) -> Decimal



Set: ThreeMonths(self: PolicyholderInterestIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PolicyholderInterestIncomeStatement) -> Decimal



Set: TwelveMonths(self: PolicyholderInterestIncomeStatement) = value

"""

    Store = None


class PolicyLoansBalanceSheet(MultiPeriodField):
    """
    A loan issued by an insurance company that uses the cash value of a person's life insurance policy as collateral. This item is usually

                only available for insurance industry.



    PolicyLoansBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PolicyLoansBalanceSheet) -> Decimal



Set: ThreeMonths(self: PolicyLoansBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PolicyLoansBalanceSheet) -> Decimal



Set: TwelveMonths(self: PolicyLoansBalanceSheet) = value

"""

    Store = None


class PolicyReservesBenefitsBalanceSheet(MultiPeriodField):
    """
    Accounting policy pertaining to an insurance entity's net liability for future benefits (for example, death, cash surrender value) to be

                paid to or on behalf of policyholders, describing the bases, methodologies and components of the reserve, and assumptions

                regarding estimates of expected investment yields, mortality, morbidity, terminations and expenses.



    PolicyReservesBenefitsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: PolicyReservesBenefitsBalanceSheet) -> Decimal



Set: NineMonths(self: PolicyReservesBenefitsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: PolicyReservesBenefitsBalanceSheet) -> Decimal



Set: SixMonths(self: PolicyReservesBenefitsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PolicyReservesBenefitsBalanceSheet) -> Decimal



Set: ThreeMonths(self: PolicyReservesBenefitsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PolicyReservesBenefitsBalanceSheet) -> Decimal



Set: TwelveMonths(self: PolicyReservesBenefitsBalanceSheet) = value

"""

    Store = None


class PostTaxMargin5YrAvg(MultiPeriodField):
    """
    This is the simple average of the company's Annual Post Tax Margin over the last 5 years. Post tax margin is Post tax divided by

                total revenue for the same PeriodAsByte.



    PostTaxMargin5YrAvg(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: PostTaxMargin5YrAvg) -> Decimal



Set: FiveYears(self: PostTaxMargin5YrAvg) = value

"""

    Store = None


class PreferredSecuritiesOutsideStockEquityBalanceSheet(MultiPeriodField):
    """
    Preferred securities that that firm treats as a liability. It includes convertible preferred stock or redeemable preferred stock.



    PreferredSecuritiesOutsideStockEquityBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: PreferredSecuritiesOutsideStockEquityBalanceSheet) -> Decimal



Set: NineMonths(self: PreferredSecuritiesOutsideStockEquityBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: PreferredSecuritiesOutsideStockEquityBalanceSheet) -> Decimal



Set: OneMonth(self: PreferredSecuritiesOutsideStockEquityBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: PreferredSecuritiesOutsideStockEquityBalanceSheet) -> Decimal



Set: SixMonths(self: PreferredSecuritiesOutsideStockEquityBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PreferredSecuritiesOutsideStockEquityBalanceSheet) -> Decimal



Set: ThreeMonths(self: PreferredSecuritiesOutsideStockEquityBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PreferredSecuritiesOutsideStockEquityBalanceSheet) -> Decimal



Set: TwelveMonths(self: PreferredSecuritiesOutsideStockEquityBalanceSheet) = value

"""

    Store = None


class PreferredSharesNumberBalanceSheet(MultiPeriodField):
    """
    Number of Preferred Shares.



    PreferredSharesNumberBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PreferredSharesNumberBalanceSheet) -> Decimal



Set: ThreeMonths(self: PreferredSharesNumberBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PreferredSharesNumberBalanceSheet) -> Decimal



Set: TwelveMonths(self: PreferredSharesNumberBalanceSheet) = value

"""

    Store = None


class PreferredStockBalanceSheet(MultiPeriodField):
    """
    Preferred stock (all issues) at par value, as reported within the Stockholder's Equity section of the balance sheet.



    PreferredStockBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: PreferredStockBalanceSheet) -> Decimal



Set: NineMonths(self: PreferredStockBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: PreferredStockBalanceSheet) -> Decimal



Set: OneMonth(self: PreferredStockBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: PreferredStockBalanceSheet) -> Decimal



Set: SixMonths(self: PreferredStockBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PreferredStockBalanceSheet) -> Decimal



Set: ThreeMonths(self: PreferredStockBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PreferredStockBalanceSheet) -> Decimal



Set: TwelveMonths(self: PreferredStockBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: PreferredStockBalanceSheet) -> Decimal



Set: TwoMonths(self: PreferredStockBalanceSheet) = value

"""

    Store = None


class PreferredStockDividendPaidCashFlowStatement(MultiPeriodField):
    """
    Pay for the amount of dividends declared or paid in the period to preferred shareholders or the amount for which the obligation to

                pay them dividends rose in the PeriodAsByte.



    PreferredStockDividendPaidCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: PreferredStockDividendPaidCashFlowStatement) -> Decimal



Set: NineMonths(self: PreferredStockDividendPaidCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: PreferredStockDividendPaidCashFlowStatement) -> Decimal



Set: OneMonth(self: PreferredStockDividendPaidCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: PreferredStockDividendPaidCashFlowStatement) -> Decimal



Set: SixMonths(self: PreferredStockDividendPaidCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PreferredStockDividendPaidCashFlowStatement) -> Decimal



Set: ThreeMonths(self: PreferredStockDividendPaidCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PreferredStockDividendPaidCashFlowStatement) -> Decimal



Set: TwelveMonths(self: PreferredStockDividendPaidCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: PreferredStockDividendPaidCashFlowStatement) -> Decimal



Set: TwoMonths(self: PreferredStockDividendPaidCashFlowStatement) = value

"""

    Store = None


class PreferredStockDividendsIncomeStatement(MultiPeriodField):
    """
    The amount of dividends declared or paid in the period to preferred shareholders, or the amount for which the obligation to pay

                them dividends arose in the PeriodAsByte. Preferred dividends are the amount required for the current year only, and not for any amount

                required in past years.



    PreferredStockDividendsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: PreferredStockDividendsIncomeStatement) -> Decimal



Set: NineMonths(self: PreferredStockDividendsIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: PreferredStockDividendsIncomeStatement) -> Decimal



Set: OneMonth(self: PreferredStockDividendsIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: PreferredStockDividendsIncomeStatement) -> Decimal



Set: SixMonths(self: PreferredStockDividendsIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PreferredStockDividendsIncomeStatement) -> Decimal



Set: ThreeMonths(self: PreferredStockDividendsIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PreferredStockDividendsIncomeStatement) -> Decimal



Set: TwelveMonths(self: PreferredStockDividendsIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: PreferredStockDividendsIncomeStatement) -> Decimal



Set: TwoMonths(self: PreferredStockDividendsIncomeStatement) = value

"""

    Store = None


class PreferredStockEquityBalanceSheet(MultiPeriodField):
    """
    A class of ownership in a company that has a higher claim on the assets and earnings than common stock. Preferred stock

                generally has a dividend that must be paid out before dividends to common stockholders and the shares usually do not have voting

                rights.



    PreferredStockEquityBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: PreferredStockEquityBalanceSheet) -> Decimal



Set: NineMonths(self: PreferredStockEquityBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: PreferredStockEquityBalanceSheet) -> Decimal



Set: OneMonth(self: PreferredStockEquityBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: PreferredStockEquityBalanceSheet) -> Decimal



Set: SixMonths(self: PreferredStockEquityBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PreferredStockEquityBalanceSheet) -> Decimal



Set: ThreeMonths(self: PreferredStockEquityBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PreferredStockEquityBalanceSheet) -> Decimal



Set: TwelveMonths(self: PreferredStockEquityBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: PreferredStockEquityBalanceSheet) -> Decimal



Set: TwoMonths(self: PreferredStockEquityBalanceSheet) = value

"""

    Store = None


class PreferredStockIssuanceCashFlowStatement(MultiPeriodField):
    """
    The cash inflow from offering preferred stock.



    PreferredStockIssuanceCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: PreferredStockIssuanceCashFlowStatement) -> Decimal



Set: NineMonths(self: PreferredStockIssuanceCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: PreferredStockIssuanceCashFlowStatement) -> Decimal



Set: OneMonth(self: PreferredStockIssuanceCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: PreferredStockIssuanceCashFlowStatement) -> Decimal



Set: SixMonths(self: PreferredStockIssuanceCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PreferredStockIssuanceCashFlowStatement) -> Decimal



Set: ThreeMonths(self: PreferredStockIssuanceCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PreferredStockIssuanceCashFlowStatement) -> Decimal



Set: TwelveMonths(self: PreferredStockIssuanceCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: PreferredStockIssuanceCashFlowStatement) -> Decimal



Set: TwoMonths(self: PreferredStockIssuanceCashFlowStatement) = value

"""

    Store = None


class PreferredStockPaymentsCashFlowStatement(MultiPeriodField):
    """
    The cash outflow to reacquire preferred stock during the PeriodAsByte.



    PreferredStockPaymentsCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: PreferredStockPaymentsCashFlowStatement) -> Decimal



Set: NineMonths(self: PreferredStockPaymentsCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: PreferredStockPaymentsCashFlowStatement) -> Decimal



Set: OneMonth(self: PreferredStockPaymentsCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: PreferredStockPaymentsCashFlowStatement) -> Decimal



Set: SixMonths(self: PreferredStockPaymentsCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PreferredStockPaymentsCashFlowStatement) -> Decimal



Set: ThreeMonths(self: PreferredStockPaymentsCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PreferredStockPaymentsCashFlowStatement) -> Decimal



Set: TwelveMonths(self: PreferredStockPaymentsCashFlowStatement) = value

"""

    Store = None


class PremiumReceivedCashFlowStatement(MultiPeriodField):
    """
    Cash received from premium income in operating cash flow, using the direct method. This item is usually only available for

                insurance industry



    PremiumReceivedCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: PremiumReceivedCashFlowStatement) -> Decimal



Set: NineMonths(self: PremiumReceivedCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: PremiumReceivedCashFlowStatement) -> Decimal



Set: SixMonths(self: PremiumReceivedCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PremiumReceivedCashFlowStatement) -> Decimal



Set: ThreeMonths(self: PremiumReceivedCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PremiumReceivedCashFlowStatement) -> Decimal



Set: TwelveMonths(self: PremiumReceivedCashFlowStatement) = value

"""

    Store = None


class PrepaidAssetsBalanceSheet(MultiPeriodField):
    """
    Sum of the carrying amounts that are paid in advance for expenses, which will be charged against earnings in subsequent periods.



    PrepaidAssetsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: PrepaidAssetsBalanceSheet) -> Decimal



Set: NineMonths(self: PrepaidAssetsBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: PrepaidAssetsBalanceSheet) -> Decimal



Set: OneMonth(self: PrepaidAssetsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: PrepaidAssetsBalanceSheet) -> Decimal



Set: SixMonths(self: PrepaidAssetsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PrepaidAssetsBalanceSheet) -> Decimal



Set: ThreeMonths(self: PrepaidAssetsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PrepaidAssetsBalanceSheet) -> Decimal



Set: TwelveMonths(self: PrepaidAssetsBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: PrepaidAssetsBalanceSheet) -> Decimal



Set: TwoMonths(self: PrepaidAssetsBalanceSheet) = value

"""

    Store = None


class PretaxIncomeIncomeStatement(MultiPeriodField):
    """
    Reported income before the deduction or benefit of income taxes.



    PretaxIncomeIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: PretaxIncomeIncomeStatement) -> Decimal



Set: NineMonths(self: PretaxIncomeIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: PretaxIncomeIncomeStatement) -> Decimal



Set: OneMonth(self: PretaxIncomeIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: PretaxIncomeIncomeStatement) -> Decimal



Set: SixMonths(self: PretaxIncomeIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PretaxIncomeIncomeStatement) -> Decimal



Set: ThreeMonths(self: PretaxIncomeIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PretaxIncomeIncomeStatement) -> Decimal



Set: TwelveMonths(self: PretaxIncomeIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: PretaxIncomeIncomeStatement) -> Decimal



Set: TwoMonths(self: PretaxIncomeIncomeStatement) = value

"""

    Store = None


class PretaxMargin(MultiPeriodField):
    """
    Refers to the ratio of pretax income to revenue. Morningstar calculates the ratio by using the underlying data reported in the

                company filings or reports:   Pretax Income / Revenue.



    PretaxMargin(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: PretaxMargin) -> Decimal



Set: NineMonths(self: PretaxMargin) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: PretaxMargin) -> Decimal



Set: OneMonth(self: PretaxMargin) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: PretaxMargin) -> Decimal



Set: OneYear(self: PretaxMargin) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: PretaxMargin) -> Decimal



Set: SixMonths(self: PretaxMargin) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PretaxMargin) -> Decimal



Set: ThreeMonths(self: PretaxMargin) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: PretaxMargin) -> Decimal



Set: TwoMonths(self: PretaxMargin) = value

"""

    Store = None


class PreTaxMargin5YrAvg(MultiPeriodField):
    """
    This is the simple average of the company's Annual Pre Tax Margin over the last 5 years. Pre tax margin is Pre tax divided by total

                revenue for the same PeriodAsByte.



    PreTaxMargin5YrAvg(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: PreTaxMargin5YrAvg) -> Decimal



Set: FiveYears(self: PreTaxMargin5YrAvg) = value

"""

    Store = None


class PreTreShaNumBalanceSheet(MultiPeriodField):
    """
    The treasury stock number of preferred shares. This represents the number of preferred shares owned by the company as a result

                of share repurchase programs or donations.



    PreTreShaNumBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PreTreShaNumBalanceSheet) -> Decimal



Set: ThreeMonths(self: PreTreShaNumBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PreTreShaNumBalanceSheet) -> Decimal



Set: TwelveMonths(self: PreTreShaNumBalanceSheet) = value

"""

    Store = None


class ProceedsFromLoansCashFlowStatement(MultiPeriodField):
    """
    The cash inflow from borrowing money or property for a bank or insurance company.



    ProceedsFromLoansCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ProceedsFromLoansCashFlowStatement) -> Decimal



Set: NineMonths(self: ProceedsFromLoansCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ProceedsFromLoansCashFlowStatement) -> Decimal



Set: SixMonths(self: ProceedsFromLoansCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ProceedsFromLoansCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ProceedsFromLoansCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ProceedsFromLoansCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ProceedsFromLoansCashFlowStatement) = value

"""

    Store = None


class ProceedsFromStockOptionExercisedCashFlowStatement(MultiPeriodField):
    """
    The cash inflow associated with the amount received from holders exercising their stock options.



    ProceedsFromStockOptionExercisedCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ProceedsFromStockOptionExercisedCashFlowStatement) -> Decimal



Set: NineMonths(self: ProceedsFromStockOptionExercisedCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: ProceedsFromStockOptionExercisedCashFlowStatement) -> Decimal



Set: OneMonth(self: ProceedsFromStockOptionExercisedCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ProceedsFromStockOptionExercisedCashFlowStatement) -> Decimal



Set: SixMonths(self: ProceedsFromStockOptionExercisedCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ProceedsFromStockOptionExercisedCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ProceedsFromStockOptionExercisedCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ProceedsFromStockOptionExercisedCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ProceedsFromStockOptionExercisedCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: ProceedsFromStockOptionExercisedCashFlowStatement) -> Decimal



Set: TwoMonths(self: ProceedsFromStockOptionExercisedCashFlowStatement) = value

"""

    Store = None


class ProceedsPaymentFederalFundsSoldAndSecuritiesPurchasedUnderAgreementToResellCashFlowStatement(MultiPeriodField):
    """
    The aggregate amount change of (1) the lending of excess federal funds to another commercial bank requiring such for its legal

                reserve requirements and (2) securities purchased under agreements to resell. This item is usually only available for bank industry.



    ProceedsPaymentFederalFundsSoldAndSecuritiesPurchasedUnderAgreementToResellCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ProceedsPaymentFederalFundsSoldAndSecuritiesPurchasedUnderAgreementToResellCashFlowStatement) -> Decimal



Set: NineMonths(self: ProceedsPaymentFederalFundsSoldAndSecuritiesPurchasedUnderAgreementToResellCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ProceedsPaymentFederalFundsSoldAndSecuritiesPurchasedUnderAgreementToResellCashFlowStatement) -> Decimal



Set: SixMonths(self: ProceedsPaymentFederalFundsSoldAndSecuritiesPurchasedUnderAgreementToResellCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ProceedsPaymentFederalFundsSoldAndSecuritiesPurchasedUnderAgreementToResellCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ProceedsPaymentFederalFundsSoldAndSecuritiesPurchasedUnderAgreementToResellCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ProceedsPaymentFederalFundsSoldAndSecuritiesPurchasedUnderAgreementToResellCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ProceedsPaymentFederalFundsSoldAndSecuritiesPurchasedUnderAgreementToResellCashFlowStatement) = value

"""

    Store = None


class ProceedsPaymentInInterestBearingDepositsInBankCashFlowStatement(MultiPeriodField):
    """
    The net change on interest-bearing deposits in other financial institutions for relatively short periods of time including, for example,

                certificates of deposits.



    ProceedsPaymentInInterestBearingDepositsInBankCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ProceedsPaymentInInterestBearingDepositsInBankCashFlowStatement) -> Decimal



Set: NineMonths(self: ProceedsPaymentInInterestBearingDepositsInBankCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ProceedsPaymentInInterestBearingDepositsInBankCashFlowStatement) -> Decimal



Set: SixMonths(self: ProceedsPaymentInInterestBearingDepositsInBankCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ProceedsPaymentInInterestBearingDepositsInBankCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ProceedsPaymentInInterestBearingDepositsInBankCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ProceedsPaymentInInterestBearingDepositsInBankCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ProceedsPaymentInInterestBearingDepositsInBankCashFlowStatement) = value

"""

    Store = None


class ProfessionalExpenseAndContractServicesExpenseIncomeStatement(MultiPeriodField):
    """
    Professional and contract service expense includes cost reimbursements for support services related to contracted projects,

                outsourced management, technical and staff support. This item is usually only available for bank industry.



    ProfessionalExpenseAndContractServicesExpenseIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ProfessionalExpenseAndContractServicesExpenseIncomeStatement) -> Decimal



Set: NineMonths(self: ProfessionalExpenseAndContractServicesExpenseIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: ProfessionalExpenseAndContractServicesExpenseIncomeStatement) -> Decimal



Set: OneMonth(self: ProfessionalExpenseAndContractServicesExpenseIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ProfessionalExpenseAndContractServicesExpenseIncomeStatement) -> Decimal



Set: SixMonths(self: ProfessionalExpenseAndContractServicesExpenseIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ProfessionalExpenseAndContractServicesExpenseIncomeStatement) -> Decimal



Set: ThreeMonths(self: ProfessionalExpenseAndContractServicesExpenseIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ProfessionalExpenseAndContractServicesExpenseIncomeStatement) -> Decimal



Set: TwelveMonths(self: ProfessionalExpenseAndContractServicesExpenseIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: ProfessionalExpenseAndContractServicesExpenseIncomeStatement) -> Decimal



Set: TwoMonths(self: ProfessionalExpenseAndContractServicesExpenseIncomeStatement) = value

"""

    Store = None


class ProfitMargin5YrAvg(MultiPeriodField):
    """
    This is the simple average of the company's Annual Net Profit Margin over the last 5 years. Net profit margin is post tax income

                divided by total revenue for the same PeriodAsByte.



    ProfitMargin5YrAvg(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: ProfitMargin5YrAvg) -> Decimal



Set: FiveYears(self: ProfitMargin5YrAvg) = value

"""

    Store = None


class ProfitonDisposalsCashFlowStatement(MultiPeriodField):
    """
    The difference between the sale price or salvage price and the book value of an asset that was sold or retired during the reporting

                PeriodAsByte.



    ProfitonDisposalsCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ProfitonDisposalsCashFlowStatement) -> Decimal



Set: NineMonths(self: ProfitonDisposalsCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ProfitonDisposalsCashFlowStatement) -> Decimal



Set: SixMonths(self: ProfitonDisposalsCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ProfitonDisposalsCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ProfitonDisposalsCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ProfitonDisposalsCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ProfitonDisposalsCashFlowStatement) = value

"""

    Store = None


class PropertiesBalanceSheet(MultiPeriodField):
    """
    Tangible assets that are held by an entity for use in the production or supply of goods and services, for rental to others, or for

                administrative purposes and that are expected to provide economic benefit for more than one year. This item is available for

                manufacturing, bank and transportation industries.



    PropertiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PropertiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: PropertiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PropertiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: PropertiesBalanceSheet) = value

"""

    Store = None


class ProvisionandWriteOffofAssetsCashFlowStatement(MultiPeriodField):
    """
    A non-cash adjustment for total provision and write off on assets & liabilities.



    ProvisionandWriteOffofAssetsCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ProvisionandWriteOffofAssetsCashFlowStatement) -> Decimal



Set: NineMonths(self: ProvisionandWriteOffofAssetsCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ProvisionandWriteOffofAssetsCashFlowStatement) -> Decimal



Set: SixMonths(self: ProvisionandWriteOffofAssetsCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ProvisionandWriteOffofAssetsCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ProvisionandWriteOffofAssetsCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ProvisionandWriteOffofAssetsCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ProvisionandWriteOffofAssetsCashFlowStatement) = value

"""

    Store = None


class ProvisionForDoubtfulAccountsIncomeStatement(MultiPeriodField):
    """
    Amount of the current period expense charged against operations, the offset which is generally to the allowance for doubtful

                accounts for the purpose of reducing receivables, including notes receivable, to an amount that approximates their net realizable

                value (the amount expected to be collected). The category includes provision for loan losses, provision for any doubtful account

                receivable, and bad debt expenses. This item is usually not available for bank and insurance industries.



    ProvisionForDoubtfulAccountsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ProvisionForDoubtfulAccountsIncomeStatement) -> Decimal



Set: NineMonths(self: ProvisionForDoubtfulAccountsIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ProvisionForDoubtfulAccountsIncomeStatement) -> Decimal



Set: SixMonths(self: ProvisionForDoubtfulAccountsIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ProvisionForDoubtfulAccountsIncomeStatement) -> Decimal



Set: ThreeMonths(self: ProvisionForDoubtfulAccountsIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ProvisionForDoubtfulAccountsIncomeStatement) -> Decimal



Set: TwelveMonths(self: ProvisionForDoubtfulAccountsIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: ProvisionForDoubtfulAccountsIncomeStatement) -> Decimal



Set: TwoMonths(self: ProvisionForDoubtfulAccountsIncomeStatement) = value

"""

    Store = None


class ProvisionForLoanLeaseAndOtherLossesCashFlowStatement(MultiPeriodField):
    """
    The sum of the periodic provision charged to earnings, based on an assessment of uncollectible from the counterparty on account

                of loan, lease or other credit losses, to reduce these accounts to the amount that approximates their net realizable value. This item

                is usually only available for bank industry.



    ProvisionForLoanLeaseAndOtherLossesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ProvisionForLoanLeaseAndOtherLossesCashFlowStatement) -> Decimal



Set: NineMonths(self: ProvisionForLoanLeaseAndOtherLossesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ProvisionForLoanLeaseAndOtherLossesCashFlowStatement) -> Decimal



Set: SixMonths(self: ProvisionForLoanLeaseAndOtherLossesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ProvisionForLoanLeaseAndOtherLossesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ProvisionForLoanLeaseAndOtherLossesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ProvisionForLoanLeaseAndOtherLossesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ProvisionForLoanLeaseAndOtherLossesCashFlowStatement) = value

"""

    Store = None


class ProvisionsTotalBalanceSheet(MultiPeriodField):
    """
    Provisions are created to protect the interests of one or both parties named in a contract or legal document, which is a preparatory

                action or measure. Current provision is expired within one accounting PeriodAsByte.



    ProvisionsTotalBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ProvisionsTotalBalanceSheet) -> Decimal



Set: ThreeMonths(self: ProvisionsTotalBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ProvisionsTotalBalanceSheet) -> Decimal



Set: TwelveMonths(self: ProvisionsTotalBalanceSheet) = value

"""

    Store = None


class PurchaseOfBusinessCashFlowStatement(MultiPeriodField):
    """
    All the purchases of business including business acquisitions, investment in subsidiary; investing in affiliated companies, and join

                venture.



    PurchaseOfBusinessCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: PurchaseOfBusinessCashFlowStatement) -> Decimal



Set: NineMonths(self: PurchaseOfBusinessCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: PurchaseOfBusinessCashFlowStatement) -> Decimal



Set: OneMonth(self: PurchaseOfBusinessCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: PurchaseOfBusinessCashFlowStatement) -> Decimal



Set: SixMonths(self: PurchaseOfBusinessCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PurchaseOfBusinessCashFlowStatement) -> Decimal



Set: ThreeMonths(self: PurchaseOfBusinessCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PurchaseOfBusinessCashFlowStatement) -> Decimal



Set: TwelveMonths(self: PurchaseOfBusinessCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: PurchaseOfBusinessCashFlowStatement) -> Decimal



Set: TwoMonths(self: PurchaseOfBusinessCashFlowStatement) = value

"""

    Store = None


class PurchaseOfIntangiblesCashFlowStatement(MultiPeriodField):
    """
    The amount of capital outlays undertaken to increase, construct or improve intangible assets.



    PurchaseOfIntangiblesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: PurchaseOfIntangiblesCashFlowStatement) -> Decimal



Set: NineMonths(self: PurchaseOfIntangiblesCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: PurchaseOfIntangiblesCashFlowStatement) -> Decimal



Set: OneMonth(self: PurchaseOfIntangiblesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: PurchaseOfIntangiblesCashFlowStatement) -> Decimal



Set: SixMonths(self: PurchaseOfIntangiblesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PurchaseOfIntangiblesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: PurchaseOfIntangiblesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PurchaseOfIntangiblesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: PurchaseOfIntangiblesCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: PurchaseOfIntangiblesCashFlowStatement) -> Decimal



Set: TwoMonths(self: PurchaseOfIntangiblesCashFlowStatement) = value

"""

    Store = None


class PurchaseOfInvestmentCashFlowStatement(MultiPeriodField):
    """
    All purchases of investments, including both long term and short term.



    PurchaseOfInvestmentCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: PurchaseOfInvestmentCashFlowStatement) -> Decimal



Set: NineMonths(self: PurchaseOfInvestmentCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: PurchaseOfInvestmentCashFlowStatement) -> Decimal



Set: OneMonth(self: PurchaseOfInvestmentCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: PurchaseOfInvestmentCashFlowStatement) -> Decimal



Set: SixMonths(self: PurchaseOfInvestmentCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PurchaseOfInvestmentCashFlowStatement) -> Decimal



Set: ThreeMonths(self: PurchaseOfInvestmentCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PurchaseOfInvestmentCashFlowStatement) -> Decimal



Set: TwelveMonths(self: PurchaseOfInvestmentCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: PurchaseOfInvestmentCashFlowStatement) -> Decimal



Set: TwoMonths(self: PurchaseOfInvestmentCashFlowStatement) = value

"""

    Store = None


class PurchaseOfInvestmentPropertiesCashFlowStatement(MultiPeriodField):
    """
    Cash outflow for purchases of investment properties during the accounting PeriodAsByte.



    PurchaseOfInvestmentPropertiesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: PurchaseOfInvestmentPropertiesCashFlowStatement) -> Decimal



Set: NineMonths(self: PurchaseOfInvestmentPropertiesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: PurchaseOfInvestmentPropertiesCashFlowStatement) -> Decimal



Set: SixMonths(self: PurchaseOfInvestmentPropertiesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PurchaseOfInvestmentPropertiesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: PurchaseOfInvestmentPropertiesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PurchaseOfInvestmentPropertiesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: PurchaseOfInvestmentPropertiesCashFlowStatement) = value

"""

    Store = None


class PurchaseofJointVentureAssociateCashFlowStatement(MultiPeriodField):
    """
    Purchase of joint venture/associates (investment below 50%).



    PurchaseofJointVentureAssociateCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: PurchaseofJointVentureAssociateCashFlowStatement) -> Decimal



Set: NineMonths(self: PurchaseofJointVentureAssociateCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: PurchaseofJointVentureAssociateCashFlowStatement) -> Decimal



Set: SixMonths(self: PurchaseofJointVentureAssociateCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PurchaseofJointVentureAssociateCashFlowStatement) -> Decimal



Set: ThreeMonths(self: PurchaseofJointVentureAssociateCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PurchaseofJointVentureAssociateCashFlowStatement) -> Decimal



Set: TwelveMonths(self: PurchaseofJointVentureAssociateCashFlowStatement) = value

"""

    Store = None


class PurchaseOfPPECashFlowStatement(MultiPeriodField):
    """
    The amount of capital outlays undertaken to increase, construct or improve capital assets. This category includes property, plant

                equipment, furniture, fixed assets, buildings, and improvement.



    PurchaseOfPPECashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: PurchaseOfPPECashFlowStatement) -> Decimal



Set: NineMonths(self: PurchaseOfPPECashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: PurchaseOfPPECashFlowStatement) -> Decimal



Set: OneMonth(self: PurchaseOfPPECashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: PurchaseOfPPECashFlowStatement) -> Decimal



Set: SixMonths(self: PurchaseOfPPECashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PurchaseOfPPECashFlowStatement) -> Decimal



Set: ThreeMonths(self: PurchaseOfPPECashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PurchaseOfPPECashFlowStatement) -> Decimal



Set: TwelveMonths(self: PurchaseOfPPECashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: PurchaseOfPPECashFlowStatement) -> Decimal



Set: TwoMonths(self: PurchaseOfPPECashFlowStatement) = value

"""

    Store = None


class PurchaseofSubsidiariesCashFlowStatement(MultiPeriodField):
    """
    Purchase of subsidiaries or interest in subsidiaries (investments 51% and above).



    PurchaseofSubsidiariesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: PurchaseofSubsidiariesCashFlowStatement) -> Decimal



Set: NineMonths(self: PurchaseofSubsidiariesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: PurchaseofSubsidiariesCashFlowStatement) -> Decimal



Set: SixMonths(self: PurchaseofSubsidiariesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: PurchaseofSubsidiariesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: PurchaseofSubsidiariesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: PurchaseofSubsidiariesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: PurchaseofSubsidiariesCashFlowStatement) = value

"""

    Store = None


class QuickRatio(MultiPeriodField):
    """
    Refers to the ratio of liquid assets to Current Liabilities. Morningstar calculates the ratio by using the underlying data reported in the

                Balance Sheet within the company filings or reports:(Cash, Cash Equivalents, and Short Term Investments + Receivables ) /

                Current Liabilities.



    QuickRatio(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: QuickRatio) -> Decimal



Set: NineMonths(self: QuickRatio) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: QuickRatio) -> Decimal



Set: OneMonth(self: QuickRatio) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: QuickRatio) -> Decimal



Set: OneYear(self: QuickRatio) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: QuickRatio) -> Decimal



Set: SixMonths(self: QuickRatio) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: QuickRatio) -> Decimal



Set: ThreeMonths(self: QuickRatio) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: QuickRatio) -> Decimal



Set: TwoMonths(self: QuickRatio) = value

"""

    Store = None


class RawMaterialsBalanceSheet(MultiPeriodField):
    """
    Carrying amount as of the balance sheet data of unprocessed items to be consumed in the manufacturing or production process.

                This item is available for manufacturing and mining industries.



    RawMaterialsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: RawMaterialsBalanceSheet) -> Decimal



Set: NineMonths(self: RawMaterialsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: RawMaterialsBalanceSheet) -> Decimal



Set: SixMonths(self: RawMaterialsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: RawMaterialsBalanceSheet) -> Decimal



Set: ThreeMonths(self: RawMaterialsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: RawMaterialsBalanceSheet) -> Decimal



Set: TwelveMonths(self: RawMaterialsBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: RawMaterialsBalanceSheet) -> Decimal



Set: TwoMonths(self: RawMaterialsBalanceSheet) = value

"""

    Store = None


class RealizedGainLossOnSaleOfLoansAndLeaseCashFlowStatement(MultiPeriodField):
    """
    The gains and losses included in earnings that represent the difference between the sale price and the carrying value of loans and

                leases that were sold during the reporting PeriodAsByte. This element refers to the gain (loss) and not to the cash proceeds of the sales.

                This element is a non-cash adjustment to net income when calculating net cash generated by operating activities using the indirect

                method. This item is usually only available for bank industry.



    RealizedGainLossOnSaleOfLoansAndLeaseCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: RealizedGainLossOnSaleOfLoansAndLeaseCashFlowStatement) -> Decimal



Set: NineMonths(self: RealizedGainLossOnSaleOfLoansAndLeaseCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: RealizedGainLossOnSaleOfLoansAndLeaseCashFlowStatement) -> Decimal



Set: OneMonth(self: RealizedGainLossOnSaleOfLoansAndLeaseCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: RealizedGainLossOnSaleOfLoansAndLeaseCashFlowStatement) -> Decimal



Set: SixMonths(self: RealizedGainLossOnSaleOfLoansAndLeaseCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: RealizedGainLossOnSaleOfLoansAndLeaseCashFlowStatement) -> Decimal



Set: ThreeMonths(self: RealizedGainLossOnSaleOfLoansAndLeaseCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: RealizedGainLossOnSaleOfLoansAndLeaseCashFlowStatement) -> Decimal



Set: TwelveMonths(self: RealizedGainLossOnSaleOfLoansAndLeaseCashFlowStatement) = value

"""

    Store = None


class ReceiptsfromCustomersCashFlowStatement(MultiPeriodField):
    """
    Payment received from customers in the Direct Cash Flow.



    ReceiptsfromCustomersCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ReceiptsfromCustomersCashFlowStatement) -> Decimal



Set: NineMonths(self: ReceiptsfromCustomersCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ReceiptsfromCustomersCashFlowStatement) -> Decimal



Set: SixMonths(self: ReceiptsfromCustomersCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ReceiptsfromCustomersCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ReceiptsfromCustomersCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ReceiptsfromCustomersCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ReceiptsfromCustomersCashFlowStatement) = value

"""

    Store = None


class ReceiptsfromGovernmentGrantsCashFlowStatement(MultiPeriodField):
    """
    Cash received from governments in the form of grants in the Direct Cash Flow.



    ReceiptsfromGovernmentGrantsCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ReceiptsfromGovernmentGrantsCashFlowStatement) -> Decimal



Set: NineMonths(self: ReceiptsfromGovernmentGrantsCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ReceiptsfromGovernmentGrantsCashFlowStatement) -> Decimal



Set: SixMonths(self: ReceiptsfromGovernmentGrantsCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ReceiptsfromGovernmentGrantsCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ReceiptsfromGovernmentGrantsCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ReceiptsfromGovernmentGrantsCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ReceiptsfromGovernmentGrantsCashFlowStatement) = value

"""

    Store = None


class ReceivablesAdjustmentsAllowancesBalanceSheet(MultiPeriodField):
    """
    A provision relating to a written agreement to receive money at a specified future date(s) (within one year from the reporting date

                or the normal operating cycle, whichever is longer), consisting of principal as well as any accrued interest).



    ReceivablesAdjustmentsAllowancesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ReceivablesAdjustmentsAllowancesBalanceSheet) -> Decimal



Set: NineMonths(self: ReceivablesAdjustmentsAllowancesBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ReceivablesAdjustmentsAllowancesBalanceSheet) -> Decimal



Set: ThreeMonths(self: ReceivablesAdjustmentsAllowancesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ReceivablesAdjustmentsAllowancesBalanceSheet) -> Decimal



Set: TwelveMonths(self: ReceivablesAdjustmentsAllowancesBalanceSheet) = value

"""

    Store = None


class ReceivablesBalanceSheet(MultiPeriodField):
    """
    The sum of all receivables owed by customers and affiliates within one year, including accounts receivable, notes receivable,

                premiums receivable, and other current receivables.



    ReceivablesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ReceivablesBalanceSheet) -> Decimal



Set: NineMonths(self: ReceivablesBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: ReceivablesBalanceSheet) -> Decimal



Set: OneMonth(self: ReceivablesBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ReceivablesBalanceSheet) -> Decimal



Set: SixMonths(self: ReceivablesBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ReceivablesBalanceSheet) -> Decimal



Set: ThreeMonths(self: ReceivablesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ReceivablesBalanceSheet) -> Decimal



Set: TwelveMonths(self: ReceivablesBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: ReceivablesBalanceSheet) -> Decimal



Set: TwoMonths(self: ReceivablesBalanceSheet) = value

"""

    Store = None


class ReceivableTurnover(MultiPeriodField):
    """
    Revenue / Average Accounts Receivables



    ReceivableTurnover(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: ReceivableTurnover) -> Decimal



Set: OneYear(self: ReceivableTurnover) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ReceivableTurnover) -> Decimal



Set: SixMonths(self: ReceivableTurnover) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ReceivableTurnover) -> Decimal



Set: ThreeMonths(self: ReceivableTurnover) = value

"""

    Store = None


class ReconciledCostOfRevenueIncomeStatement(MultiPeriodField):
    """
    The Cost Of Revenue plus Depreciation, Depletion & Amortization from the IncomeStatement; minus Depreciation, Depletion &

                Amortization from the Cash Flow Statement



    ReconciledCostOfRevenueIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ReconciledCostOfRevenueIncomeStatement) -> Decimal



Set: NineMonths(self: ReconciledCostOfRevenueIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: ReconciledCostOfRevenueIncomeStatement) -> Decimal



Set: OneMonth(self: ReconciledCostOfRevenueIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ReconciledCostOfRevenueIncomeStatement) -> Decimal



Set: SixMonths(self: ReconciledCostOfRevenueIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ReconciledCostOfRevenueIncomeStatement) -> Decimal



Set: ThreeMonths(self: ReconciledCostOfRevenueIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ReconciledCostOfRevenueIncomeStatement) -> Decimal



Set: TwelveMonths(self: ReconciledCostOfRevenueIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: ReconciledCostOfRevenueIncomeStatement) -> Decimal



Set: TwoMonths(self: ReconciledCostOfRevenueIncomeStatement) = value

"""

    Store = None


class ReconciledDepreciationIncomeStatement(MultiPeriodField):
    """
    Is Depreciation, Depletion & Amortization from the Cash Flow Statement



    ReconciledDepreciationIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ReconciledDepreciationIncomeStatement) -> Decimal



Set: NineMonths(self: ReconciledDepreciationIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: ReconciledDepreciationIncomeStatement) -> Decimal



Set: OneMonth(self: ReconciledDepreciationIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ReconciledDepreciationIncomeStatement) -> Decimal



Set: SixMonths(self: ReconciledDepreciationIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ReconciledDepreciationIncomeStatement) -> Decimal



Set: ThreeMonths(self: ReconciledDepreciationIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ReconciledDepreciationIncomeStatement) -> Decimal



Set: TwelveMonths(self: ReconciledDepreciationIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: ReconciledDepreciationIncomeStatement) -> Decimal



Set: TwoMonths(self: ReconciledDepreciationIncomeStatement) = value

"""

    Store = None


class RegressionGrowthofDividends5Years(MultiPeriodField):
    """
    The five-year growth rate of dividends per share, calculated using regression analysis.



    RegressionGrowthofDividends5Years(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: RegressionGrowthofDividends5Years) -> Decimal



Set: FiveYears(self: RegressionGrowthofDividends5Years) = value

"""

    Store = None


class RegressionGrowthOperatingRevenue5Years(MultiPeriodField):
    """
    The five-year growth rate of operating revenue, calculated using regression analysis.



    RegressionGrowthOperatingRevenue5Years(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: RegressionGrowthOperatingRevenue5Years) -> Decimal



Set: FiveYears(self: RegressionGrowthOperatingRevenue5Years) = value

"""

    Store = None


class RegulatoryAssetsBalanceSheet(MultiPeriodField):
    """
    Carrying amount as of the balance sheet date of capitalized costs of regulated entities that are expected to be recovered through

                revenue sources over one year or beyond the normal operating cycle.



    RegulatoryAssetsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: RegulatoryAssetsBalanceSheet) -> Decimal



Set: ThreeMonths(self: RegulatoryAssetsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: RegulatoryAssetsBalanceSheet) -> Decimal



Set: TwelveMonths(self: RegulatoryAssetsBalanceSheet) = value

"""

    Store = None


class RegulatoryLiabilitiesBalanceSheet(MultiPeriodField):
    """
    The amount for the individual regulatory noncurrent liability as itemized in a table of regulatory noncurrent liabilities as of the end of

                the PeriodAsByte. Such things as the costs of energy efficiency programs and low-income energy assistances programs and deferred fuel.

                This item is usually only available for utility industry.



    RegulatoryLiabilitiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: RegulatoryLiabilitiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: RegulatoryLiabilitiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: RegulatoryLiabilitiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: RegulatoryLiabilitiesBalanceSheet) = value

"""

    Store = None


class ReinsuranceandOtherRecoveriesReceivedCashFlowStatement(MultiPeriodField):
    """
    Cash received from reinsurance income or other recoveries income in operating cash flow, using the direct method. This item is

                usually only available for insurance industry



    ReinsuranceandOtherRecoveriesReceivedCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ReinsuranceandOtherRecoveriesReceivedCashFlowStatement) -> Decimal



Set: NineMonths(self: ReinsuranceandOtherRecoveriesReceivedCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ReinsuranceandOtherRecoveriesReceivedCashFlowStatement) -> Decimal



Set: SixMonths(self: ReinsuranceandOtherRecoveriesReceivedCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ReinsuranceandOtherRecoveriesReceivedCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ReinsuranceandOtherRecoveriesReceivedCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ReinsuranceandOtherRecoveriesReceivedCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ReinsuranceandOtherRecoveriesReceivedCashFlowStatement) = value

"""

    Store = None


class ReinsuranceAssetsBalanceSheet(MultiPeriodField):
    """
    Reinsurance asset is insurance that is purchased by an insurance company from another insurance company.



    ReinsuranceAssetsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ReinsuranceAssetsBalanceSheet) -> Decimal



Set: ThreeMonths(self: ReinsuranceAssetsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ReinsuranceAssetsBalanceSheet) -> Decimal



Set: TwelveMonths(self: ReinsuranceAssetsBalanceSheet) = value

"""

    Store = None


class ReinsuranceBalancesPayableBalanceSheet(MultiPeriodField):
    """
    The carrying amount as of the balance sheet date of the known and estimated amounts owed to insurers under reinsurance

                treaties or other arrangements. This item is usually only available for insurance industry.



    ReinsuranceBalancesPayableBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ReinsuranceBalancesPayableBalanceSheet) -> Decimal



Set: ThreeMonths(self: ReinsuranceBalancesPayableBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ReinsuranceBalancesPayableBalanceSheet) -> Decimal



Set: TwelveMonths(self: ReinsuranceBalancesPayableBalanceSheet) = value

"""

    Store = None


class ReinsuranceRecoverableBalanceSheet(MultiPeriodField):
    """
    The amount of benefits the ceding insurer expects to recover on insurance policies ceded to other insurance entities as of the

                balance sheet date for all guaranteed benefit types. It includes estimated amounts for claims incurred but not reported, and policy

                benefits, net of any related valuation allowance.



    ReinsuranceRecoverableBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ReinsuranceRecoverableBalanceSheet) -> Decimal



Set: ThreeMonths(self: ReinsuranceRecoverableBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ReinsuranceRecoverableBalanceSheet) -> Decimal



Set: TwelveMonths(self: ReinsuranceRecoverableBalanceSheet) = value

"""

    Store = None


class ReinsuranceRecoveriesClaimsandBenefitsIncomeStatement(MultiPeriodField):
    """
    Claim on the reinsurance company and take the benefits.



    ReinsuranceRecoveriesClaimsandBenefitsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ReinsuranceRecoveriesClaimsandBenefitsIncomeStatement) -> Decimal



Set: NineMonths(self: ReinsuranceRecoveriesClaimsandBenefitsIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ReinsuranceRecoveriesClaimsandBenefitsIncomeStatement) -> Decimal



Set: SixMonths(self: ReinsuranceRecoveriesClaimsandBenefitsIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ReinsuranceRecoveriesClaimsandBenefitsIncomeStatement) -> Decimal



Set: ThreeMonths(self: ReinsuranceRecoveriesClaimsandBenefitsIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ReinsuranceRecoveriesClaimsandBenefitsIncomeStatement) -> Decimal



Set: TwelveMonths(self: ReinsuranceRecoveriesClaimsandBenefitsIncomeStatement) = value

"""

    Store = None


class ReinsuranceRecoveriesofInsuranceLiabilitiesIncomeStatement(MultiPeriodField):
    """
    Income/Expense due to recoveries from reinsurers for insurance liabilities.



    ReinsuranceRecoveriesofInsuranceLiabilitiesIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ReinsuranceRecoveriesofInsuranceLiabilitiesIncomeStatement) -> Decimal



Set: NineMonths(self: ReinsuranceRecoveriesofInsuranceLiabilitiesIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ReinsuranceRecoveriesofInsuranceLiabilitiesIncomeStatement) -> Decimal



Set: SixMonths(self: ReinsuranceRecoveriesofInsuranceLiabilitiesIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ReinsuranceRecoveriesofInsuranceLiabilitiesIncomeStatement) -> Decimal



Set: ThreeMonths(self: ReinsuranceRecoveriesofInsuranceLiabilitiesIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ReinsuranceRecoveriesofInsuranceLiabilitiesIncomeStatement) -> Decimal



Set: TwelveMonths(self: ReinsuranceRecoveriesofInsuranceLiabilitiesIncomeStatement) = value

"""

    Store = None


class ReinsuranceRecoveriesofInvestmentContractIncomeStatement(MultiPeriodField):
    """
    Income/Expense due to recoveries from reinsurers for Investment Contracts.



    ReinsuranceRecoveriesofInvestmentContractIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ReinsuranceRecoveriesofInvestmentContractIncomeStatement) -> Decimal



Set: NineMonths(self: ReinsuranceRecoveriesofInvestmentContractIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ReinsuranceRecoveriesofInvestmentContractIncomeStatement) -> Decimal



Set: SixMonths(self: ReinsuranceRecoveriesofInvestmentContractIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ReinsuranceRecoveriesofInvestmentContractIncomeStatement) -> Decimal



Set: ThreeMonths(self: ReinsuranceRecoveriesofInvestmentContractIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ReinsuranceRecoveriesofInvestmentContractIncomeStatement) -> Decimal



Set: TwelveMonths(self: ReinsuranceRecoveriesofInvestmentContractIncomeStatement) = value

"""

    Store = None


class RentandLandingFeesCostofRevenueIncomeStatement(MultiPeriodField):
    """
    Costs paid to use the facilities necessary to generate revenue during the accounting PeriodAsByte.



    RentandLandingFeesCostofRevenueIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: RentandLandingFeesCostofRevenueIncomeStatement) -> Decimal



Set: NineMonths(self: RentandLandingFeesCostofRevenueIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: RentandLandingFeesCostofRevenueIncomeStatement) -> Decimal



Set: SixMonths(self: RentandLandingFeesCostofRevenueIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: RentandLandingFeesCostofRevenueIncomeStatement) -> Decimal



Set: ThreeMonths(self: RentandLandingFeesCostofRevenueIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: RentandLandingFeesCostofRevenueIncomeStatement) -> Decimal



Set: TwelveMonths(self: RentandLandingFeesCostofRevenueIncomeStatement) = value

"""

    Store = None


class RentAndLandingFeesIncomeStatement(MultiPeriodField):
    """
    Rent fees are the cost of occupying space during the accounting PeriodAsByte. Landing fees are a change paid to an airport company for

                landing at a particular airport. This item is not available for insurance industry.



    RentAndLandingFeesIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: RentAndLandingFeesIncomeStatement) -> Decimal



Set: NineMonths(self: RentAndLandingFeesIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: RentAndLandingFeesIncomeStatement) -> Decimal



Set: OneMonth(self: RentAndLandingFeesIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: RentAndLandingFeesIncomeStatement) -> Decimal



Set: SixMonths(self: RentAndLandingFeesIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: RentAndLandingFeesIncomeStatement) -> Decimal



Set: ThreeMonths(self: RentAndLandingFeesIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: RentAndLandingFeesIncomeStatement) -> Decimal



Set: TwelveMonths(self: RentAndLandingFeesIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: RentAndLandingFeesIncomeStatement) -> Decimal



Set: TwoMonths(self: RentAndLandingFeesIncomeStatement) = value

"""

    Store = None


class RentExpenseSupplementalIncomeStatement(MultiPeriodField):
    """
    The sum of all rent expenses incurred by the company for operating leases during the year, it is a supplemental value which would

                be reported outside consolidated statements or consolidated statement's footnotes.



    RentExpenseSupplementalIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: RentExpenseSupplementalIncomeStatement) -> Decimal



Set: NineMonths(self: RentExpenseSupplementalIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: RentExpenseSupplementalIncomeStatement) -> Decimal



Set: SixMonths(self: RentExpenseSupplementalIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: RentExpenseSupplementalIncomeStatement) -> Decimal



Set: ThreeMonths(self: RentExpenseSupplementalIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: RentExpenseSupplementalIncomeStatement) -> Decimal



Set: TwelveMonths(self: RentExpenseSupplementalIncomeStatement) = value

"""

    Store = None


class ReorganizationOtherCostsCashFlowStatement(MultiPeriodField):
    """
    A non-cash adjustment relating to restructuring costs.



    ReorganizationOtherCostsCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ReorganizationOtherCostsCashFlowStatement) -> Decimal



Set: NineMonths(self: ReorganizationOtherCostsCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ReorganizationOtherCostsCashFlowStatement) -> Decimal



Set: SixMonths(self: ReorganizationOtherCostsCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ReorganizationOtherCostsCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ReorganizationOtherCostsCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ReorganizationOtherCostsCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ReorganizationOtherCostsCashFlowStatement) = value

"""

    Store = None


class RepaymentinLeaseFinancingCashFlowStatement(MultiPeriodField):
    """
    The cash outflow to repay lease financing during the PeriodAsByte.



    RepaymentinLeaseFinancingCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: RepaymentinLeaseFinancingCashFlowStatement) -> Decimal



Set: NineMonths(self: RepaymentinLeaseFinancingCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: RepaymentinLeaseFinancingCashFlowStatement) -> Decimal



Set: SixMonths(self: RepaymentinLeaseFinancingCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: RepaymentinLeaseFinancingCashFlowStatement) -> Decimal



Set: ThreeMonths(self: RepaymentinLeaseFinancingCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: RepaymentinLeaseFinancingCashFlowStatement) -> Decimal



Set: TwelveMonths(self: RepaymentinLeaseFinancingCashFlowStatement) = value

"""

    Store = None


class RepaymentOfDebtCashFlowStatement(MultiPeriodField):
    """
    Payments to Settle Long Term Debt plus Payments to Settle Short Term Debt.



    RepaymentOfDebtCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: RepaymentOfDebtCashFlowStatement) -> Decimal



Set: NineMonths(self: RepaymentOfDebtCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: RepaymentOfDebtCashFlowStatement) -> Decimal



Set: OneMonth(self: RepaymentOfDebtCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: RepaymentOfDebtCashFlowStatement) -> Decimal



Set: SixMonths(self: RepaymentOfDebtCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: RepaymentOfDebtCashFlowStatement) -> Decimal



Set: ThreeMonths(self: RepaymentOfDebtCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: RepaymentOfDebtCashFlowStatement) -> Decimal



Set: TwelveMonths(self: RepaymentOfDebtCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: RepaymentOfDebtCashFlowStatement) -> Decimal



Set: TwoMonths(self: RepaymentOfDebtCashFlowStatement) = value

"""

    Store = None


class ReportedNormalizedBasicEPS(MultiPeriodField):
    """
    Normalized Basic EPS as reported by the company in the financial statements.



    ReportedNormalizedBasicEPS(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ReportedNormalizedBasicEPS) -> Decimal



Set: NineMonths(self: ReportedNormalizedBasicEPS) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ReportedNormalizedBasicEPS) -> Decimal



Set: SixMonths(self: ReportedNormalizedBasicEPS) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ReportedNormalizedBasicEPS) -> Decimal



Set: ThreeMonths(self: ReportedNormalizedBasicEPS) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ReportedNormalizedBasicEPS) -> Decimal



Set: TwelveMonths(self: ReportedNormalizedBasicEPS) = value

"""

    Store = None


class ReportedNormalizedDilutedEPS(MultiPeriodField):
    """
    Normalized Diluted EPS as reported by the company in the financial statements.



    ReportedNormalizedDilutedEPS(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ReportedNormalizedDilutedEPS) -> Decimal



Set: NineMonths(self: ReportedNormalizedDilutedEPS) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ReportedNormalizedDilutedEPS) -> Decimal



Set: SixMonths(self: ReportedNormalizedDilutedEPS) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ReportedNormalizedDilutedEPS) -> Decimal



Set: ThreeMonths(self: ReportedNormalizedDilutedEPS) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ReportedNormalizedDilutedEPS) -> Decimal



Set: TwelveMonths(self: ReportedNormalizedDilutedEPS) = value

"""

    Store = None


class RepurchaseOfCapitalStockCashFlowStatement(MultiPeriodField):
    """
    Payments for Common Stock plus Payments for Preferred Stock.



    RepurchaseOfCapitalStockCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: RepurchaseOfCapitalStockCashFlowStatement) -> Decimal



Set: NineMonths(self: RepurchaseOfCapitalStockCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: RepurchaseOfCapitalStockCashFlowStatement) -> Decimal



Set: OneMonth(self: RepurchaseOfCapitalStockCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: RepurchaseOfCapitalStockCashFlowStatement) -> Decimal



Set: SixMonths(self: RepurchaseOfCapitalStockCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: RepurchaseOfCapitalStockCashFlowStatement) -> Decimal



Set: ThreeMonths(self: RepurchaseOfCapitalStockCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: RepurchaseOfCapitalStockCashFlowStatement) -> Decimal



Set: TwelveMonths(self: RepurchaseOfCapitalStockCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: RepurchaseOfCapitalStockCashFlowStatement) -> Decimal



Set: TwoMonths(self: RepurchaseOfCapitalStockCashFlowStatement) = value

"""

    Store = None


class ResearchAndDevelopmentExpensesSupplementalIncomeStatement(MultiPeriodField):
    """
    The aggregate amount of research and development expenses during the year. It is a supplemental value which would be reported

                outside consolidated statements.



    ResearchAndDevelopmentExpensesSupplementalIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ResearchAndDevelopmentExpensesSupplementalIncomeStatement) -> Decimal



Set: NineMonths(self: ResearchAndDevelopmentExpensesSupplementalIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ResearchAndDevelopmentExpensesSupplementalIncomeStatement) -> Decimal



Set: SixMonths(self: ResearchAndDevelopmentExpensesSupplementalIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ResearchAndDevelopmentExpensesSupplementalIncomeStatement) -> Decimal



Set: ThreeMonths(self: ResearchAndDevelopmentExpensesSupplementalIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ResearchAndDevelopmentExpensesSupplementalIncomeStatement) -> Decimal



Set: TwelveMonths(self: ResearchAndDevelopmentExpensesSupplementalIncomeStatement) = value

"""

    Store = None


class ResearchAndDevelopmentIncomeStatement(MultiPeriodField):
    """
    The aggregate amount of research and development expenses during the year.



    ResearchAndDevelopmentIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ResearchAndDevelopmentIncomeStatement) -> Decimal



Set: NineMonths(self: ResearchAndDevelopmentIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: ResearchAndDevelopmentIncomeStatement) -> Decimal



Set: OneMonth(self: ResearchAndDevelopmentIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ResearchAndDevelopmentIncomeStatement) -> Decimal



Set: SixMonths(self: ResearchAndDevelopmentIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ResearchAndDevelopmentIncomeStatement) -> Decimal



Set: ThreeMonths(self: ResearchAndDevelopmentIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ResearchAndDevelopmentIncomeStatement) -> Decimal



Set: TwelveMonths(self: ResearchAndDevelopmentIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: ResearchAndDevelopmentIncomeStatement) -> Decimal



Set: TwoMonths(self: ResearchAndDevelopmentIncomeStatement) = value

"""

    Store = None


class RestrictedCashAndCashEquivalentsBalanceSheet(MultiPeriodField):
    """
    The carrying amounts of cash and cash equivalent items which are restricted as to withdrawal or usage. This item is available for

                bank and insurance industries.



    RestrictedCashAndCashEquivalentsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: RestrictedCashAndCashEquivalentsBalanceSheet) -> Decimal



Set: NineMonths(self: RestrictedCashAndCashEquivalentsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: RestrictedCashAndCashEquivalentsBalanceSheet) -> Decimal



Set: SixMonths(self: RestrictedCashAndCashEquivalentsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: RestrictedCashAndCashEquivalentsBalanceSheet) -> Decimal



Set: ThreeMonths(self: RestrictedCashAndCashEquivalentsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: RestrictedCashAndCashEquivalentsBalanceSheet) -> Decimal



Set: TwelveMonths(self: RestrictedCashAndCashEquivalentsBalanceSheet) = value

"""

    Store = None


class RestrictedCashAndInvestmentsBalanceSheet(MultiPeriodField):
    """
    The cash and investments whose use in whole or in part is restricted for the long-term, generally by contractual agreements or

                regulatory requirements. This item is usually only available for bank industry.



    RestrictedCashAndInvestmentsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: RestrictedCashAndInvestmentsBalanceSheet) -> Decimal



Set: NineMonths(self: RestrictedCashAndInvestmentsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: RestrictedCashAndInvestmentsBalanceSheet) -> Decimal



Set: SixMonths(self: RestrictedCashAndInvestmentsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: RestrictedCashAndInvestmentsBalanceSheet) -> Decimal



Set: ThreeMonths(self: RestrictedCashAndInvestmentsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: RestrictedCashAndInvestmentsBalanceSheet) -> Decimal



Set: TwelveMonths(self: RestrictedCashAndInvestmentsBalanceSheet) = value

"""

    Store = None


class RestrictedCashBalanceSheet(MultiPeriodField):
    """
    The carrying amounts of cash and cash equivalent items, which are restricted as to withdrawal or usage. Restrictions may include

                legally restricted deposits held as compensating balances against short-term borrowing arrangements, contracts entered into with

                others, or entity statements of intention with regard to particular deposits; however, time deposits and short-term certificates of

                deposit are not generally included in legally restricted deposits. Excludes compensating balance arrangements that are not

                agreements, which legally restrict the use of cash amounts shown on the balance sheet. For a classified balance sheet, represents

                the current portion only (the non-current portion has a separate concept); for an unclassified balance sheet represents the entire

                amount. This item is usually not available for bank and insurance industries.



    RestrictedCashBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: RestrictedCashBalanceSheet) -> Decimal



Set: NineMonths(self: RestrictedCashBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: RestrictedCashBalanceSheet) -> Decimal



Set: OneMonth(self: RestrictedCashBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: RestrictedCashBalanceSheet) -> Decimal



Set: SixMonths(self: RestrictedCashBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: RestrictedCashBalanceSheet) -> Decimal



Set: ThreeMonths(self: RestrictedCashBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: RestrictedCashBalanceSheet) -> Decimal



Set: TwelveMonths(self: RestrictedCashBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: RestrictedCashBalanceSheet) -> Decimal



Set: TwoMonths(self: RestrictedCashBalanceSheet) = value

"""

    Store = None


class RestrictedCommonStockBalanceSheet(MultiPeriodField):
    """
    Shares of stock for which sale is contractually or governmentally restricted for a given period of time. Stock that is acquired through

                an employee stock option plan or other private means may not be transferred. Restricted stock must be traded in compliance with

                special SEC regulations.



    RestrictedCommonStockBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: RestrictedCommonStockBalanceSheet) -> Decimal



Set: NineMonths(self: RestrictedCommonStockBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: RestrictedCommonStockBalanceSheet) -> Decimal



Set: ThreeMonths(self: RestrictedCommonStockBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: RestrictedCommonStockBalanceSheet) -> Decimal



Set: TwelveMonths(self: RestrictedCommonStockBalanceSheet) = value

"""

    Store = None


class RestrictedInvestmentsBalanceSheet(MultiPeriodField):
    """
    Investments whose use is restricted in whole or in part, generally by contractual agreements or regulatory requirements. This item

                is usually only available for bank industry.



    RestrictedInvestmentsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: RestrictedInvestmentsBalanceSheet) -> Decimal



Set: ThreeMonths(self: RestrictedInvestmentsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: RestrictedInvestmentsBalanceSheet) -> Decimal



Set: TwelveMonths(self: RestrictedInvestmentsBalanceSheet) = value

"""

    Store = None


class RestructuringAndMergernAcquisitionIncomeStatement(MultiPeriodField):
    """
    Expenses are related to restructuring, merger, or acquisitions. Restructuring expenses are charges associated with the

                consolidation and relocation of operations, disposition or abandonment of operations or productive assets. Merger and acquisition

                expenses are the amount of costs of a business combination including legal, accounting, and other costs that were charged to

                expense during the PeriodAsByte.



    RestructuringAndMergernAcquisitionIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: RestructuringAndMergernAcquisitionIncomeStatement) -> Decimal



Set: NineMonths(self: RestructuringAndMergernAcquisitionIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: RestructuringAndMergernAcquisitionIncomeStatement) -> Decimal



Set: OneMonth(self: RestructuringAndMergernAcquisitionIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: RestructuringAndMergernAcquisitionIncomeStatement) -> Decimal



Set: SixMonths(self: RestructuringAndMergernAcquisitionIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: RestructuringAndMergernAcquisitionIncomeStatement) -> Decimal



Set: ThreeMonths(self: RestructuringAndMergernAcquisitionIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: RestructuringAndMergernAcquisitionIncomeStatement) -> Decimal



Set: TwelveMonths(self: RestructuringAndMergernAcquisitionIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: RestructuringAndMergernAcquisitionIncomeStatement) -> Decimal



Set: TwoMonths(self: RestructuringAndMergernAcquisitionIncomeStatement) = value

"""

    Store = None


class RetainedEarningsBalanceSheet(MultiPeriodField):
    """
    The cumulative net income of the company from the date of its inception (or reorganization) to the date of the financial statement

                less the cumulative distributions to shareholders either directly (dividends) or indirectly (treasury stock).



    RetainedEarningsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: RetainedEarningsBalanceSheet) -> Decimal



Set: NineMonths(self: RetainedEarningsBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: RetainedEarningsBalanceSheet) -> Decimal



Set: OneMonth(self: RetainedEarningsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: RetainedEarningsBalanceSheet) -> Decimal



Set: SixMonths(self: RetainedEarningsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: RetainedEarningsBalanceSheet) -> Decimal



Set: ThreeMonths(self: RetainedEarningsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: RetainedEarningsBalanceSheet) -> Decimal



Set: TwelveMonths(self: RetainedEarningsBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: RetainedEarningsBalanceSheet) -> Decimal



Set: TwoMonths(self: RetainedEarningsBalanceSheet) = value

"""

    Store = None


class RevenueGrowth(MultiPeriodField):
    """
    The growth in the company's revenue on a percentage basis. Morningstar calculates the growth percentage based on the

                underlying revenue data reported in the Income Statement within the company filings or reports.



    RevenueGrowth(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: RevenueGrowth) -> Decimal



Set: FiveYears(self: RevenueGrowth) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: RevenueGrowth) -> Decimal



Set: OneYear(self: RevenueGrowth) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: RevenueGrowth) -> Decimal



Set: ThreeMonths(self: RevenueGrowth) = value

"""

    ThreeYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeYears period value for the field



Get: ThreeYears(self: RevenueGrowth) -> Decimal



Set: ThreeYears(self: RevenueGrowth) = value

"""

    Store = None


class ROA(MultiPeriodField):
    """
    Net Income / Average Total Assets



    ROA(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: ROA) -> Decimal



Set: OneYear(self: ROA) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ROA) -> Decimal



Set: SixMonths(self: ROA) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ROA) -> Decimal



Set: ThreeMonths(self: ROA) = value

"""

    Store = None


class ROA5YrAvg(MultiPeriodField):
    """
    This is the simple average of the company's ROA over the last 5 years. Return on asset is calculated by dividing a company's annual

                earnings by its average total assets.



    ROA5YrAvg(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: ROA5YrAvg) -> Decimal



Set: FiveYears(self: ROA5YrAvg) = value

"""

    Store = None


class ROE(MultiPeriodField):
    """
    Net Income / Average Total Common Equity



    ROE(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: ROE) -> Decimal



Set: OneYear(self: ROE) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ROE) -> Decimal



Set: SixMonths(self: ROE) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ROE) -> Decimal



Set: ThreeMonths(self: ROE) = value

"""

    Store = None


class ROE5YrAvg(MultiPeriodField):
    """
    This is the simple average of the company's ROE over the last 5 years. Return on equity reveals how much profit a company has

                earned in comparison to the total amount of shareholder equity found on the balance sheet.



    ROE5YrAvg(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: ROE5YrAvg) -> Decimal



Set: FiveYears(self: ROE5YrAvg) = value

"""

    Store = None


class ROIC(MultiPeriodField):
    """
    Net Income / (Total Equity + Long-term Debt and Capital Lease Obligation + Short-term Debt and Capital Lease Obligation)



    ROIC(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: ROIC) -> Decimal



Set: OneYear(self: ROIC) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ROIC) -> Decimal



Set: SixMonths(self: ROIC) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ROIC) -> Decimal



Set: ThreeMonths(self: ROIC) = value

"""

    Store = None


class SalariesAndWagesIncomeStatement(MultiPeriodField):
    """
    All salary, wages, compensation, management fees, and employee benefit expenses.



    SalariesAndWagesIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: SalariesAndWagesIncomeStatement) -> Decimal



Set: NineMonths(self: SalariesAndWagesIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: SalariesAndWagesIncomeStatement) -> Decimal



Set: OneMonth(self: SalariesAndWagesIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: SalariesAndWagesIncomeStatement) -> Decimal



Set: SixMonths(self: SalariesAndWagesIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: SalariesAndWagesIncomeStatement) -> Decimal



Set: ThreeMonths(self: SalariesAndWagesIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: SalariesAndWagesIncomeStatement) -> Decimal



Set: TwelveMonths(self: SalariesAndWagesIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: SalariesAndWagesIncomeStatement) -> Decimal



Set: TwoMonths(self: SalariesAndWagesIncomeStatement) = value

"""

    Store = None


class SaleOfBusinessCashFlowStatement(MultiPeriodField):
    """
    Proceeds received from selling a business including proceeds from a subsidiary, and proceeds from an affiliated company.



    SaleOfBusinessCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: SaleOfBusinessCashFlowStatement) -> Decimal



Set: NineMonths(self: SaleOfBusinessCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: SaleOfBusinessCashFlowStatement) -> Decimal



Set: OneMonth(self: SaleOfBusinessCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: SaleOfBusinessCashFlowStatement) -> Decimal



Set: SixMonths(self: SaleOfBusinessCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: SaleOfBusinessCashFlowStatement) -> Decimal



Set: ThreeMonths(self: SaleOfBusinessCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: SaleOfBusinessCashFlowStatement) -> Decimal



Set: TwelveMonths(self: SaleOfBusinessCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: SaleOfBusinessCashFlowStatement) -> Decimal



Set: TwoMonths(self: SaleOfBusinessCashFlowStatement) = value

"""

    Store = None


class SaleOfIntangiblesCashFlowStatement(MultiPeriodField):
    """
    The amount of capital inflow from the sale of all kinds of intangible assets.



    SaleOfIntangiblesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: SaleOfIntangiblesCashFlowStatement) -> Decimal



Set: NineMonths(self: SaleOfIntangiblesCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: SaleOfIntangiblesCashFlowStatement) -> Decimal



Set: OneMonth(self: SaleOfIntangiblesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: SaleOfIntangiblesCashFlowStatement) -> Decimal



Set: SixMonths(self: SaleOfIntangiblesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: SaleOfIntangiblesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: SaleOfIntangiblesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: SaleOfIntangiblesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: SaleOfIntangiblesCashFlowStatement) = value

"""

    Store = None


class SaleOfInvestmentCashFlowStatement(MultiPeriodField):
    """
    Proceeds received from selling all kind of investments, including both long term and short term.



    SaleOfInvestmentCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: SaleOfInvestmentCashFlowStatement) -> Decimal



Set: NineMonths(self: SaleOfInvestmentCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: SaleOfInvestmentCashFlowStatement) -> Decimal



Set: OneMonth(self: SaleOfInvestmentCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: SaleOfInvestmentCashFlowStatement) -> Decimal



Set: SixMonths(self: SaleOfInvestmentCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: SaleOfInvestmentCashFlowStatement) -> Decimal



Set: ThreeMonths(self: SaleOfInvestmentCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: SaleOfInvestmentCashFlowStatement) -> Decimal



Set: TwelveMonths(self: SaleOfInvestmentCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: SaleOfInvestmentCashFlowStatement) -> Decimal



Set: TwoMonths(self: SaleOfInvestmentCashFlowStatement) = value

"""

    Store = None


class SaleOfInvestmentPropertiesCashFlowStatement(MultiPeriodField):
    """
    Cash inflow from sale of investment properties during the accounting PeriodAsByte.



    SaleOfInvestmentPropertiesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: SaleOfInvestmentPropertiesCashFlowStatement) -> Decimal



Set: NineMonths(self: SaleOfInvestmentPropertiesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: SaleOfInvestmentPropertiesCashFlowStatement) -> Decimal



Set: SixMonths(self: SaleOfInvestmentPropertiesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: SaleOfInvestmentPropertiesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: SaleOfInvestmentPropertiesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: SaleOfInvestmentPropertiesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: SaleOfInvestmentPropertiesCashFlowStatement) = value

"""

    Store = None


class SaleofJointVentureAssociateCashFlowStatement(MultiPeriodField):
    """
    Cash inflow from the disposal of joint venture/associates (investment below 50%).



    SaleofJointVentureAssociateCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: SaleofJointVentureAssociateCashFlowStatement) -> Decimal



Set: NineMonths(self: SaleofJointVentureAssociateCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: SaleofJointVentureAssociateCashFlowStatement) -> Decimal



Set: SixMonths(self: SaleofJointVentureAssociateCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: SaleofJointVentureAssociateCashFlowStatement) -> Decimal



Set: ThreeMonths(self: SaleofJointVentureAssociateCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: SaleofJointVentureAssociateCashFlowStatement) -> Decimal



Set: TwelveMonths(self: SaleofJointVentureAssociateCashFlowStatement) = value

"""

    Store = None


class SaleOfPPECashFlowStatement(MultiPeriodField):
    """
    Proceeds from selling any fixed assets such as property, plant and equipment, which also includes retirement of equipment.



    SaleOfPPECashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: SaleOfPPECashFlowStatement) -> Decimal



Set: NineMonths(self: SaleOfPPECashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: SaleOfPPECashFlowStatement) -> Decimal



Set: OneMonth(self: SaleOfPPECashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: SaleOfPPECashFlowStatement) -> Decimal



Set: SixMonths(self: SaleOfPPECashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: SaleOfPPECashFlowStatement) -> Decimal



Set: ThreeMonths(self: SaleOfPPECashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: SaleOfPPECashFlowStatement) -> Decimal



Set: TwelveMonths(self: SaleOfPPECashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: SaleOfPPECashFlowStatement) -> Decimal



Set: TwoMonths(self: SaleOfPPECashFlowStatement) = value

"""

    Store = None


class SaleofSubsidiariesCashFlowStatement(MultiPeriodField):
    """
    Cash inflow from the disposal of any subsidiaries.



    SaleofSubsidiariesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: SaleofSubsidiariesCashFlowStatement) -> Decimal



Set: SixMonths(self: SaleofSubsidiariesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: SaleofSubsidiariesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: SaleofSubsidiariesCashFlowStatement) = value

"""

    Store = None


class SalesPerEmployee(MultiPeriodField):
    """
    Refers to the ratio of Revenue to Employees. Morningstar calculates the ratio by using the underlying data reported in the company

                filings or reports:     Revenue / Employee Number.



    SalesPerEmployee(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: SalesPerEmployee) -> Decimal



Set: NineMonths(self: SalesPerEmployee) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: SalesPerEmployee) -> Decimal



Set: OneMonth(self: SalesPerEmployee) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: SalesPerEmployee) -> Decimal



Set: OneYear(self: SalesPerEmployee) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: SalesPerEmployee) -> Decimal



Set: SixMonths(self: SalesPerEmployee) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: SalesPerEmployee) -> Decimal



Set: ThreeMonths(self: SalesPerEmployee) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: SalesPerEmployee) -> Decimal



Set: TwoMonths(self: SalesPerEmployee) = value

"""

    Store = None


class SecuritiesActivitiesIncomeStatement(MultiPeriodField):
    """
    Income/Loss from Securities and Activities



    SecuritiesActivitiesIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: SecuritiesActivitiesIncomeStatement) -> Decimal



Set: NineMonths(self: SecuritiesActivitiesIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: SecuritiesActivitiesIncomeStatement) -> Decimal



Set: SixMonths(self: SecuritiesActivitiesIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: SecuritiesActivitiesIncomeStatement) -> Decimal



Set: ThreeMonths(self: SecuritiesActivitiesIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: SecuritiesActivitiesIncomeStatement) -> Decimal



Set: TwelveMonths(self: SecuritiesActivitiesIncomeStatement) = value

"""

    Store = None


class SecuritiesAmortizationIncomeStatement(MultiPeriodField):
    """
    The gradual elimination of a liability, such as a mortgage, in regular payments over a specified period of time. Such payments must

                be sufficient to cover both principal and interest.



    SecuritiesAmortizationIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: SecuritiesAmortizationIncomeStatement) -> Decimal



Set: NineMonths(self: SecuritiesAmortizationIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: SecuritiesAmortizationIncomeStatement) -> Decimal



Set: OneMonth(self: SecuritiesAmortizationIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: SecuritiesAmortizationIncomeStatement) -> Decimal



Set: SixMonths(self: SecuritiesAmortizationIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: SecuritiesAmortizationIncomeStatement) -> Decimal



Set: ThreeMonths(self: SecuritiesAmortizationIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: SecuritiesAmortizationIncomeStatement) -> Decimal



Set: TwelveMonths(self: SecuritiesAmortizationIncomeStatement) = value

"""

    Store = None


class SecuritiesAndInvestmentsBalanceSheet(MultiPeriodField):
    """
    Asset, often applicable to Banks, which refers to the aggregate amount of all securities and investments.



    SecuritiesAndInvestmentsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: SecuritiesAndInvestmentsBalanceSheet) -> Decimal



Set: NineMonths(self: SecuritiesAndInvestmentsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: SecuritiesAndInvestmentsBalanceSheet) -> Decimal



Set: SixMonths(self: SecuritiesAndInvestmentsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: SecuritiesAndInvestmentsBalanceSheet) -> Decimal



Set: ThreeMonths(self: SecuritiesAndInvestmentsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: SecuritiesAndInvestmentsBalanceSheet) -> Decimal



Set: TwelveMonths(self: SecuritiesAndInvestmentsBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: SecuritiesAndInvestmentsBalanceSheet) -> Decimal



Set: TwoMonths(self: SecuritiesAndInvestmentsBalanceSheet) = value

"""

    Store = None


class SecuritiesLendingCollateralBalanceSheet(MultiPeriodField):
    """
    The carrying value as of the balance sheet date of the liabilities collateral securities loaned to other broker-dealers. Borrowers of

                securities generally are required to provide collateral to the lenders of securities, commonly cash but sometimes other securities or

                standby letters of credit, with a value slightly higher than that of the securities borrowed.



    SecuritiesLendingCollateralBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: SecuritiesLendingCollateralBalanceSheet) -> Decimal



Set: ThreeMonths(self: SecuritiesLendingCollateralBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: SecuritiesLendingCollateralBalanceSheet) -> Decimal



Set: TwelveMonths(self: SecuritiesLendingCollateralBalanceSheet) = value

"""

    Store = None


class SecuritiesLoanedBalanceSheet(MultiPeriodField):
    """
    The carrying value as of the balance sheet date of securities loaned to other broker dealers, typically used by such parties to cover

                short sales, secured by cash or other securities furnished by such parties until the borrowing is closed.



    SecuritiesLoanedBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: SecuritiesLoanedBalanceSheet) -> Decimal



Set: ThreeMonths(self: SecuritiesLoanedBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: SecuritiesLoanedBalanceSheet) -> Decimal



Set: TwelveMonths(self: SecuritiesLoanedBalanceSheet) = value

"""

    Store = None


class SecurityAgreeToBeResellBalanceSheet(MultiPeriodField):
    """
    The carrying value of funds outstanding loaned in the form of security resale agreements if the agreement requires the purchaser to

                resell the identical security purchased or a security that meets the definition of "substantially the same" in the case of a dollar roll.

                Also includes purchases of participations in pools of securities that are subject to a resale agreement.



    SecurityAgreeToBeResellBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: SecurityAgreeToBeResellBalanceSheet) -> Decimal



Set: ThreeMonths(self: SecurityAgreeToBeResellBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: SecurityAgreeToBeResellBalanceSheet) -> Decimal



Set: TwelveMonths(self: SecurityAgreeToBeResellBalanceSheet) = value

"""

    Store = None


class SecurityBorrowedBalanceSheet(MultiPeriodField):
    """
    The securities borrowed or on loan, which is the temporary loan of securities by a lender to a borrower in exchange for cash.  This

                item is usually only available for bank industry.



    SecurityBorrowedBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: SecurityBorrowedBalanceSheet) -> Decimal



Set: ThreeMonths(self: SecurityBorrowedBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: SecurityBorrowedBalanceSheet) -> Decimal



Set: TwelveMonths(self: SecurityBorrowedBalanceSheet) = value

"""

    Store = None


class SecurityReference(object):
    """
    Definition of the SecurityReference class



    SecurityReference()
    """

    def UpdateValues(self, update):
        """
        UpdateValues(self: SecurityReference, update: SecurityReference)

            Applies updated values from update to this

             instance





            update: The next data update for this instance
        """
        pass

    CommonShareSubType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Refers to the type of securities that can be found within the equity database. For the vast majority, this value will populate as null

            for regular common shares. For a minority of shareclasses, this will populate as either "Participating Preferred", "Closed-End Fund",

            "Foreign Share", or "Foreign Participated Preferred" which reflects our limited coverage of these types of securities within our

            equity database.



Get: CommonShareSubType(self: SecurityReference) -> str



Set: CommonShareSubType(self: SecurityReference) = value

"""

    ConversionRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The relationship between the chosen share class and the primary share class.



Get: ConversionRatio(self: SecurityReference) -> Decimal



Set: ConversionRatio(self: SecurityReference) = value

"""

    CurrencyId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """3 Character ISO code of the currency that the exchange price is denominated in; i.e. the trading currency of the security.  See

            separate reference document for Currency Mappings.



Get: CurrencyId(self: SecurityReference) -> str



Set: CurrencyId(self: SecurityReference) = value

"""

    DelistingDate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The date on which an inactive security was delisted from an exchange.



Get: DelistingDate(self: SecurityReference) -> DateTime



Set: DelistingDate(self: SecurityReference) = value

"""

    DelistingReason = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The reason for an inactive security's delisting from an exchange. The full list of Delisting Reason codes can be found within the Data

            Definitions- Appendix A DelistingReason Codes tab.



Get: DelistingReason(self: SecurityReference) -> str



Set: DelistingReason(self: SecurityReference) = value

"""

    DepositaryReceiptRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of underlying common shares backing each American Depository Receipt traded.



Get: DepositaryReceiptRatio(self: SecurityReference) -> Decimal



Set: DepositaryReceiptRatio(self: SecurityReference) = value

"""

    ExchangeId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Id representing the stock exchange that the particular share class is trading.  See separate reference document for Exchange

            Mappings.



Get: ExchangeId(self: SecurityReference) -> str



Set: ExchangeId(self: SecurityReference) = value

"""

    ExchangeSubMarketGlobalId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Classification to denote different Marketplace or Market tiers within a stock exchange.



Get: ExchangeSubMarketGlobalId(self: SecurityReference) -> str



Set: ExchangeSubMarketGlobalId(self: SecurityReference) = value

"""

    InvestmentId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifier assigned to each security Morningstar covers.



Get: InvestmentId(self: SecurityReference) -> str



Set: InvestmentId(self: SecurityReference) = value

"""

    IPODate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The initial day that the share begins trading on a public exchange.



Get: IPODate(self: SecurityReference) -> DateTime



Set: IPODate(self: SecurityReference) = value

"""

    IPOOfferPrice = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """IPO offer price indicates the price at which an issuer sells its shares under an initial public offering (IPO). The offer price is set by

            issuer and its underwriters.



Get: IPOOfferPrice(self: SecurityReference) -> Decimal



Set: IPOOfferPrice(self: SecurityReference) = value

"""

    IPOOfferPriceRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The estimated offer price range (low-high) for a new IPO. The field should be used until the final IPO price becomes available, as

            populated in the data field "IPOPrice".



Get: IPOOfferPriceRange(self: SecurityReference) -> str



Set: IPOOfferPriceRange(self: SecurityReference) = value

"""

    IsDepositaryReceipt = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicator to denote if the share class is a depository receipt. 1 denotes it is an ADR or GDR; otherwise 0.



Get: IsDepositaryReceipt(self: SecurityReference) -> bool



Set: IsDepositaryReceipt(self: SecurityReference) = value

"""

    IsDirectInvest = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A plan to make it possible for individual investors to invest in public companies without going through a stock broker.



Get: IsDirectInvest(self: SecurityReference) -> bool



Set: IsDirectInvest(self: SecurityReference) = value

"""

    IsDividendReinvest = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Shareholder election plan to re-invest cash dividend into additional shares.



Get: IsDividendReinvest(self: SecurityReference) -> bool



Set: IsDividendReinvest(self: SecurityReference) = value

"""

    IsPrimaryShare = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This indicator will denote if the indicated share is the primary share for the company. A "1" denotes the primary share, a "0"

            denotes a share that is not the primary share. The primary share is defined as the first share that a company IPO'd with and is still

            actively trading. If this share is no longer trading, we will denote the primary share as the share with the highest volume.



Get: IsPrimaryShare(self: SecurityReference) -> bool



Set: IsPrimaryShare(self: SecurityReference) = value

"""

    MarketDataID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """



Get: MarketDataID(self: SecurityReference) -> str



Set: MarketDataID(self: SecurityReference) = value

"""

    MIC = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The MIC (market identifier code) of the related shareclass of the company. See Data Appendix A for the relevant MIC to exchange

            name mapping.



Get: MIC(self: SecurityReference) -> str



Set: MIC(self: SecurityReference) = value

"""

    ParValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Nominal value of a security determined by the issuing company.



Get: ParValue(self: SecurityReference) -> Decimal



Set: ParValue(self: SecurityReference) = value

"""

    SecuritySymbol = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """An arrangement of characters (often letters) representing a particular security listed on an exchange or otherwise traded publicly.

            Note: Morningstar's multi-share class symbols will often contain a "period" within the symbol; e.g. BRK.B for Berkshire Hathaway

            Class B.



Get: SecuritySymbol(self: SecurityReference) -> str



Set: SecuritySymbol(self: SecurityReference) = value

"""

    SecurityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Each security will be assigned to one of the below security type classifications;

            - Common Stock (ST00000001)

            - Preferred Stock (ST00000002)

            - Units (ST000000A1)



Get: SecurityType(self: SecurityReference) -> str



Set: SecurityType(self: SecurityReference) = value

"""

    ShareClassDescription = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Provides information when applicable such as whether the share class is Class A or Class B, an ADR, GDR, or a business

            development company (BDC).  For preferred stocks, this field provides more detail about the preferred share class.



Get: ShareClassDescription(self: SecurityReference) -> str



Set: ShareClassDescription(self: SecurityReference) = value

"""

    ShareClassStatus = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """At the ShareClass level; each share is assigned to 1 of 4 possible status classifications; (A) Active, (D) Deactive, (I) Inactive, or (O)

            Obsolete:

            - Active-Share class is currently trading in a public market, and we have fundamental data available.

            - Deactive-Share class was once Active, but is no longer trading due to share being delisted from the exchange.

            - Inactive-Share class is currently trading in a public market, but no fundamental data is available.

            - Obsolete-Share class was once Inactive, but is no longer trading due to share being delisted from the exchange.



Get: ShareClassStatus(self: SecurityReference) -> str



Set: ShareClassStatus(self: SecurityReference) = value

"""

    TradingStatus = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """



Get: TradingStatus(self: SecurityReference) -> bool



Set: TradingStatus(self: SecurityReference) = value

"""

    Valoren = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """



Get: Valoren(self: SecurityReference) -> str



Set: Valoren(self: SecurityReference) = value

"""


class SecuritySoldNotYetRepurchasedBalanceSheet(MultiPeriodField):
    """
    Represent obligations of the company to deliver the specified security at the contracted price and, thereby, create a liability to

                purchase the security in the market at prevailing prices.



    SecuritySoldNotYetRepurchasedBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: SecuritySoldNotYetRepurchasedBalanceSheet) -> Decimal



Set: ThreeMonths(self: SecuritySoldNotYetRepurchasedBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: SecuritySoldNotYetRepurchasedBalanceSheet) -> Decimal



Set: TwelveMonths(self: SecuritySoldNotYetRepurchasedBalanceSheet) = value

"""

    Store = None


class SellingAndMarketingExpenseIncomeStatement(MultiPeriodField):
    """
    The aggregate total amount of expenses directly related to the marketing or selling of products or services.



    SellingAndMarketingExpenseIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: SellingAndMarketingExpenseIncomeStatement) -> Decimal



Set: NineMonths(self: SellingAndMarketingExpenseIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: SellingAndMarketingExpenseIncomeStatement) -> Decimal



Set: OneMonth(self: SellingAndMarketingExpenseIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: SellingAndMarketingExpenseIncomeStatement) -> Decimal



Set: SixMonths(self: SellingAndMarketingExpenseIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: SellingAndMarketingExpenseIncomeStatement) -> Decimal



Set: ThreeMonths(self: SellingAndMarketingExpenseIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: SellingAndMarketingExpenseIncomeStatement) -> Decimal



Set: TwelveMonths(self: SellingAndMarketingExpenseIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: SellingAndMarketingExpenseIncomeStatement) -> Decimal



Set: TwoMonths(self: SellingAndMarketingExpenseIncomeStatement) = value

"""

    Store = None


class SellingGeneralAndAdministrationIncomeStatement(MultiPeriodField):
    """
    The aggregate total costs related to selling a firm's product and services, as well as all other general and administrative expenses.

                Selling expenses are those directly related to the company's efforts to generate sales (e.g., sales salaries, commissions,

                advertising, delivery expenses). General and administrative expenses are expenses related to general administration of the

                company's operation (e.g., officers and office salaries, office supplies, telephone, accounting and legal services, and business

                licenses and fees).



    SellingGeneralAndAdministrationIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: SellingGeneralAndAdministrationIncomeStatement) -> Decimal



Set: NineMonths(self: SellingGeneralAndAdministrationIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: SellingGeneralAndAdministrationIncomeStatement) -> Decimal



Set: OneMonth(self: SellingGeneralAndAdministrationIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: SellingGeneralAndAdministrationIncomeStatement) -> Decimal



Set: SixMonths(self: SellingGeneralAndAdministrationIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: SellingGeneralAndAdministrationIncomeStatement) -> Decimal



Set: ThreeMonths(self: SellingGeneralAndAdministrationIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: SellingGeneralAndAdministrationIncomeStatement) -> Decimal



Set: TwelveMonths(self: SellingGeneralAndAdministrationIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: SellingGeneralAndAdministrationIncomeStatement) -> Decimal



Set: TwoMonths(self: SellingGeneralAndAdministrationIncomeStatement) = value

"""

    Store = None


class SeparateAccountAssetsBalanceSheet(MultiPeriodField):
    """
    The fair value of the assets held by the company for the benefit of separate account policyholders.



    SeparateAccountAssetsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: SeparateAccountAssetsBalanceSheet) -> Decimal



Set: ThreeMonths(self: SeparateAccountAssetsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: SeparateAccountAssetsBalanceSheet) -> Decimal



Set: TwelveMonths(self: SeparateAccountAssetsBalanceSheet) = value

"""

    Store = None


class SeparateAccountBusinessBalanceSheet(MultiPeriodField):
    """
    Refers to revenue that is generated that is not part of typical operations.



    SeparateAccountBusinessBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: SeparateAccountBusinessBalanceSheet) -> Decimal



Set: ThreeMonths(self: SeparateAccountBusinessBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: SeparateAccountBusinessBalanceSheet) -> Decimal



Set: TwelveMonths(self: SeparateAccountBusinessBalanceSheet) = value

"""

    Store = None


class ServiceChargeOnDepositorAccountsIncomeStatement(MultiPeriodField):
    """
    Includes any service charges on following accounts: Demand Deposit; Checking account; Savings account; Deposit in foreign

                offices; ESCROW accounts; Money Market Certificates & Deposit accounts, CDs (Negotiable Certificates of Deposits); NOW

                Accounts (Negotiable Order of Withdrawal); IRAs (Individual Retirement Accounts). This item is usually only available for bank

                industry.



    ServiceChargeOnDepositorAccountsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ServiceChargeOnDepositorAccountsIncomeStatement) -> Decimal



Set: NineMonths(self: ServiceChargeOnDepositorAccountsIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: ServiceChargeOnDepositorAccountsIncomeStatement) -> Decimal



Set: OneMonth(self: ServiceChargeOnDepositorAccountsIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ServiceChargeOnDepositorAccountsIncomeStatement) -> Decimal



Set: SixMonths(self: ServiceChargeOnDepositorAccountsIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ServiceChargeOnDepositorAccountsIncomeStatement) -> Decimal



Set: ThreeMonths(self: ServiceChargeOnDepositorAccountsIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ServiceChargeOnDepositorAccountsIncomeStatement) -> Decimal



Set: TwelveMonths(self: ServiceChargeOnDepositorAccountsIncomeStatement) = value

"""

    Store = None


class ShareIssuedBalanceSheet(MultiPeriodField):
    """
    The number of authorized shares that is sold to and held by the shareholders of a company, regardless of whether they are insiders,

                institutional investors or the general public. Unlike shares that are held as treasury stock, shares that have been retired are not

                included in this figure. The amount of issued shares can be all or part of the total amount of authorized shares of a corporation.



    ShareIssuedBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ShareIssuedBalanceSheet) -> Decimal



Set: ThreeMonths(self: ShareIssuedBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ShareIssuedBalanceSheet) -> Decimal



Set: TwelveMonths(self: ShareIssuedBalanceSheet) = value

"""

    Store = None


class ShareofAssociatesCashFlowStatement(MultiPeriodField):
    """
    A non-cash adjustment for share of associates' income in respect of operating activities.



    ShareofAssociatesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ShareofAssociatesCashFlowStatement) -> Decimal



Set: NineMonths(self: ShareofAssociatesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ShareofAssociatesCashFlowStatement) -> Decimal



Set: SixMonths(self: ShareofAssociatesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ShareofAssociatesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ShareofAssociatesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ShareofAssociatesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ShareofAssociatesCashFlowStatement) = value

"""

    Store = None


class ShortTermDebtIssuanceCashFlowStatement(MultiPeriodField):
    """
    The cash inflow from a debt initially having maturity due within one year or the normal operating cycle, if longer.



    ShortTermDebtIssuanceCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ShortTermDebtIssuanceCashFlowStatement) -> Decimal



Set: NineMonths(self: ShortTermDebtIssuanceCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: ShortTermDebtIssuanceCashFlowStatement) -> Decimal



Set: OneMonth(self: ShortTermDebtIssuanceCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ShortTermDebtIssuanceCashFlowStatement) -> Decimal



Set: SixMonths(self: ShortTermDebtIssuanceCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ShortTermDebtIssuanceCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ShortTermDebtIssuanceCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ShortTermDebtIssuanceCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ShortTermDebtIssuanceCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: ShortTermDebtIssuanceCashFlowStatement) -> Decimal



Set: TwoMonths(self: ShortTermDebtIssuanceCashFlowStatement) = value

"""

    Store = None


class ShortTermDebtPaymentsCashFlowStatement(MultiPeriodField):
    """
    The cash outflow for a borrowing having initial term of repayment within one year or the normal operating cycle, if longer.



    ShortTermDebtPaymentsCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: ShortTermDebtPaymentsCashFlowStatement) -> Decimal



Set: NineMonths(self: ShortTermDebtPaymentsCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: ShortTermDebtPaymentsCashFlowStatement) -> Decimal



Set: OneMonth(self: ShortTermDebtPaymentsCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: ShortTermDebtPaymentsCashFlowStatement) -> Decimal



Set: SixMonths(self: ShortTermDebtPaymentsCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ShortTermDebtPaymentsCashFlowStatement) -> Decimal



Set: ThreeMonths(self: ShortTermDebtPaymentsCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ShortTermDebtPaymentsCashFlowStatement) -> Decimal



Set: TwelveMonths(self: ShortTermDebtPaymentsCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: ShortTermDebtPaymentsCashFlowStatement) -> Decimal



Set: TwoMonths(self: ShortTermDebtPaymentsCashFlowStatement) = value

"""

    Store = None


class ShortTermInvestmentsAvailableForSaleBalanceSheet(MultiPeriodField):
    """
    The current assets section of a company's balance sheet that contains the investments that a company holds with the purpose for

                trading.



    ShortTermInvestmentsAvailableForSaleBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ShortTermInvestmentsAvailableForSaleBalanceSheet) -> Decimal



Set: ThreeMonths(self: ShortTermInvestmentsAvailableForSaleBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ShortTermInvestmentsAvailableForSaleBalanceSheet) -> Decimal



Set: TwelveMonths(self: ShortTermInvestmentsAvailableForSaleBalanceSheet) = value

"""

    Store = None


class ShortTermInvestmentsHeldToMaturityBalanceSheet(MultiPeriodField):
    """
    The current assets section of a company's balance sheet that contains the investments that a company has made that will expire

                at a fixed date within one year.



    ShortTermInvestmentsHeldToMaturityBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ShortTermInvestmentsHeldToMaturityBalanceSheet) -> Decimal



Set: ThreeMonths(self: ShortTermInvestmentsHeldToMaturityBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ShortTermInvestmentsHeldToMaturityBalanceSheet) -> Decimal



Set: TwelveMonths(self: ShortTermInvestmentsHeldToMaturityBalanceSheet) = value

"""

    Store = None


class ShortTermInvestmentsTradingBalanceSheet(MultiPeriodField):
    """
    The current assets section of a company's balance sheet that contains the investments that a company can trade at any moment.



    ShortTermInvestmentsTradingBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: ShortTermInvestmentsTradingBalanceSheet) -> Decimal



Set: ThreeMonths(self: ShortTermInvestmentsTradingBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: ShortTermInvestmentsTradingBalanceSheet) -> Decimal



Set: TwelveMonths(self: ShortTermInvestmentsTradingBalanceSheet) = value

"""

    Store = None


class SocialSecurityCostsIncomeStatement(MultiPeriodField):
    """
    Benefits paid to the employees in respect of their work.



    SocialSecurityCostsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: SocialSecurityCostsIncomeStatement) -> Decimal



Set: TwelveMonths(self: SocialSecurityCostsIncomeStatement) = value

"""

    Store = None


class SolvencyRatio(MultiPeriodField):
    """
    Measure of whether a company's cash flow is sufficient to meet its short-term and long-term debt requirements. The lower this

                ratio is, the greater the probability that the company will be in financial distress. Net Income + Depreciation, Depletion and

                Amortization/ average of annual Total Liabilities over the most recent two periods.



    SolvencyRatio(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: SolvencyRatio) -> Decimal



Set: OneYear(self: SolvencyRatio) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: SolvencyRatio) -> Decimal



Set: ThreeMonths(self: SolvencyRatio) = value

"""

    Store = None


class SpecialIncomeChargesIncomeStatement(MultiPeriodField):
    """
    Earnings or losses attributable to occurrences or actions by the firm that is either infrequent or unusual.



    SpecialIncomeChargesIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: SpecialIncomeChargesIncomeStatement) -> Decimal



Set: NineMonths(self: SpecialIncomeChargesIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: SpecialIncomeChargesIncomeStatement) -> Decimal



Set: OneMonth(self: SpecialIncomeChargesIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: SpecialIncomeChargesIncomeStatement) -> Decimal



Set: SixMonths(self: SpecialIncomeChargesIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: SpecialIncomeChargesIncomeStatement) -> Decimal



Set: ThreeMonths(self: SpecialIncomeChargesIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: SpecialIncomeChargesIncomeStatement) -> Decimal



Set: TwelveMonths(self: SpecialIncomeChargesIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: SpecialIncomeChargesIncomeStatement) -> Decimal



Set: TwoMonths(self: SpecialIncomeChargesIncomeStatement) = value

"""

    Store = None


class StaffCostsIncomeStatement(MultiPeriodField):
    """
    Total staff cost which is paid to the employees that is not part of Selling, General, and Administration expense.



    StaffCostsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: StaffCostsIncomeStatement) -> Decimal



Set: NineMonths(self: StaffCostsIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: StaffCostsIncomeStatement) -> Decimal



Set: SixMonths(self: StaffCostsIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: StaffCostsIncomeStatement) -> Decimal



Set: ThreeMonths(self: StaffCostsIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: StaffCostsIncomeStatement) -> Decimal



Set: TwelveMonths(self: StaffCostsIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: StaffCostsIncomeStatement) -> Decimal



Set: TwoMonths(self: StaffCostsIncomeStatement) = value

"""

    Store = None


class StockBasedCompensationCashFlowStatement(MultiPeriodField):
    """
    Value of stock issued during the period as a result of any share-based compensation plan other than an employee stock ownership

                plan (ESOP).



    StockBasedCompensationCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: StockBasedCompensationCashFlowStatement) -> Decimal



Set: NineMonths(self: StockBasedCompensationCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: StockBasedCompensationCashFlowStatement) -> Decimal



Set: OneMonth(self: StockBasedCompensationCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: StockBasedCompensationCashFlowStatement) -> Decimal



Set: SixMonths(self: StockBasedCompensationCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: StockBasedCompensationCashFlowStatement) -> Decimal



Set: ThreeMonths(self: StockBasedCompensationCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: StockBasedCompensationCashFlowStatement) -> Decimal



Set: TwelveMonths(self: StockBasedCompensationCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: StockBasedCompensationCashFlowStatement) -> Decimal



Set: TwoMonths(self: StockBasedCompensationCashFlowStatement) = value

"""

    Store = None


class StockBasedCompensationIncomeStatement(MultiPeriodField):
    """
    The cost to the company for granting stock options to reward employees.



    StockBasedCompensationIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: StockBasedCompensationIncomeStatement) -> Decimal



Set: NineMonths(self: StockBasedCompensationIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: StockBasedCompensationIncomeStatement) -> Decimal



Set: SixMonths(self: StockBasedCompensationIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: StockBasedCompensationIncomeStatement) -> Decimal



Set: ThreeMonths(self: StockBasedCompensationIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: StockBasedCompensationIncomeStatement) -> Decimal



Set: TwelveMonths(self: StockBasedCompensationIncomeStatement) = value

"""

    Store = None


class StockholdersEquityBalanceSheet(MultiPeriodField):
    """
    The residual interest in the assets of the enterprise that remains after deducting its liabilities. Equity is increased by owners'

                investments and by comprehensive income, and it is reduced by distributions to the owners.



    StockholdersEquityBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: StockholdersEquityBalanceSheet) -> Decimal



Set: NineMonths(self: StockholdersEquityBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: StockholdersEquityBalanceSheet) -> Decimal



Set: OneMonth(self: StockholdersEquityBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: StockholdersEquityBalanceSheet) -> Decimal



Set: SixMonths(self: StockholdersEquityBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: StockholdersEquityBalanceSheet) -> Decimal



Set: ThreeMonths(self: StockholdersEquityBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: StockholdersEquityBalanceSheet) -> Decimal



Set: TwelveMonths(self: StockholdersEquityBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: StockholdersEquityBalanceSheet) -> Decimal



Set: TwoMonths(self: StockholdersEquityBalanceSheet) = value

"""

    Store = None


class StockholdersEquityGrowth(MultiPeriodField):
    """
    The growth in the stockholder's equity on a percentage basis. Morningstar calculates the growth percentage based on the residual

                interest in the assets of the enterprise that remains after deducting its liabilities reported in the Balance Sheet within the company

                filings or reports.



    StockholdersEquityGrowth(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: StockholdersEquityGrowth) -> Decimal



Set: FiveYears(self: StockholdersEquityGrowth) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: StockholdersEquityGrowth) -> Decimal



Set: OneYear(self: StockholdersEquityGrowth) = value

"""

    ThreeYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeYears period value for the field



Get: ThreeYears(self: StockholdersEquityGrowth) -> Decimal



Set: ThreeYears(self: StockholdersEquityGrowth) = value

"""

    Store = None


class StockType(object):
    """ Helper class for the AssetClassification's StockType field QuantConnect.Data.Fundamental.AssetClassification.StockType """
    AggressiveGrowth = 1
    ClassicGrowth = 2
    Cyclicals = 3
    Distressed = 4
    HardAsset = 5
    HighYield = 6
    SlowGrowth = 7
    SpeculativeGrowth = 8
    __all__ = []


class StyleBox(object):
    """
    Helper class for the AssetClassification's StyleBox field QuantConnect.Data.Fundamental.AssetClassification.StyleBox.

                For stocks and stock funds, it classifies securities according to market capitalization and growth and value factor
    """
    LargeCore = 2
    LargeGrowth = 3
    LargeValue = 1
    MidCore = 5
    MidGrowth = 6
    MidValue = 4
    SmallCore = 8
    SmallGrowth = 9
    SmallValue = 7
    __all__ = []


class SubordinatedLiabilitiesBalanceSheet(MultiPeriodField):
    """
    The total carrying value of securities loaned to other broker dealers, typically used by such parties to cover short sales, secured by

                cash or other securities furnished by such parties until the borrowing is closed; in a Non-Differentiated Balance Sheet.



    SubordinatedLiabilitiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: SubordinatedLiabilitiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: SubordinatedLiabilitiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: SubordinatedLiabilitiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: SubordinatedLiabilitiesBalanceSheet) = value

"""

    Store = None


class TangibleBookValueBalanceSheet(MultiPeriodField):
    """
    The company's total book value less the value of any intangible assets.

                Methodology: Common Stock Equity minus Goodwill and Other Intangible Assets



    TangibleBookValueBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TangibleBookValueBalanceSheet) -> Decimal



Set: NineMonths(self: TangibleBookValueBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: TangibleBookValueBalanceSheet) -> Decimal



Set: OneMonth(self: TangibleBookValueBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TangibleBookValueBalanceSheet) -> Decimal



Set: SixMonths(self: TangibleBookValueBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TangibleBookValueBalanceSheet) -> Decimal



Set: ThreeMonths(self: TangibleBookValueBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TangibleBookValueBalanceSheet) -> Decimal



Set: TwelveMonths(self: TangibleBookValueBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: TangibleBookValueBalanceSheet) -> Decimal



Set: TwoMonths(self: TangibleBookValueBalanceSheet) = value

"""

    Store = None


class TaxAssetsTotalBalanceSheet(MultiPeriodField):
    """
    Sum of total tax assets in a Non-Differentiated Balance Sheet, includes Tax Receivables and Deferred Tax Assets.



    TaxAssetsTotalBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TaxAssetsTotalBalanceSheet) -> Decimal



Set: ThreeMonths(self: TaxAssetsTotalBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TaxAssetsTotalBalanceSheet) -> Decimal



Set: TwelveMonths(self: TaxAssetsTotalBalanceSheet) = value

"""

    Store = None


class TaxEffectOfUnusualItemsIncomeStatement(MultiPeriodField):
    """
    Tax effect of the usual items



    TaxEffectOfUnusualItemsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TaxEffectOfUnusualItemsIncomeStatement) -> Decimal



Set: NineMonths(self: TaxEffectOfUnusualItemsIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: TaxEffectOfUnusualItemsIncomeStatement) -> Decimal



Set: OneMonth(self: TaxEffectOfUnusualItemsIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TaxEffectOfUnusualItemsIncomeStatement) -> Decimal



Set: SixMonths(self: TaxEffectOfUnusualItemsIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TaxEffectOfUnusualItemsIncomeStatement) -> Decimal



Set: ThreeMonths(self: TaxEffectOfUnusualItemsIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TaxEffectOfUnusualItemsIncomeStatement) -> Decimal



Set: TwelveMonths(self: TaxEffectOfUnusualItemsIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: TaxEffectOfUnusualItemsIncomeStatement) -> Decimal



Set: TwoMonths(self: TaxEffectOfUnusualItemsIncomeStatement) = value

"""

    Store = None


class TaxesAssetsCurrentBalanceSheet(MultiPeriodField):
    """
    Carrying amount due within one year of the balance sheet date (or one operating cycle, if longer) from tax authorities as of the

                balance sheet date representing refunds of overpayments or recoveries based on agreed-upon resolutions of disputes, and current

                deferred tax assets.



    TaxesAssetsCurrentBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TaxesAssetsCurrentBalanceSheet) -> Decimal



Set: ThreeMonths(self: TaxesAssetsCurrentBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TaxesAssetsCurrentBalanceSheet) -> Decimal



Set: TwelveMonths(self: TaxesAssetsCurrentBalanceSheet) = value

"""

    Store = None


class TaxesReceivableBalanceSheet(MultiPeriodField):
    """
    Carrying amount due within one year of the balance sheet date (or one operating cycle, if longer) from tax authorities as of the

                balance sheet date representing refunds of overpayments or recoveries based on agreed-upon resolutions of disputes. This item is

                usually not available for bank industry.



    TaxesReceivableBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TaxesReceivableBalanceSheet) -> Decimal



Set: NineMonths(self: TaxesReceivableBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TaxesReceivableBalanceSheet) -> Decimal



Set: SixMonths(self: TaxesReceivableBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TaxesReceivableBalanceSheet) -> Decimal



Set: ThreeMonths(self: TaxesReceivableBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TaxesReceivableBalanceSheet) -> Decimal



Set: TwelveMonths(self: TaxesReceivableBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: TaxesReceivableBalanceSheet) -> Decimal



Set: TwoMonths(self: TaxesReceivableBalanceSheet) = value

"""

    Store = None


class TaxesRefundPaidCashFlowStatement(MultiPeriodField):
    """
    Total tax paid or received on operating activities.



    TaxesRefundPaidCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TaxesRefundPaidCashFlowStatement) -> Decimal



Set: NineMonths(self: TaxesRefundPaidCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TaxesRefundPaidCashFlowStatement) -> Decimal



Set: SixMonths(self: TaxesRefundPaidCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TaxesRefundPaidCashFlowStatement) -> Decimal



Set: ThreeMonths(self: TaxesRefundPaidCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TaxesRefundPaidCashFlowStatement) -> Decimal



Set: TwelveMonths(self: TaxesRefundPaidCashFlowStatement) = value

"""

    Store = None


class TaxesRefundPaidDirectCashFlowStatement(MultiPeriodField):
    """
    Tax paid/refund related to operating activities, for the direct cash flow.



    TaxesRefundPaidDirectCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TaxesRefundPaidDirectCashFlowStatement) -> Decimal



Set: NineMonths(self: TaxesRefundPaidDirectCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TaxesRefundPaidDirectCashFlowStatement) -> Decimal



Set: SixMonths(self: TaxesRefundPaidDirectCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TaxesRefundPaidDirectCashFlowStatement) -> Decimal



Set: ThreeMonths(self: TaxesRefundPaidDirectCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TaxesRefundPaidDirectCashFlowStatement) -> Decimal



Set: TwelveMonths(self: TaxesRefundPaidDirectCashFlowStatement) = value

"""

    Store = None


class TaxLossCarryforwardBasicEPS(MultiPeriodField):
    """
    The earnings attributable to the tax loss carry forward (during the reporting period).



    TaxLossCarryforwardBasicEPS(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TaxLossCarryforwardBasicEPS) -> Decimal



Set: NineMonths(self: TaxLossCarryforwardBasicEPS) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TaxLossCarryforwardBasicEPS) -> Decimal



Set: SixMonths(self: TaxLossCarryforwardBasicEPS) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TaxLossCarryforwardBasicEPS) -> Decimal



Set: ThreeMonths(self: TaxLossCarryforwardBasicEPS) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TaxLossCarryforwardBasicEPS) -> Decimal



Set: TwelveMonths(self: TaxLossCarryforwardBasicEPS) = value

"""

    Store = None


class TaxLossCarryforwardDilutedEPS(MultiPeriodField):
    """
    The earnings from any tax loss carry forward (in the reporting period).



    TaxLossCarryforwardDilutedEPS(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TaxLossCarryforwardDilutedEPS) -> Decimal



Set: NineMonths(self: TaxLossCarryforwardDilutedEPS) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TaxLossCarryforwardDilutedEPS) -> Decimal



Set: SixMonths(self: TaxLossCarryforwardDilutedEPS) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TaxLossCarryforwardDilutedEPS) -> Decimal



Set: ThreeMonths(self: TaxLossCarryforwardDilutedEPS) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TaxLossCarryforwardDilutedEPS) -> Decimal



Set: TwelveMonths(self: TaxLossCarryforwardDilutedEPS) = value

"""

    Store = None


class TaxProvisionIncomeStatement(MultiPeriodField):
    """
    Include any taxes on income, net of any investment tax credits for the current accounting PeriodAsByte.



    TaxProvisionIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TaxProvisionIncomeStatement) -> Decimal



Set: NineMonths(self: TaxProvisionIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: TaxProvisionIncomeStatement) -> Decimal



Set: OneMonth(self: TaxProvisionIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TaxProvisionIncomeStatement) -> Decimal



Set: SixMonths(self: TaxProvisionIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TaxProvisionIncomeStatement) -> Decimal



Set: ThreeMonths(self: TaxProvisionIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TaxProvisionIncomeStatement) -> Decimal



Set: TwelveMonths(self: TaxProvisionIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: TaxProvisionIncomeStatement) -> Decimal



Set: TwoMonths(self: TaxProvisionIncomeStatement) = value

"""

    Store = None


class TaxRate(MultiPeriodField):
    """
    Refers to the ratio of tax provision to pretax income. Morningstar calculates the ratio by using the underlying data reported in the

                company filings or reports:   Tax Provision / Pretax Income.

                [Note: Valid only when positive pretax income, and positive tax expense (not tax benefit)]



    TaxRate(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TaxRate) -> Decimal



Set: NineMonths(self: TaxRate) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: TaxRate) -> Decimal



Set: OneMonth(self: TaxRate) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: TaxRate) -> Decimal



Set: OneYear(self: TaxRate) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TaxRate) -> Decimal



Set: SixMonths(self: TaxRate) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TaxRate) -> Decimal



Set: ThreeMonths(self: TaxRate) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: TaxRate) -> Decimal



Set: TwoMonths(self: TaxRate) = value

"""

    Store = None


class TaxRateForCalcsIncomeStatement(MultiPeriodField):
    """
    Tax rate used for Morningstar calculations.



    TaxRateForCalcsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TaxRateForCalcsIncomeStatement) -> Decimal



Set: NineMonths(self: TaxRateForCalcsIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: TaxRateForCalcsIncomeStatement) -> Decimal



Set: OneMonth(self: TaxRateForCalcsIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TaxRateForCalcsIncomeStatement) -> Decimal



Set: SixMonths(self: TaxRateForCalcsIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TaxRateForCalcsIncomeStatement) -> Decimal



Set: ThreeMonths(self: TaxRateForCalcsIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TaxRateForCalcsIncomeStatement) -> Decimal



Set: TwelveMonths(self: TaxRateForCalcsIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: TaxRateForCalcsIncomeStatement) -> Decimal



Set: TwoMonths(self: TaxRateForCalcsIncomeStatement) = value

"""

    Store = None


class TotalAdjustmentsforNonCashItemsCashFlowStatement(MultiPeriodField):
    """
    Sum of all adjustments back from net income but without real cash outflow or inflow.



    TotalAdjustmentsforNonCashItemsCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TotalAdjustmentsforNonCashItemsCashFlowStatement) -> Decimal



Set: NineMonths(self: TotalAdjustmentsforNonCashItemsCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TotalAdjustmentsforNonCashItemsCashFlowStatement) -> Decimal



Set: SixMonths(self: TotalAdjustmentsforNonCashItemsCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalAdjustmentsforNonCashItemsCashFlowStatement) -> Decimal



Set: ThreeMonths(self: TotalAdjustmentsforNonCashItemsCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TotalAdjustmentsforNonCashItemsCashFlowStatement) -> Decimal



Set: TwelveMonths(self: TotalAdjustmentsforNonCashItemsCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: TotalAdjustmentsforNonCashItemsCashFlowStatement) -> Decimal



Set: TwoMonths(self: TotalAdjustmentsforNonCashItemsCashFlowStatement) = value

"""

    Store = None


class TotalAssetsBalanceSheet(MultiPeriodField):
    """
    The aggregate amount of probable future economic benefits obtained or controlled by a particular enterprise as a result of past

                transactions or events.



    TotalAssetsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TotalAssetsBalanceSheet) -> Decimal



Set: NineMonths(self: TotalAssetsBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: TotalAssetsBalanceSheet) -> Decimal



Set: OneMonth(self: TotalAssetsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TotalAssetsBalanceSheet) -> Decimal



Set: SixMonths(self: TotalAssetsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalAssetsBalanceSheet) -> Decimal



Set: ThreeMonths(self: TotalAssetsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TotalAssetsBalanceSheet) -> Decimal



Set: TwelveMonths(self: TotalAssetsBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: TotalAssetsBalanceSheet) -> Decimal



Set: TwoMonths(self: TotalAssetsBalanceSheet) = value

"""

    Store = None


class TotalAssetsGrowth(MultiPeriodField):
    """
    The growth in the total assets on a percentage basis. Morningstar calculates the growth percentage based on the total assets

                reported in the Balance Sheet within the company filings or reports.



    TotalAssetsGrowth(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: TotalAssetsGrowth) -> Decimal



Set: FiveYears(self: TotalAssetsGrowth) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: TotalAssetsGrowth) -> Decimal



Set: OneYear(self: TotalAssetsGrowth) = value

"""

    ThreeYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeYears period value for the field



Get: ThreeYears(self: TotalAssetsGrowth) -> Decimal



Set: ThreeYears(self: TotalAssetsGrowth) = value

"""

    Store = None


class TotalCapitalizationBalanceSheet(MultiPeriodField):
    """
    Stockholder's Equity plus Long Term Debt.



    TotalCapitalizationBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TotalCapitalizationBalanceSheet) -> Decimal



Set: NineMonths(self: TotalCapitalizationBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: TotalCapitalizationBalanceSheet) -> Decimal



Set: OneMonth(self: TotalCapitalizationBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TotalCapitalizationBalanceSheet) -> Decimal



Set: SixMonths(self: TotalCapitalizationBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalCapitalizationBalanceSheet) -> Decimal



Set: ThreeMonths(self: TotalCapitalizationBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TotalCapitalizationBalanceSheet) -> Decimal



Set: TwelveMonths(self: TotalCapitalizationBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: TotalCapitalizationBalanceSheet) -> Decimal



Set: TwoMonths(self: TotalCapitalizationBalanceSheet) = value

"""

    Store = None


class TotalDebtBalanceSheet(MultiPeriodField):
    """
    All borrowings incurred by the company including debt and capital lease obligations.



    TotalDebtBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TotalDebtBalanceSheet) -> Decimal



Set: NineMonths(self: TotalDebtBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: TotalDebtBalanceSheet) -> Decimal



Set: OneMonth(self: TotalDebtBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TotalDebtBalanceSheet) -> Decimal



Set: SixMonths(self: TotalDebtBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalDebtBalanceSheet) -> Decimal



Set: ThreeMonths(self: TotalDebtBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TotalDebtBalanceSheet) -> Decimal



Set: TwelveMonths(self: TotalDebtBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: TotalDebtBalanceSheet) -> Decimal



Set: TwoMonths(self: TotalDebtBalanceSheet) = value

"""

    Store = None


class TotalDebtEquityRatio(MultiPeriodField):
    """
    Refers to the ratio of Total Debt to Common Equity. Morningstar calculates the ratio by using the underlying data reported in the

                Balance Sheet within the company filings or reports: (Current Debt And Current Capital Lease Obligation + Long-Term Debt And

                Long-Term Capital Lease Obligation / Common Equity.   [Note: Common Equity = Total Shareholder's Equity - Preferred Stock]



    TotalDebtEquityRatio(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TotalDebtEquityRatio) -> Decimal



Set: NineMonths(self: TotalDebtEquityRatio) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: TotalDebtEquityRatio) -> Decimal



Set: OneMonth(self: TotalDebtEquityRatio) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: TotalDebtEquityRatio) -> Decimal



Set: OneYear(self: TotalDebtEquityRatio) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TotalDebtEquityRatio) -> Decimal



Set: SixMonths(self: TotalDebtEquityRatio) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalDebtEquityRatio) -> Decimal



Set: ThreeMonths(self: TotalDebtEquityRatio) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: TotalDebtEquityRatio) -> Decimal



Set: TwoMonths(self: TotalDebtEquityRatio) = value

"""

    Store = None


class TotalDebtEquityRatioGrowth(MultiPeriodField):
    """
    The growth in the company's total debt to equity ratio on a percentage basis. Morningstar calculates the growth percentage based

                on the total debt divided by the shareholder's equity reported in the Balance Sheet within the company filings or reports.



    TotalDebtEquityRatioGrowth(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: TotalDebtEquityRatioGrowth) -> Decimal



Set: FiveYears(self: TotalDebtEquityRatioGrowth) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: TotalDebtEquityRatioGrowth) -> Decimal



Set: OneYear(self: TotalDebtEquityRatioGrowth) = value

"""

    ThreeYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeYears period value for the field



Get: ThreeYears(self: TotalDebtEquityRatioGrowth) -> Decimal



Set: ThreeYears(self: TotalDebtEquityRatioGrowth) = value

"""

    Store = None


class TotalDebtInMaturityScheduleBalanceSheet(MultiPeriodField):
    """
    Total Debt in Maturity Schedule is the sum of Debt details above.



    TotalDebtInMaturityScheduleBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalDebtInMaturityScheduleBalanceSheet) -> Decimal



Set: ThreeMonths(self: TotalDebtInMaturityScheduleBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TotalDebtInMaturityScheduleBalanceSheet) -> Decimal



Set: TwelveMonths(self: TotalDebtInMaturityScheduleBalanceSheet) = value

"""

    Store = None


class TotalDeferredCreditsAndOtherNonCurrentLiabilitiesBalanceSheet(MultiPeriodField):
    """
    Revenue received by a firm but not yet reported as income.  This item is usually only available for utility industry.



    TotalDeferredCreditsAndOtherNonCurrentLiabilitiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TotalDeferredCreditsAndOtherNonCurrentLiabilitiesBalanceSheet) -> Decimal



Set: NineMonths(self: TotalDeferredCreditsAndOtherNonCurrentLiabilitiesBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TotalDeferredCreditsAndOtherNonCurrentLiabilitiesBalanceSheet) -> Decimal



Set: SixMonths(self: TotalDeferredCreditsAndOtherNonCurrentLiabilitiesBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalDeferredCreditsAndOtherNonCurrentLiabilitiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: TotalDeferredCreditsAndOtherNonCurrentLiabilitiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TotalDeferredCreditsAndOtherNonCurrentLiabilitiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: TotalDeferredCreditsAndOtherNonCurrentLiabilitiesBalanceSheet) = value

"""

    Store = None


class TotalDepositsBalanceSheet(MultiPeriodField):
    """
    A liability account which represents the total amount of funds deposited.



    TotalDepositsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TotalDepositsBalanceSheet) -> Decimal



Set: NineMonths(self: TotalDepositsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TotalDepositsBalanceSheet) -> Decimal



Set: SixMonths(self: TotalDepositsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalDepositsBalanceSheet) -> Decimal



Set: ThreeMonths(self: TotalDepositsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TotalDepositsBalanceSheet) -> Decimal



Set: TwelveMonths(self: TotalDepositsBalanceSheet) = value

"""

    Store = None


class TotalDividendPaymentofEquitySharesIncomeStatement(MultiPeriodField):
    """
    Total amount paid in dividends to equity securities investors.



    TotalDividendPaymentofEquitySharesIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TotalDividendPaymentofEquitySharesIncomeStatement) -> Decimal



Set: NineMonths(self: TotalDividendPaymentofEquitySharesIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TotalDividendPaymentofEquitySharesIncomeStatement) -> Decimal



Set: SixMonths(self: TotalDividendPaymentofEquitySharesIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalDividendPaymentofEquitySharesIncomeStatement) -> Decimal



Set: ThreeMonths(self: TotalDividendPaymentofEquitySharesIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TotalDividendPaymentofEquitySharesIncomeStatement) -> Decimal



Set: TwelveMonths(self: TotalDividendPaymentofEquitySharesIncomeStatement) = value

"""

    Store = None


class TotalDividendPaymentofNonEquitySharesIncomeStatement(MultiPeriodField):
    """
    Total amount paid in dividends to Non-Equity securities investors.



    TotalDividendPaymentofNonEquitySharesIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TotalDividendPaymentofNonEquitySharesIncomeStatement) -> Decimal



Set: NineMonths(self: TotalDividendPaymentofNonEquitySharesIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TotalDividendPaymentofNonEquitySharesIncomeStatement) -> Decimal



Set: SixMonths(self: TotalDividendPaymentofNonEquitySharesIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalDividendPaymentofNonEquitySharesIncomeStatement) -> Decimal



Set: ThreeMonths(self: TotalDividendPaymentofNonEquitySharesIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TotalDividendPaymentofNonEquitySharesIncomeStatement) -> Decimal



Set: TwelveMonths(self: TotalDividendPaymentofNonEquitySharesIncomeStatement) = value

"""

    Store = None


class TotalDividendPerShare(MultiPeriodField):
    """
    Total Dividend Per Share is cash dividends and special cash dividends paid per share over a certain period of time.



    TotalDividendPerShare(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TotalDividendPerShare) -> Decimal



Set: NineMonths(self: TotalDividendPerShare) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: TotalDividendPerShare) -> Decimal



Set: OneMonth(self: TotalDividendPerShare) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TotalDividendPerShare) -> Decimal



Set: SixMonths(self: TotalDividendPerShare) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalDividendPerShare) -> Decimal



Set: ThreeMonths(self: TotalDividendPerShare) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TotalDividendPerShare) -> Decimal



Set: TwelveMonths(self: TotalDividendPerShare) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: TotalDividendPerShare) -> Decimal



Set: TwoMonths(self: TotalDividendPerShare) = value

"""

    Store = None


class TotalEquityAsReportedBalanceSheet(MultiPeriodField):
    """
    Total Equity as reported by the company, may be the same or not the same as Morningstar's standardized definition.



    TotalEquityAsReportedBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalEquityAsReportedBalanceSheet) -> Decimal



Set: ThreeMonths(self: TotalEquityAsReportedBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TotalEquityAsReportedBalanceSheet) -> Decimal



Set: TwelveMonths(self: TotalEquityAsReportedBalanceSheet) = value

"""

    Store = None


class TotalEquityBalanceSheet(MultiPeriodField):
    """
    Total Equity equals Preferred Stock Equity + Common Stock Equity.



    TotalEquityBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TotalEquityBalanceSheet) -> Decimal



Set: NineMonths(self: TotalEquityBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: TotalEquityBalanceSheet) -> Decimal



Set: OneMonth(self: TotalEquityBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TotalEquityBalanceSheet) -> Decimal



Set: SixMonths(self: TotalEquityBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalEquityBalanceSheet) -> Decimal



Set: ThreeMonths(self: TotalEquityBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TotalEquityBalanceSheet) -> Decimal



Set: TwelveMonths(self: TotalEquityBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: TotalEquityBalanceSheet) -> Decimal



Set: TwoMonths(self: TotalEquityBalanceSheet) = value

"""

    Store = None


class TotalEquityGrossMinorityInterestBalanceSheet(MultiPeriodField):
    """
    Residual interest, including minority interest, that remains in the assets of the enterprise after deducting its liabilities. Equity is

                increased by owners' investments and by comprehensive income, and it is reduced by distributions to the owners.



    TotalEquityGrossMinorityInterestBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TotalEquityGrossMinorityInterestBalanceSheet) -> Decimal



Set: NineMonths(self: TotalEquityGrossMinorityInterestBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: TotalEquityGrossMinorityInterestBalanceSheet) -> Decimal



Set: OneMonth(self: TotalEquityGrossMinorityInterestBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TotalEquityGrossMinorityInterestBalanceSheet) -> Decimal



Set: SixMonths(self: TotalEquityGrossMinorityInterestBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalEquityGrossMinorityInterestBalanceSheet) -> Decimal



Set: ThreeMonths(self: TotalEquityGrossMinorityInterestBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TotalEquityGrossMinorityInterestBalanceSheet) -> Decimal



Set: TwelveMonths(self: TotalEquityGrossMinorityInterestBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: TotalEquityGrossMinorityInterestBalanceSheet) -> Decimal



Set: TwoMonths(self: TotalEquityGrossMinorityInterestBalanceSheet) = value

"""

    Store = None


class TotalExpensesIncomeStatement(MultiPeriodField):
    """
    The sum of operating expense and cost of revenue. If the company does not give the reported number, it will be calculated by

                adding operating expense and cost of revenue.



    TotalExpensesIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TotalExpensesIncomeStatement) -> Decimal



Set: NineMonths(self: TotalExpensesIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: TotalExpensesIncomeStatement) -> Decimal



Set: OneMonth(self: TotalExpensesIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TotalExpensesIncomeStatement) -> Decimal



Set: SixMonths(self: TotalExpensesIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalExpensesIncomeStatement) -> Decimal



Set: ThreeMonths(self: TotalExpensesIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TotalExpensesIncomeStatement) -> Decimal



Set: TwelveMonths(self: TotalExpensesIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: TotalExpensesIncomeStatement) -> Decimal



Set: TwoMonths(self: TotalExpensesIncomeStatement) = value

"""

    Store = None


class TotalFinancialLeaseObligationsBalanceSheet(MultiPeriodField):
    """
    Represents the total amount of long-term capital leases that must be paid within the next accounting period for a Non-

                Differentiated Balance Sheet. Capital lease obligations are contractual obligations that arise from obtaining the use of property or

                equipment via a capital lease contract.



    TotalFinancialLeaseObligationsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalFinancialLeaseObligationsBalanceSheet) -> Decimal



Set: ThreeMonths(self: TotalFinancialLeaseObligationsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TotalFinancialLeaseObligationsBalanceSheet) -> Decimal



Set: TwelveMonths(self: TotalFinancialLeaseObligationsBalanceSheet) = value

"""

    Store = None


class TotalInvestmentsBalanceSheet(MultiPeriodField):
    """
    Asset that refers to the sum of all available for sale securities and other investments often reported on the balance sheet of

                insurance firms.



    TotalInvestmentsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TotalInvestmentsBalanceSheet) -> Decimal



Set: SixMonths(self: TotalInvestmentsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalInvestmentsBalanceSheet) -> Decimal



Set: ThreeMonths(self: TotalInvestmentsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TotalInvestmentsBalanceSheet) -> Decimal



Set: TwelveMonths(self: TotalInvestmentsBalanceSheet) = value

"""

    Store = None


class TotalLiabilitiesAsReportedBalanceSheet(MultiPeriodField):
    """
    Total liabilities as reported by the company, may be the same or not the same as Morningstar's standardized definition.



    TotalLiabilitiesAsReportedBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalLiabilitiesAsReportedBalanceSheet) -> Decimal



Set: ThreeMonths(self: TotalLiabilitiesAsReportedBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TotalLiabilitiesAsReportedBalanceSheet) -> Decimal



Set: TwelveMonths(self: TotalLiabilitiesAsReportedBalanceSheet) = value

"""

    Store = None


class TotalLiabilitiesGrowth(MultiPeriodField):
    """
    The growth in the total liabilities on a percentage basis. Morningstar calculates the growth percentage based on the total liabilities

                reported in the Balance Sheet within the company filings or reports.



    TotalLiabilitiesGrowth(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    FiveYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the FiveYears period value for the field



Get: FiveYears(self: TotalLiabilitiesGrowth) -> Decimal



Set: FiveYears(self: TotalLiabilitiesGrowth) = value

"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: TotalLiabilitiesGrowth) -> Decimal



Set: OneYear(self: TotalLiabilitiesGrowth) = value

"""

    ThreeYears = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeYears period value for the field



Get: ThreeYears(self: TotalLiabilitiesGrowth) -> Decimal



Set: ThreeYears(self: TotalLiabilitiesGrowth) = value

"""

    Store = None


class TotalLiabilitiesNetMinorityInterestBalanceSheet(MultiPeriodField):
    """
    Probable future sacrifices of economic benefits arising from present obligations of an enterprise to transfer assets or provide

                services to others in the future as a result of past transactions or events, excluding minority interest.



    TotalLiabilitiesNetMinorityInterestBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TotalLiabilitiesNetMinorityInterestBalanceSheet) -> Decimal



Set: NineMonths(self: TotalLiabilitiesNetMinorityInterestBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: TotalLiabilitiesNetMinorityInterestBalanceSheet) -> Decimal



Set: OneMonth(self: TotalLiabilitiesNetMinorityInterestBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TotalLiabilitiesNetMinorityInterestBalanceSheet) -> Decimal



Set: SixMonths(self: TotalLiabilitiesNetMinorityInterestBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalLiabilitiesNetMinorityInterestBalanceSheet) -> Decimal



Set: ThreeMonths(self: TotalLiabilitiesNetMinorityInterestBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TotalLiabilitiesNetMinorityInterestBalanceSheet) -> Decimal



Set: TwelveMonths(self: TotalLiabilitiesNetMinorityInterestBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: TotalLiabilitiesNetMinorityInterestBalanceSheet) -> Decimal



Set: TwoMonths(self: TotalLiabilitiesNetMinorityInterestBalanceSheet) = value

"""

    Store = None


class TotalMoneyMarketInvestmentsIncomeStatement(MultiPeriodField):
    """
    The sum of the money market investments held by a bank's depositors, which are FDIC insured.



    TotalMoneyMarketInvestmentsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TotalMoneyMarketInvestmentsIncomeStatement) -> Decimal



Set: NineMonths(self: TotalMoneyMarketInvestmentsIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: TotalMoneyMarketInvestmentsIncomeStatement) -> Decimal



Set: OneMonth(self: TotalMoneyMarketInvestmentsIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TotalMoneyMarketInvestmentsIncomeStatement) -> Decimal



Set: SixMonths(self: TotalMoneyMarketInvestmentsIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalMoneyMarketInvestmentsIncomeStatement) -> Decimal



Set: ThreeMonths(self: TotalMoneyMarketInvestmentsIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TotalMoneyMarketInvestmentsIncomeStatement) -> Decimal



Set: TwelveMonths(self: TotalMoneyMarketInvestmentsIncomeStatement) = value

"""

    Store = None


class TotalNonCurrentAssetsBalanceSheet(MultiPeriodField):
    """
    Sum of the carrying amounts as of the balance sheet date of all assets that are expected to be realized in cash, sold or consumed

                after one year or beyond the normal operating cycle, if longer.



    TotalNonCurrentAssetsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TotalNonCurrentAssetsBalanceSheet) -> Decimal



Set: NineMonths(self: TotalNonCurrentAssetsBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: TotalNonCurrentAssetsBalanceSheet) -> Decimal



Set: OneMonth(self: TotalNonCurrentAssetsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TotalNonCurrentAssetsBalanceSheet) -> Decimal



Set: SixMonths(self: TotalNonCurrentAssetsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalNonCurrentAssetsBalanceSheet) -> Decimal



Set: ThreeMonths(self: TotalNonCurrentAssetsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TotalNonCurrentAssetsBalanceSheet) -> Decimal



Set: TwelveMonths(self: TotalNonCurrentAssetsBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: TotalNonCurrentAssetsBalanceSheet) -> Decimal



Set: TwoMonths(self: TotalNonCurrentAssetsBalanceSheet) = value

"""

    Store = None


class TotalNonCurrentLiabilitiesNetMinorityInterestBalanceSheet(MultiPeriodField):
    """
    Total obligations, net minority interest, incurred as part of normal operations that is expected to be repaid beyond the following

                twelve months or one business cycle; excludes minority interest.



    TotalNonCurrentLiabilitiesNetMinorityInterestBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TotalNonCurrentLiabilitiesNetMinorityInterestBalanceSheet) -> Decimal



Set: NineMonths(self: TotalNonCurrentLiabilitiesNetMinorityInterestBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: TotalNonCurrentLiabilitiesNetMinorityInterestBalanceSheet) -> Decimal



Set: OneMonth(self: TotalNonCurrentLiabilitiesNetMinorityInterestBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TotalNonCurrentLiabilitiesNetMinorityInterestBalanceSheet) -> Decimal



Set: SixMonths(self: TotalNonCurrentLiabilitiesNetMinorityInterestBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalNonCurrentLiabilitiesNetMinorityInterestBalanceSheet) -> Decimal



Set: ThreeMonths(self: TotalNonCurrentLiabilitiesNetMinorityInterestBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TotalNonCurrentLiabilitiesNetMinorityInterestBalanceSheet) -> Decimal



Set: TwelveMonths(self: TotalNonCurrentLiabilitiesNetMinorityInterestBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: TotalNonCurrentLiabilitiesNetMinorityInterestBalanceSheet) -> Decimal



Set: TwoMonths(self: TotalNonCurrentLiabilitiesNetMinorityInterestBalanceSheet) = value

"""

    Store = None


class TotalOperatingIncomeAsReportedIncomeStatement(MultiPeriodField):
    """
    Operating profit/loss as reported by the company, may be the same or not the same as Morningstar's standardized definition.



    TotalOperatingIncomeAsReportedIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TotalOperatingIncomeAsReportedIncomeStatement) -> Decimal



Set: NineMonths(self: TotalOperatingIncomeAsReportedIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TotalOperatingIncomeAsReportedIncomeStatement) -> Decimal



Set: SixMonths(self: TotalOperatingIncomeAsReportedIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalOperatingIncomeAsReportedIncomeStatement) -> Decimal



Set: ThreeMonths(self: TotalOperatingIncomeAsReportedIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TotalOperatingIncomeAsReportedIncomeStatement) -> Decimal



Set: TwelveMonths(self: TotalOperatingIncomeAsReportedIncomeStatement) = value

"""

    Store = None


class TotalOtherFinanceCostIncomeStatement(MultiPeriodField):
    """
    Any other finance cost which is not clearly defined in the Non-Operating section.



    TotalOtherFinanceCostIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TotalOtherFinanceCostIncomeStatement) -> Decimal



Set: NineMonths(self: TotalOtherFinanceCostIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TotalOtherFinanceCostIncomeStatement) -> Decimal



Set: SixMonths(self: TotalOtherFinanceCostIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalOtherFinanceCostIncomeStatement) -> Decimal



Set: ThreeMonths(self: TotalOtherFinanceCostIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TotalOtherFinanceCostIncomeStatement) -> Decimal



Set: TwelveMonths(self: TotalOtherFinanceCostIncomeStatement) = value

"""

    Store = None


class TotalPartnershipCapitalBalanceSheet(MultiPeriodField):
    """
    Ownership interest of different classes of partners in the publicly listed limited partnership or master limited partnership. Partners

                include general, limited and preferred partners.



    TotalPartnershipCapitalBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TotalPartnershipCapitalBalanceSheet) -> Decimal



Set: SixMonths(self: TotalPartnershipCapitalBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalPartnershipCapitalBalanceSheet) -> Decimal



Set: ThreeMonths(self: TotalPartnershipCapitalBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TotalPartnershipCapitalBalanceSheet) -> Decimal



Set: TwelveMonths(self: TotalPartnershipCapitalBalanceSheet) = value

"""

    Store = None


class TotalPremiumsEarnedIncomeStatement(MultiPeriodField):
    """
    Premiums earned is the portion of an insurance written premium which is considered "earned" by the insurer, based on the part of

                the policy period that the insurance has been in effect, and during which the insurer has been exposed to loss.



    TotalPremiumsEarnedIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TotalPremiumsEarnedIncomeStatement) -> Decimal



Set: NineMonths(self: TotalPremiumsEarnedIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TotalPremiumsEarnedIncomeStatement) -> Decimal



Set: SixMonths(self: TotalPremiumsEarnedIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalPremiumsEarnedIncomeStatement) -> Decimal



Set: ThreeMonths(self: TotalPremiumsEarnedIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TotalPremiumsEarnedIncomeStatement) -> Decimal



Set: TwelveMonths(self: TotalPremiumsEarnedIncomeStatement) = value

"""

    Store = None


class TotalRevenueAsReportedIncomeStatement(MultiPeriodField):
    """
    Total revenue as reported by the company, may be the same or not the same as Morningstar's standardized definition.



    TotalRevenueAsReportedIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TotalRevenueAsReportedIncomeStatement) -> Decimal



Set: NineMonths(self: TotalRevenueAsReportedIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TotalRevenueAsReportedIncomeStatement) -> Decimal



Set: SixMonths(self: TotalRevenueAsReportedIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalRevenueAsReportedIncomeStatement) -> Decimal



Set: ThreeMonths(self: TotalRevenueAsReportedIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TotalRevenueAsReportedIncomeStatement) -> Decimal



Set: TwelveMonths(self: TotalRevenueAsReportedIncomeStatement) = value

"""

    Store = None


class TotalRevenueIncomeStatement(MultiPeriodField):
    """
    All sales, business revenues and income that the company makes from its business operations, net of excise taxes. This applies for

                all companies and can be used as comparison for all industries.

                For Normal, Mining, Transportation and Utility templates companies, this is the sum of Operating Revenues, Excise Taxes and Fees.

                For Bank template companies, this is the sum of Net Interest Income and Non-Interest Income.

                For Insurance template companies, this is the sum of Premiums, Interest Income, Fees, Investment and Other Income.



    TotalRevenueIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TotalRevenueIncomeStatement) -> Decimal



Set: NineMonths(self: TotalRevenueIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: TotalRevenueIncomeStatement) -> Decimal



Set: OneMonth(self: TotalRevenueIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TotalRevenueIncomeStatement) -> Decimal



Set: SixMonths(self: TotalRevenueIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalRevenueIncomeStatement) -> Decimal



Set: ThreeMonths(self: TotalRevenueIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TotalRevenueIncomeStatement) -> Decimal



Set: TwelveMonths(self: TotalRevenueIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: TotalRevenueIncomeStatement) -> Decimal



Set: TwoMonths(self: TotalRevenueIncomeStatement) = value

"""

    Store = None


class TotalRiskBasedCapital(MultiPeriodField):
    """
    The sum of Tier 1 and Tier 2 Capital. Tier 1 capital consists of common shareholders equity, perpetual preferred shareholders equity

                with non-cumulative dividends, retained earnings, and minority interests in the equity accounts of consolidated subsidiaries. Tier 2

                capital consists of subordinated debt, intermediate-term preferred stock, cumulative and long-term preferred stock, and a portion of

                a bank's allowance for loan and lease losses.



    TotalRiskBasedCapital(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TotalRiskBasedCapital) -> Decimal



Set: NineMonths(self: TotalRiskBasedCapital) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: TotalRiskBasedCapital) -> Decimal



Set: OneMonth(self: TotalRiskBasedCapital) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TotalRiskBasedCapital) -> Decimal



Set: SixMonths(self: TotalRiskBasedCapital) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalRiskBasedCapital) -> Decimal



Set: ThreeMonths(self: TotalRiskBasedCapital) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TotalRiskBasedCapital) -> Decimal



Set: TwelveMonths(self: TotalRiskBasedCapital) = value

"""

    Store = None


class TotalTaxPayableBalanceSheet(MultiPeriodField):
    """
    A liability that reflects the taxes owed to federal, state, and local tax authorities. It is the carrying value as of the balance sheet

                date of obligations incurred and payable for statutory income, sales, use, payroll, excise, real, property and other taxes.



    TotalTaxPayableBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TotalTaxPayableBalanceSheet) -> Decimal



Set: NineMonths(self: TotalTaxPayableBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: TotalTaxPayableBalanceSheet) -> Decimal



Set: OneMonth(self: TotalTaxPayableBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TotalTaxPayableBalanceSheet) -> Decimal



Set: SixMonths(self: TotalTaxPayableBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalTaxPayableBalanceSheet) -> Decimal



Set: ThreeMonths(self: TotalTaxPayableBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TotalTaxPayableBalanceSheet) -> Decimal



Set: TwelveMonths(self: TotalTaxPayableBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: TotalTaxPayableBalanceSheet) -> Decimal



Set: TwoMonths(self: TotalTaxPayableBalanceSheet) = value

"""

    Store = None


class TotalUnusualItemsExcludingGoodwillIncomeStatement(MultiPeriodField):
    """
    The sum of all the identifiable operating and non-operating unusual items.



    TotalUnusualItemsExcludingGoodwillIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TotalUnusualItemsExcludingGoodwillIncomeStatement) -> Decimal



Set: NineMonths(self: TotalUnusualItemsExcludingGoodwillIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: TotalUnusualItemsExcludingGoodwillIncomeStatement) -> Decimal



Set: OneMonth(self: TotalUnusualItemsExcludingGoodwillIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TotalUnusualItemsExcludingGoodwillIncomeStatement) -> Decimal



Set: SixMonths(self: TotalUnusualItemsExcludingGoodwillIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalUnusualItemsExcludingGoodwillIncomeStatement) -> Decimal



Set: ThreeMonths(self: TotalUnusualItemsExcludingGoodwillIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TotalUnusualItemsExcludingGoodwillIncomeStatement) -> Decimal



Set: TwelveMonths(self: TotalUnusualItemsExcludingGoodwillIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: TotalUnusualItemsExcludingGoodwillIncomeStatement) -> Decimal



Set: TwoMonths(self: TotalUnusualItemsExcludingGoodwillIncomeStatement) = value

"""

    Store = None


class TotalUnusualItemsIncomeStatement(MultiPeriodField):
    """
    Total unusual items including Negative Goodwill.



    TotalUnusualItemsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TotalUnusualItemsIncomeStatement) -> Decimal



Set: NineMonths(self: TotalUnusualItemsIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: TotalUnusualItemsIncomeStatement) -> Decimal



Set: OneMonth(self: TotalUnusualItemsIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TotalUnusualItemsIncomeStatement) -> Decimal



Set: SixMonths(self: TotalUnusualItemsIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TotalUnusualItemsIncomeStatement) -> Decimal



Set: ThreeMonths(self: TotalUnusualItemsIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TotalUnusualItemsIncomeStatement) -> Decimal



Set: TwelveMonths(self: TotalUnusualItemsIncomeStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: TotalUnusualItemsIncomeStatement) -> Decimal



Set: TwoMonths(self: TotalUnusualItemsIncomeStatement) = value

"""

    Store = None


class TradeandOtherPayablesNonCurrentBalanceSheet(MultiPeriodField):
    """
    Sum of all non-current payables and accrued expenses.



    TradeandOtherPayablesNonCurrentBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TradeandOtherPayablesNonCurrentBalanceSheet) -> Decimal



Set: ThreeMonths(self: TradeandOtherPayablesNonCurrentBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TradeandOtherPayablesNonCurrentBalanceSheet) -> Decimal



Set: TwelveMonths(self: TradeandOtherPayablesNonCurrentBalanceSheet) = value

"""

    Store = None


class TradeAndOtherReceivablesNonCurrentBalanceSheet(MultiPeriodField):
    """
    Amounts due from customers or clients, more than one year from the balance sheet date, for goods or services that have been

                delivered or sold in the normal course of business, or other receivables.



    TradeAndOtherReceivablesNonCurrentBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TradeAndOtherReceivablesNonCurrentBalanceSheet) -> Decimal



Set: ThreeMonths(self: TradeAndOtherReceivablesNonCurrentBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TradeAndOtherReceivablesNonCurrentBalanceSheet) -> Decimal



Set: TwelveMonths(self: TradeAndOtherReceivablesNonCurrentBalanceSheet) = value

"""

    Store = None


class TradingandFinancialLiabilitiesBalanceSheet(MultiPeriodField):
    """
    Total carrying amount of total trading, financial liabilities and debt in a non-differentiated balance sheet.



    TradingandFinancialLiabilitiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TradingandFinancialLiabilitiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: TradingandFinancialLiabilitiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TradingandFinancialLiabilitiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: TradingandFinancialLiabilitiesBalanceSheet) = value

"""

    Store = None


class TradingAndOtherReceivableBalanceSheet(MultiPeriodField):
    """
    This will serve as the "parent" value to AccountsReceivable (DataId 23001) and OtherReceivables (DataId 23342) for all company

                financials reported in the IFRS GAAP.



    TradingAndOtherReceivableBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TradingAndOtherReceivableBalanceSheet) -> Decimal



Set: ThreeMonths(self: TradingAndOtherReceivableBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TradingAndOtherReceivableBalanceSheet) -> Decimal



Set: TwelveMonths(self: TradingAndOtherReceivableBalanceSheet) = value

"""

    Store = None


class TradingAssetsBalanceSheet(MultiPeriodField):
    """
    Trading account assets are bought and held principally for the purpose of selling them in the near term (thus held for only a short

                period of time). Unrealized holding gains and losses for trading securities are included in earnings.



    TradingAssetsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TradingAssetsBalanceSheet) -> Decimal



Set: ThreeMonths(self: TradingAssetsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TradingAssetsBalanceSheet) -> Decimal



Set: TwelveMonths(self: TradingAssetsBalanceSheet) = value

"""

    Store = None


class TradingGainLossIncomeStatement(MultiPeriodField):
    """
    A broker-dealer or other financial entity may buy and sell securities exclusively for its own account, sometimes referred to as

                proprietary trading. The profit or loss is measured by the difference between the acquisition cost and the selling price or current

                market or fair value. The net gain or loss, includes both realized and unrealized, from trading cash instruments, equities and

                derivative contracts (including commodity contracts) that has been recognized during the accounting period for the broker dealer or

                other financial entity's own account. This item is typically available for bank industry.



    TradingGainLossIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TradingGainLossIncomeStatement) -> Decimal



Set: NineMonths(self: TradingGainLossIncomeStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: TradingGainLossIncomeStatement) -> Decimal



Set: OneMonth(self: TradingGainLossIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TradingGainLossIncomeStatement) -> Decimal



Set: SixMonths(self: TradingGainLossIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TradingGainLossIncomeStatement) -> Decimal



Set: ThreeMonths(self: TradingGainLossIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TradingGainLossIncomeStatement) -> Decimal



Set: TwelveMonths(self: TradingGainLossIncomeStatement) = value

"""

    Store = None


class TradingLiabilitiesBalanceSheet(MultiPeriodField):
    """
    The carrying amount of liabilities as of the balance sheet date that pertain to principal and customer trading transactions, or which

                may be incurred with the objective of generating a profit from short-term fluctuations in price as part of an entity's market-making,

                hedging and proprietary trading. Examples include short positions in securities, derivatives and commodities, obligations under

                repurchase agreements, and securities borrowed arrangements.



    TradingLiabilitiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TradingLiabilitiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: TradingLiabilitiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TradingLiabilitiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: TradingLiabilitiesBalanceSheet) = value

"""

    Store = None


class TradingSecuritiesBalanceSheet(MultiPeriodField):
    """
    The total of financial instruments that are bought and held principally for the purpose of selling them in the near term (thus held for

                only a short period of time) or for debt and equity securities formerly categorized as available-for-sale or held-to-maturity which the

                company held as of the date it opted to account for such securities at fair value.



    TradingSecuritiesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TradingSecuritiesBalanceSheet) -> Decimal



Set: SixMonths(self: TradingSecuritiesBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TradingSecuritiesBalanceSheet) -> Decimal



Set: ThreeMonths(self: TradingSecuritiesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TradingSecuritiesBalanceSheet) -> Decimal



Set: TwelveMonths(self: TradingSecuritiesBalanceSheet) = value

"""

    Store = None


class TreasuryBillsandOtherEligibleBillsBalanceSheet(MultiPeriodField):
    """
    Investments backed by the central government, it usually carries less risk than other investments.



    TreasuryBillsandOtherEligibleBillsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TreasuryBillsandOtherEligibleBillsBalanceSheet) -> Decimal



Set: ThreeMonths(self: TreasuryBillsandOtherEligibleBillsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TreasuryBillsandOtherEligibleBillsBalanceSheet) -> Decimal



Set: TwelveMonths(self: TreasuryBillsandOtherEligibleBillsBalanceSheet) = value

"""

    Store = None


class TreasurySharesNumberBalanceSheet(MultiPeriodField):
    """
    Number of Treasury Shares.



    TreasurySharesNumberBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TreasurySharesNumberBalanceSheet) -> Decimal



Set: ThreeMonths(self: TreasurySharesNumberBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TreasurySharesNumberBalanceSheet) -> Decimal



Set: TwelveMonths(self: TreasurySharesNumberBalanceSheet) = value

"""

    Store = None


class TreasuryStockBalanceSheet(MultiPeriodField):
    """
    The portion of shares that a company keeps in their own treasury. Treasury stock may have come from a repurchase or buyback

                from shareholders; or it may have never been issued to the public in the first place. These shares don't pay dividends, have no

                voting rights, and are not included in shares outstanding calculations.



    TreasuryStockBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TreasuryStockBalanceSheet) -> Decimal



Set: NineMonths(self: TreasuryStockBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: TreasuryStockBalanceSheet) -> Decimal



Set: OneMonth(self: TreasuryStockBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TreasuryStockBalanceSheet) -> Decimal



Set: SixMonths(self: TreasuryStockBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TreasuryStockBalanceSheet) -> Decimal



Set: ThreeMonths(self: TreasuryStockBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TreasuryStockBalanceSheet) -> Decimal



Set: TwelveMonths(self: TreasuryStockBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: TreasuryStockBalanceSheet) -> Decimal



Set: TwoMonths(self: TreasuryStockBalanceSheet) = value

"""

    Store = None


class TrustFeesbyCommissionsIncomeStatement(MultiPeriodField):
    """
    Bank manages funds on behalf of its customers through the operation of various trust accounts. Any fees earned through managing

                those funds are called trust fees, which are recognized when earned. This item is typically available for bank industry.



    TrustFeesbyCommissionsIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: TrustFeesbyCommissionsIncomeStatement) -> Decimal



Set: NineMonths(self: TrustFeesbyCommissionsIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: TrustFeesbyCommissionsIncomeStatement) -> Decimal



Set: SixMonths(self: TrustFeesbyCommissionsIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: TrustFeesbyCommissionsIncomeStatement) -> Decimal



Set: ThreeMonths(self: TrustFeesbyCommissionsIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: TrustFeesbyCommissionsIncomeStatement) -> Decimal



Set: TwelveMonths(self: TrustFeesbyCommissionsIncomeStatement) = value

"""

    Store = None


class UnallocatedSurplusBalanceSheet(MultiPeriodField):
    """
    The amount of surplus from insurance contracts which has not been allocated at the balance sheet date. This is represented as a

                liability to policyholders, as it pertains to cumulative income arising from the with-profits business.



    UnallocatedSurplusBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: UnallocatedSurplusBalanceSheet) -> Decimal



Set: ThreeMonths(self: UnallocatedSurplusBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: UnallocatedSurplusBalanceSheet) -> Decimal



Set: TwelveMonths(self: UnallocatedSurplusBalanceSheet) = value

"""

    Store = None


class UnbilledReceivablesBalanceSheet(MultiPeriodField):
    """
    Revenues that are not currently billed from the customer under the terms of the contract.  This item is usually only available for

                utility industry.



    UnbilledReceivablesBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: UnbilledReceivablesBalanceSheet) -> Decimal



Set: ThreeMonths(self: UnbilledReceivablesBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: UnbilledReceivablesBalanceSheet) -> Decimal



Set: TwelveMonths(self: UnbilledReceivablesBalanceSheet) = value

"""

    Store = None


class UnderwritingExpensesIncomeStatement(MultiPeriodField):
    """
    Also known as Policy Acquisition Costs; and reported by insurance companies.  The cost incurred by an insurer when deciding

                whether to accept or decline a risk; may include meetings with the insureds or brokers, actuarial review of loss history, or physical

                inspections of exposures. Also, expenses deducted from insurance company revenues (including incurred losses and acquisition

                costs) to determine underwriting profit.



    UnderwritingExpensesIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: UnderwritingExpensesIncomeStatement) -> Decimal



Set: NineMonths(self: UnderwritingExpensesIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: UnderwritingExpensesIncomeStatement) -> Decimal



Set: SixMonths(self: UnderwritingExpensesIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: UnderwritingExpensesIncomeStatement) -> Decimal



Set: ThreeMonths(self: UnderwritingExpensesIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: UnderwritingExpensesIncomeStatement) -> Decimal



Set: TwelveMonths(self: UnderwritingExpensesIncomeStatement) = value

"""

    Store = None


class UnearnedIncomeBalanceSheet(MultiPeriodField):
    """
    Income received but not yet earned, it represents the unearned amount that is netted against the total loan.



    UnearnedIncomeBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: UnearnedIncomeBalanceSheet) -> Decimal



Set: NineMonths(self: UnearnedIncomeBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: UnearnedIncomeBalanceSheet) -> Decimal



Set: SixMonths(self: UnearnedIncomeBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: UnearnedIncomeBalanceSheet) -> Decimal



Set: ThreeMonths(self: UnearnedIncomeBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: UnearnedIncomeBalanceSheet) -> Decimal



Set: TwelveMonths(self: UnearnedIncomeBalanceSheet) = value

"""

    Store = None


class UnearnedPremiumsBalanceSheet(MultiPeriodField):
    """
    Carrying amount of premiums written on insurance contracts that have not been earned as of the balance sheet date.



    UnearnedPremiumsBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: UnearnedPremiumsBalanceSheet) -> Decimal



Set: NineMonths(self: UnearnedPremiumsBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: UnearnedPremiumsBalanceSheet) -> Decimal



Set: SixMonths(self: UnearnedPremiumsBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: UnearnedPremiumsBalanceSheet) -> Decimal



Set: ThreeMonths(self: UnearnedPremiumsBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: UnearnedPremiumsBalanceSheet) -> Decimal



Set: TwelveMonths(self: UnearnedPremiumsBalanceSheet) = value

"""

    Store = None


class UnpaidLossAndLossReserveBalanceSheet(MultiPeriodField):
    """
    Liability amount that reflects claims that are expected based upon statistical projections, but which have not been reported to the

                insurer.



    UnpaidLossAndLossReserveBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: UnpaidLossAndLossReserveBalanceSheet) -> Decimal



Set: NineMonths(self: UnpaidLossAndLossReserveBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: UnpaidLossAndLossReserveBalanceSheet) -> Decimal



Set: SixMonths(self: UnpaidLossAndLossReserveBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: UnpaidLossAndLossReserveBalanceSheet) -> Decimal



Set: ThreeMonths(self: UnpaidLossAndLossReserveBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: UnpaidLossAndLossReserveBalanceSheet) -> Decimal



Set: TwelveMonths(self: UnpaidLossAndLossReserveBalanceSheet) = value

"""

    Store = None


class UnrealizedGainLossBalanceSheet(MultiPeriodField):
    """
    A profit or loss that results from holding onto an asset rather than cashing it in and officially taking the profit or loss.



    UnrealizedGainLossBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: UnrealizedGainLossBalanceSheet) -> Decimal



Set: SixMonths(self: UnrealizedGainLossBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: UnrealizedGainLossBalanceSheet) -> Decimal



Set: ThreeMonths(self: UnrealizedGainLossBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: UnrealizedGainLossBalanceSheet) -> Decimal



Set: TwelveMonths(self: UnrealizedGainLossBalanceSheet) = value

"""

    Store = None


class UnrealizedGainLossOnInvestmentSecuritiesCashFlowStatement(MultiPeriodField):
    """
    The increases (decreases) in the market value of unsold securities whose gains (losses) were included in earnings.



    UnrealizedGainLossOnInvestmentSecuritiesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: UnrealizedGainLossOnInvestmentSecuritiesCashFlowStatement) -> Decimal



Set: NineMonths(self: UnrealizedGainLossOnInvestmentSecuritiesCashFlowStatement) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: UnrealizedGainLossOnInvestmentSecuritiesCashFlowStatement) -> Decimal



Set: OneMonth(self: UnrealizedGainLossOnInvestmentSecuritiesCashFlowStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: UnrealizedGainLossOnInvestmentSecuritiesCashFlowStatement) -> Decimal



Set: SixMonths(self: UnrealizedGainLossOnInvestmentSecuritiesCashFlowStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: UnrealizedGainLossOnInvestmentSecuritiesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: UnrealizedGainLossOnInvestmentSecuritiesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: UnrealizedGainLossOnInvestmentSecuritiesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: UnrealizedGainLossOnInvestmentSecuritiesCashFlowStatement) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: UnrealizedGainLossOnInvestmentSecuritiesCashFlowStatement) -> Decimal



Set: TwoMonths(self: UnrealizedGainLossOnInvestmentSecuritiesCashFlowStatement) = value

"""

    Store = None


class UnrealizedGainsLossesOnDerivativesCashFlowStatement(MultiPeriodField):
    """
    The gross gains and losses on derivatives. This item is usually only available for insurance industry.



    UnrealizedGainsLossesOnDerivativesCashFlowStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: UnrealizedGainsLossesOnDerivativesCashFlowStatement) -> Decimal



Set: ThreeMonths(self: UnrealizedGainsLossesOnDerivativesCashFlowStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: UnrealizedGainsLossesOnDerivativesCashFlowStatement) -> Decimal



Set: TwelveMonths(self: UnrealizedGainsLossesOnDerivativesCashFlowStatement) = value

"""

    Store = None


class ValuationRatios(object):
    """
    Definition of the ValuationRatios class



    ValuationRatios()
    """

    def UpdateValues(self, update):
        """
        UpdateValues(self: ValuationRatios, update: ValuationRatios)

            Applies updated values from update to this

             instance





            update: The next data update for this instance
        """
        pass

    ActualForwardDividend = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Used to collect the forward dividend for companies where our formula will not produce the correct value.



Get: ActualForwardDividend(self: ValuationRatios) -> Decimal



Set: ActualForwardDividend(self: ValuationRatios) = value

"""

    ActualTrailingDividend = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Used to collect the trailing dividend for companies where our formula will not produce the correct value.



Get: ActualTrailingDividend(self: ValuationRatios) -> Decimal



Set: ActualTrailingDividend(self: ValuationRatios) = value

"""

    BookValuePerShare = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Common Shareholder's Equity / Diluted Shares Outstanding



Get: BookValuePerShare(self: ValuationRatios) -> Decimal



Set: BookValuePerShare(self: ValuationRatios) = value

"""

    BookValueYield = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """BookValuePerShare / Price



Get: BookValueYield(self: ValuationRatios) -> Decimal



Set: BookValueYield(self: ValuationRatios) = value

"""

    BuyBackYield = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The net repurchase of shares outstanding over the market capital of the company. It is a measure of shareholder return.



Get: BuyBackYield(self: ValuationRatios) -> Decimal



Set: BuyBackYield(self: ValuationRatios) = value

"""

    CAPERatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The cyclically adjusted PE ratio for a company; adjusted close price divided by earnings per share. If the result is negative, zero,

            >10,000 or <0.001, then null. Morningstar uses the CPI index for US companies and Indexes from the World Bank for the rest of

            the global markets.



Get: CAPERatio(self: ValuationRatios) -> Decimal



Set: CAPERatio(self: ValuationRatios) = value

"""

    CashReturn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Refers to the ratio of free cash flow to enterprise value. Morningstar calculates the ratio by using the underlying data reported in

            the company filings or reports:   FCF /Enterprise Value.



Get: CashReturn(self: ValuationRatios) -> Decimal



Set: CashReturn(self: ValuationRatios) = value

"""

    CFOPerShare = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cash Flow from Operations / Average Diluted Shares Outstanding



Get: CFOPerShare(self: ValuationRatios) -> Decimal



Set: CFOPerShare(self: ValuationRatios) = value

"""

    CFYield = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """CFOPerShare / Price



Get: CFYield(self: ValuationRatios) -> Decimal



Set: CFYield(self: ValuationRatios) = value

"""

    DivYield5Year = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Average of the last 60 monthly observations of trailing dividend yield in the last 5 years.



Get: DivYield5Year(self: ValuationRatios) -> Decimal



Set: DivYield5Year(self: ValuationRatios) = value

"""

    EarningYield = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Diluted EPS / Price



Get: EarningYield(self: ValuationRatios) -> Decimal



Set: EarningYield(self: ValuationRatios) = value

"""

    EVtoEBIT = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates what is a company being valued per each dollar of EBIT generated.



Get: EVtoEBIT(self: ValuationRatios) -> Decimal



Set: EVtoEBIT(self: ValuationRatios) = value

"""

    EVToEBIT3YrAvg = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The three-year average for a company's EV to EBIT ratio: EV (Market Cap + Preferred stock + Long-Term Debt And Capital Lease

            + Short Term Debt And Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities

            - Securities Purchased with Agreement to Resell - Securities Borrowed) divided by EBIT (earnings minus expenses excluding

            interest and tax expenses) reported in the Financial Statements within the company filings or reports.



Get: EVToEBIT3YrAvg(self: ValuationRatios) -> Decimal



Set: EVToEBIT3YrAvg(self: ValuationRatios) = value

"""

    EVToEBIT3YrAvgChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the three-year average for a company's EV to EBIT ratio. Morningstar calculates the growth percentage based on the

            EV to EBIT ratio ((Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital Lease +

            Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with Agreement to

            Resell - Securities Borrowed) divided by EBIT (earnings minus expenses excluding interest and tax expenses) reported in the

            Financial Statements within the company filings or reports).



Get: EVToEBIT3YrAvgChange(self: ValuationRatios) -> Decimal



Set: EVToEBIT3YrAvgChange(self: ValuationRatios) = value

"""

    EVToEBITDA = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates what is a company being valued per each dollar of EBITDA generated.



Get: EVToEBITDA(self: ValuationRatios) -> Decimal



Set: EVToEBITDA(self: ValuationRatios) = value

"""

    EVToEBITDA10YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ten-year growth in the company's EV to EBITDA on a percentage basis. Morningstar calculates the growth percentage based

            on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital

            Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with

            Agreement to Resell - Securities Borrowed) divided by EBITDA (earnings minus expenses excluding interest, tax, depreciation, and

            amortization expenses) reported in the Financial Statements within the company filings or reports.



Get: EVToEBITDA10YearGrowth(self: ValuationRatios) -> Decimal



Set: EVToEBITDA10YearGrowth(self: ValuationRatios) = value

"""

    EVToEBITDA1YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The one-year growth in the company's EV to EBITDA on a percentage basis. Morningstar calculates the growth percentage based

            on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital

            Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with

            Agreement to Resell - Securities Borrowed) divided by EBITDA (earnings minus expenses excluding interest, tax, depreciation, and

            amortization expenses) reported in the Financial Statements within the company filings or reports.



Get: EVToEBITDA1YearGrowth(self: ValuationRatios) -> Decimal



Set: EVToEBITDA1YearGrowth(self: ValuationRatios) = value

"""

    EVToEBITDA3YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The three-year growth in the company's EV to EBITDA on a percentage basis. Morningstar calculates the growth percentage based

            on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital

            Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with

            Agreement to Resell - Securities Borrowed) divided by EBITDA (earnings minus expenses excluding interest, tax, depreciation, and

            amortization expenses) reported in the Financial Statements within the company filings or reports.



Get: EVToEBITDA3YearGrowth(self: ValuationRatios) -> Decimal



Set: EVToEBITDA3YearGrowth(self: ValuationRatios) = value

"""

    EVToEBITDA3YrAvg = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The three-year average for a company's EV to EBITDA ratio: EV (Market Cap + Preferred stock + Long-Term Debt And Capital

            Lease + Short Term Debt And Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market

            Securities - Securities Purchased with Agreement to Resell - Securities Borrowed) divided by EBITDA (earnings minus expenses

            excluding interest, tax, depreciation, and amortization expenses) reported in the Financial Statements within the company filings or

            reports.



Get: EVToEBITDA3YrAvg(self: ValuationRatios) -> Decimal



Set: EVToEBITDA3YrAvg(self: ValuationRatios) = value

"""

    EVToEBITDA3YrAvgChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the three-year average for a company's EV to EBITDA ratio. Morningstar calculates the growth percentage based on

            the EV to EBITDA ratio ((Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital

            Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with

            Agreement to Resell - Securities Borrowed) divided by EBITDA (earnings minus expenses excluding interest, tax depreciation and

            amortization expenses) reported in the Financial Statements within the company filings or reports).



Get: EVToEBITDA3YrAvgChange(self: ValuationRatios) -> Decimal



Set: EVToEBITDA3YrAvgChange(self: ValuationRatios) = value

"""

    EVToEBITDA5YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The five-year growth in the company's EV to EBITDA on a percentage basis. Morningstar calculates the growth percentage based

            on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital

            Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with

            Agreement to Resell - Securities Borrowed) divided by EBITDA (earnings minus expenses excluding interest, tax, depreciation, and

            amortization expenses) reported in the Financial Statements within the company filings or reports.



Get: EVToEBITDA5YearGrowth(self: ValuationRatios) -> Decimal



Set: EVToEBITDA5YearGrowth(self: ValuationRatios) = value

"""

    EVtoFCF = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates what is a company being valued per each dollar of free cash flow generated.



Get: EVtoFCF(self: ValuationRatios) -> Decimal



Set: EVtoFCF(self: ValuationRatios) = value

"""

    EVToFCF10YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ten-year growth in the company's EV to free cash flow on a percentage basis. Morningstar calculates the growth percentage

            based on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And

            Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased

            with Agreement to Resell - Securities Borrowed) divided by free cash flow (Cash flow from operations - Capital Expenditures)

            reported in the Financial Statements within the company filings or reports.



Get: EVToFCF10YearGrowth(self: ValuationRatios) -> Decimal



Set: EVToFCF10YearGrowth(self: ValuationRatios) = value

"""

    EVToFCF1YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The one-year growth in the company's EV to free cash flow on a percentage basis. Morningstar calculates the growth percentage

            based on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And

            Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased

            with Agreement to Resell - Securities Borrowed) divided by free cash flow (Cash flow from operations - Capital Expenditures)

            reported in the Financial Statements within the company filings or reports.



Get: EVToFCF1YearGrowth(self: ValuationRatios) -> Decimal



Set: EVToFCF1YearGrowth(self: ValuationRatios) = value

"""

    EVToFCF3YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The three-year growth in the company's EV to free cash flow on a percentage basis. Morningstar calculates the growth percentage

            based on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And

            Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased

            with Agreement to Resell - Securities Borrowed) divided by free cash flow (Cash flow from operations - Capital Expenditures)

            reported in the Financial Statements within the company filings or reports.



Get: EVToFCF3YearGrowth(self: ValuationRatios) -> Decimal



Set: EVToFCF3YearGrowth(self: ValuationRatios) = value

"""

    EVToFCF3YrAvg = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The three-year average for a company's EV to free cash flow ratio: EV (Market Cap + Preferred stock + Long-Term Debt And

            Capital Lease + Short Term Debt And Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And

            Market Securities - Securities Purchased with Agreement to Resell - Securities Borrowed) divided by free cash flow (Cash Flow

            from Operations - Capital Expenditures) reported in the Financial Statements within the company filings or reports.



Get: EVToFCF3YrAvg(self: ValuationRatios) -> Decimal



Set: EVToFCF3YrAvg(self: ValuationRatios) = value

"""

    EVToFCF3YrAvgChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the three-year average for a company's EV to free cash flow ratio. Morningstar calculates the growth percentage

            based on the EV to free cash flow ratio ((Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt

            And Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities

            Purchased with Agreement to Resell - Securities Borrowed) divided by free cash flow (Cash Flow from Operations - Capital

            Expenditures) reported in the Financial Statements within the company filings or reports).



Get: EVToFCF3YrAvgChange(self: ValuationRatios) -> Decimal



Set: EVToFCF3YrAvgChange(self: ValuationRatios) = value

"""

    EVToFCF5YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The five-year growth in the company's EV to free cash flow on a percentage basis. Morningstar calculates the growth percentage

            based on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And

            Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased

            with Agreement to Resell - Securities Borrowed) divided by free cash flow (Cash flow from operations - Capital Expenditures)

            reported in the Financial Statements within the company filings or reports.



Get: EVToFCF5YearGrowth(self: ValuationRatios) -> Decimal



Set: EVToFCF5YearGrowth(self: ValuationRatios) = value

"""

    EVToForwardEBIT = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates what is a company being valued per each dollar of estimated EBIT.



Get: EVToForwardEBIT(self: ValuationRatios) -> Decimal



Set: EVToForwardEBIT(self: ValuationRatios) = value

"""

    EVToForwardEBITDA = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates what is a company being valued per each dollar of estimated EBITDA.



Get: EVToForwardEBITDA(self: ValuationRatios) -> Decimal



Set: EVToForwardEBITDA(self: ValuationRatios) = value

"""

    EVToForwardRevenue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates what is a company being valued per each dollar of estimated revenue.



Get: EVToForwardRevenue(self: ValuationRatios) -> Decimal



Set: EVToForwardRevenue(self: ValuationRatios) = value

"""

    EVtoPreTaxIncome = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates what is a company being valued per each dollar of Pretax Income generated.



Get: EVtoPreTaxIncome(self: ValuationRatios) -> Decimal



Set: EVtoPreTaxIncome(self: ValuationRatios) = value

"""

    EVtoRevenue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates what is a company being valued per each dollar of revenue generated.



Get: EVtoRevenue(self: ValuationRatios) -> Decimal



Set: EVtoRevenue(self: ValuationRatios) = value

"""

    EVToRevenue10YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ten-year growth in the company's EV to revenue on a percentage basis. Morningstar calculates the growth percentage based

            on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital

            Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with

            Agreement to Resell - Securities Borrowed) divided by Total Revenue reported in the Financial Statements within the company

            filings or reports.



Get: EVToRevenue10YearGrowth(self: ValuationRatios) -> Decimal



Set: EVToRevenue10YearGrowth(self: ValuationRatios) = value

"""

    EVToRevenue1YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The one-year growth in the company's EV to revenue on a percentage basis. Morningstar calculates the growth percentage based

            on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital

            Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with

            Agreement to Resell - Securities Borrowed) divided by Total Revenue reported in the Financial Statements within the company

            filings or reports.



Get: EVToRevenue1YearGrowth(self: ValuationRatios) -> Decimal



Set: EVToRevenue1YearGrowth(self: ValuationRatios) = value

"""

    EVToRevenue3YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The three-year growth in the company's EV to revenue on a percentage basis. Morningstar calculates the growth percentage based

            on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital

            Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with

            Agreement to Resell - Securities Borrowed) divided by Total Revenue reported in the Financial Statements within the company

            filings or reports.



Get: EVToRevenue3YearGrowth(self: ValuationRatios) -> Decimal



Set: EVToRevenue3YearGrowth(self: ValuationRatios) = value

"""

    EVToRevenue3YrAvg = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The three-year average for a company's EV to revenue ratio: EV (Market Cap + Preferred stock + Long-Term Debt And Capital

            Lease + Short Term Debt And Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market

            Securities - Securities Purchased with Agreement to Resell - Securities Borrowed) divided by Total Revenue reported in the

            Financial Statements within the company filings or reports).



Get: EVToRevenue3YrAvg(self: ValuationRatios) -> Decimal



Set: EVToRevenue3YrAvg(self: ValuationRatios) = value

"""

    EVToRevenue3YrAvgChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the three-year average for a company's EV to revenue ratio. Morningstar calculates the growth percentage based on

            the EV to revenue ratio ((Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital

            Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with

            Agreement to Resell - Securities Borrowed) divided by Total Revenue reported in the Financial Statements within the company

            filings or reports).



Get: EVToRevenue3YrAvgChange(self: ValuationRatios) -> Decimal



Set: EVToRevenue3YrAvgChange(self: ValuationRatios) = value

"""

    EVToRevenue5YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The five-year growth in the company's EV to revenue on a percentage basis. Morningstar calculates the growth percentage based

            on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital

            Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with

            Agreement to Resell - Securities Borrowed) divided by Total Revenue reported in the Financial Statements within the company

            filings or reports.



Get: EVToRevenue5YearGrowth(self: ValuationRatios) -> Decimal



Set: EVToRevenue5YearGrowth(self: ValuationRatios) = value

"""

    EVtoTotalAssets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates what is a company being valued per each dollar of asset value; should be the default EV multiple used in an asset driven

            business.



Get: EVtoTotalAssets(self: ValuationRatios) -> Decimal



Set: EVtoTotalAssets(self: ValuationRatios) = value

"""

    EVToTotalAssets10YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ten-year growth in the company's EV to total assets on a percentage basis. Morningstar calculates the growth percentage

            based on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And

            Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased

            with Agreement to Resell - Securities Borrowed) divided by total assets reported in the Financial Statements within the company

            filings or reports.



Get: EVToTotalAssets10YearGrowth(self: ValuationRatios) -> Decimal



Set: EVToTotalAssets10YearGrowth(self: ValuationRatios) = value

"""

    EVToTotalAssets1YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The one-year growth in the company's EV to total assets on a percentage basis. Morningstar calculates the growth percentage

            based on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And

            Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased

            with Agreement to Resell - Securities Borrowed) divided by total assets reported in the Financial Statements within the company

            filings or reports.



Get: EVToTotalAssets1YearGrowth(self: ValuationRatios) -> Decimal



Set: EVToTotalAssets1YearGrowth(self: ValuationRatios) = value

"""

    EVToTotalAssets3YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The three-year growth in the company's EV to total assets on a percentage basis. Morningstar calculates the growth percentage

            based on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And

            Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased

            with Agreement to Resell - Securities Borrowed) divided by total assets reported in the Financial Statements within the company

            filings or reports.



Get: EVToTotalAssets3YearGrowth(self: ValuationRatios) -> Decimal



Set: EVToTotalAssets3YearGrowth(self: ValuationRatios) = value

"""

    EVToTotalAssets3YrAvg = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The three-year average for a company's EV to total assets ratio: EV (Market Cap + Preferred stock + Long-Term Debt And Capital

            Lease + Short Term Debt And Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market

            Securities - Securities Purchased with Agreement to Resell - Securities Borrowed) divided by Total Assets reported in the Financial

            Statements within the company filings or reports.



Get: EVToTotalAssets3YrAvg(self: ValuationRatios) -> Decimal



Set: EVToTotalAssets3YrAvg(self: ValuationRatios) = value

"""

    EVToTotalAssets3YrAvgChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the three-year average for a company's EV to total assets ratio. Morningstar calculates the growth percentage based

            on the EV to total assets ratio ((Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And

            Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased

            with Agreement to Resell - Securities Borrowed) divided by total assets reported in the Financial Statements within the company

            filings or reports).



Get: EVToTotalAssets3YrAvgChange(self: ValuationRatios) -> Decimal



Set: EVToTotalAssets3YrAvgChange(self: ValuationRatios) = value

"""

    EVToTotalAssets5YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The five-year growth in the company's EV to total assets on a percentage basis. Morningstar calculates the growth percentage

            based on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And

            Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased

            with Agreement to Resell - Securities Borrowed) divided by total assets reported in the Financial Statements within the company

            filings or reports.



Get: EVToTotalAssets5YearGrowth(self: ValuationRatios) -> Decimal



Set: EVToTotalAssets5YearGrowth(self: ValuationRatios) = value

"""

    ExpectedDividendGrowthRate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth rate from the TrailingDividend to the Forward Dividend: {(Forward Dividend/Trailing Dividend) - 1}*100.



Get: ExpectedDividendGrowthRate(self: ValuationRatios) -> Decimal



Set: ExpectedDividendGrowthRate(self: ValuationRatios) = value

"""

    FCFPerShare = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Free Cash Flow / Average Diluted Shares Outstanding



Get: FCFPerShare(self: ValuationRatios) -> Decimal



Set: FCFPerShare(self: ValuationRatios) = value

"""

    FCFRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Adjusted close price/ Free Cash Flow Per Share. If the result is negative or zero, then null.



Get: FCFRatio(self: ValuationRatios) -> Decimal



Set: FCFRatio(self: ValuationRatios) = value

"""

    FCFYield = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """FCFPerShare / Price



Get: FCFYield(self: ValuationRatios) -> Decimal



Set: FCFYield(self: ValuationRatios) = value

"""

    FFOPerShare = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Funds from operations per share; populated only for real estate investment trusts (REITs), defined as the sum of net income,

            gain/loss (realized and unrealized) on investment securities, asset impairment charge, depreciation and amortization and gain/ loss

            on the sale of business and property plant and equipment, divided by shares outstanding.



Get: FFOPerShare(self: ValuationRatios) -> Decimal



Set: FFOPerShare(self: ValuationRatios) = value

"""

    FirstYearEstimatedEPSGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """EPS Growth Ratio: (Estimated EPS Year 1) / (TTM Normalized diluted EPS



Get: FirstYearEstimatedEPSGrowth(self: ValuationRatios) -> Decimal



Set: FirstYearEstimatedEPSGrowth(self: ValuationRatios) = value

"""

    ForwardCalculationStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates the method used to calculate Forward Dividend. There are three options: Annual, Look-back and Manual.



Get: ForwardCalculationStyle(self: ValuationRatios) -> str



Set: ForwardCalculationStyle(self: ValuationRatios) = value

"""

    ForwardDividend = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Latest Dividend * Frequency



Get: ForwardDividend(self: ValuationRatios) -> Decimal



Set: ForwardDividend(self: ValuationRatios) = value

"""

    ForwardDividendYield = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """(Current Dividend Per Share * Payout Frequency) / Price



Get: ForwardDividendYield(self: ValuationRatios) -> Decimal



Set: ForwardDividendYield(self: ValuationRatios) = value

"""

    ForwardEarningYield = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Estimated Earnings Per Share / Price

            Note: a) The "Next" Year's EPS Estimate is used; For instance, if today's actual date is March 1, 2009, the "Current" EPS Estimate

            for MSFT is June 2009, and the "Next" EPS Estimate for MSFT is June 2010; the latter is used.

            b) The eps estimated data is sourced from a third party.



Get: ForwardEarningYield(self: ValuationRatios) -> Decimal



Set: ForwardEarningYield(self: ValuationRatios) = value

"""

    ForwardPERatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """1 / ForwardEarningYield

            If result is negative, then null



Get: ForwardPERatio(self: ValuationRatios) -> Decimal



Set: ForwardPERatio(self: ValuationRatios) = value

"""

    ForwardROA = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Estimated EPS/Total Assets Per Share



Get: ForwardROA(self: ValuationRatios) -> Decimal



Set: ForwardROA(self: ValuationRatios) = value

"""

    ForwardROE = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Estimated EPS/Book Value Per Share



Get: ForwardROE(self: ValuationRatios) -> Decimal



Set: ForwardROE(self: ValuationRatios) = value

"""

    NormalizedPEGatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Normalized ForwardPERatio / Long-term Average Normalized Earnings Growth Rate



Get: NormalizedPEGatio(self: ValuationRatios) -> Decimal



Set: NormalizedPEGatio(self: ValuationRatios) = value

"""

    NormalizedPERatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Adjusted Close Price/ Normalized EPS. Normalized EPS removes onetime and unusual items from net EPS, to provide investors with

            a more accurate measure of the company's true earnings. If the result is negative, zero, >10,000 or <0.001, then null.



Get: NormalizedPERatio(self: ValuationRatios) -> Decimal



Set: NormalizedPERatio(self: ValuationRatios) = value

"""

    PayoutRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Dividend per share / Diluted earnings per share



Get: PayoutRatio(self: ValuationRatios) -> Decimal



Set: PayoutRatio(self: ValuationRatios) = value

"""

    PBRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Adjusted close price / Book Value Per Share. If the result is negative or zero, then null.



Get: PBRatio(self: ValuationRatios) -> Decimal



Set: PBRatio(self: ValuationRatios) = value

"""

    PBRatio10YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ten-year growth in the company's price to book ratio on a percentage basis. Morningstar calculates the growth percentage

            based on the adjusted close price divided by the book value per share reported in the Financial Statements within the company

            filings or reports.



Get: PBRatio10YearGrowth(self: ValuationRatios) -> Decimal



Set: PBRatio10YearGrowth(self: ValuationRatios) = value

"""

    PBRatio1YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The one-year growth in the company's price to book ratio on a percentage basis. Morningstar calculates the growth percentage

            based on the adjusted close price divided by the book value per share reported in the Financial Statements within the company

            filings or reports.



Get: PBRatio1YearGrowth(self: ValuationRatios) -> Decimal



Set: PBRatio1YearGrowth(self: ValuationRatios) = value

"""

    PBRatio3YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The three-year growth in the company's price to book ratio on a percentage basis. Morningstar calculates the growth percentage

            based on the adjusted close price divided by the book value per share reported in the Financial Statements within the company

            filings or reports.



Get: PBRatio3YearGrowth(self: ValuationRatios) -> Decimal



Set: PBRatio3YearGrowth(self: ValuationRatios) = value

"""

    PBRatio3YrAvg = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The three-year average for a company's price to book ratio (the adjusted close price divided by the book value per share reported in

            the Financial Statements within the company filings or reports).



Get: PBRatio3YrAvg(self: ValuationRatios) -> Decimal



Set: PBRatio3YrAvg(self: ValuationRatios) = value

"""

    PBRatio3YrAvgChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the three-year average for a company's price to book ratio. Morningstar calculates the growth percentage based on

            the adjusted close price divided by the book value per share reported in the Financial Statements within the company filings or

            reports.



Get: PBRatio3YrAvgChange(self: ValuationRatios) -> Decimal



Set: PBRatio3YrAvgChange(self: ValuationRatios) = value

"""

    PBRatio5YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The five-year growth in the company's price to book ratio on a percentage basis. Morningstar calculates the growth percentage

            based on the adjusted close price divided by the book value per share reported in the Financial Statements within the company

            filings or reports.



Get: PBRatio5YearGrowth(self: ValuationRatios) -> Decimal



Set: PBRatio5YearGrowth(self: ValuationRatios) = value

"""

    PCashRatio3YrAvg = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The three-year average for a company's price to cash ratio (the adjusted close price divided by the cash flow per share reported in

            the Financial Statements within the company filings or reports).



Get: PCashRatio3YrAvg(self: ValuationRatios) -> Decimal



Set: PCashRatio3YrAvg(self: ValuationRatios) = value

"""

    PCFRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Adjusted close price /Cash Flow Per Share. If the result is negative or zero, then null.



Get: PCFRatio(self: ValuationRatios) -> Decimal



Set: PCFRatio(self: ValuationRatios) = value

"""

    PEGPayback = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of years it would take for a company's cumulative earnings to equal the stock's current trading price, assuming that the

            company continues to increase its annual earnings at the growth rate used to calculate the PEG ratio.

            [ Log (PG/E + 1)  / Log (1 + G) ] - 1

            Where

            P=Price

            E=Next Fiscal Year's Estimated EPS

            G=Long-term Average Earning Growth



Get: PEGPayback(self: ValuationRatios) -> Decimal



Set: PEGPayback(self: ValuationRatios) = value

"""

    PEGRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """ForwardPERatio / Long-term Average Earning Growth Rate



Get: PEGRatio(self: ValuationRatios) -> Decimal



Set: PEGRatio(self: ValuationRatios) = value

"""

    PERatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Adjusted Close Price/ EPS. If the result is negative, zero, >10,000 or <0.001, then null.



Get: PERatio(self: ValuationRatios) -> Decimal



Set: PERatio(self: ValuationRatios) = value

"""

    PERatio10YearAverage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ten-year average for a company's PE ratio (adjusted close price divided by the earnings per share reported in the Financial

            Statements within the company filings or reports).



Get: PERatio10YearAverage(self: ValuationRatios) -> Decimal



Set: PERatio10YearAverage(self: ValuationRatios) = value

"""

    PERatio10YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ten-year growth in the company's PE ratio on a percentage basis. Morningstar calculates the growth percentage based on the

            adjusted close price divided by the earnings per share reported in the Financial Statements within the company filings or reports.



Get: PERatio10YearGrowth(self: ValuationRatios) -> Decimal



Set: PERatio10YearGrowth(self: ValuationRatios) = value

"""

    PERatio10YearHigh = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ten-year high for a company's PE ratio (adjusted close price divided by the earnings per share reported in the Financial

            Statements within the company filings or reports).



Get: PERatio10YearHigh(self: ValuationRatios) -> Decimal



Set: PERatio10YearHigh(self: ValuationRatios) = value

"""

    PERatio10YearLow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ten-year low for a company's PE ratio (adjusted close price divided by the earnings per share reported in the Financial

            Statements within the company filings or reports).



Get: PERatio10YearLow(self: ValuationRatios) -> Decimal



Set: PERatio10YearLow(self: ValuationRatios) = value

"""

    PERatio1YearAverage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The one-year average for a company's PE ratio (adjusted close price divided by the earnings per share reported in the Financial

            Statements within the company filings or reports).



Get: PERatio1YearAverage(self: ValuationRatios) -> Decimal



Set: PERatio1YearAverage(self: ValuationRatios) = value

"""

    PERatio1YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The one-year growth in the company's PE ratio on a percentage basis. Morningstar calculates the growth percentage based on the

            adjusted close price divided by the earnings per share reported in the Financial Statements within the company filings or reports.



Get: PERatio1YearGrowth(self: ValuationRatios) -> Decimal



Set: PERatio1YearGrowth(self: ValuationRatios) = value

"""

    PERatio1YearHigh = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The one-year high for a company's PE ratio (adjusted close price divided by the earnings per share reported in the Financial

            Statements within the company filings or reports).



Get: PERatio1YearHigh(self: ValuationRatios) -> Decimal



Set: PERatio1YearHigh(self: ValuationRatios) = value

"""

    PERatio1YearLow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The one-year low for a company's PE ratio (adjusted close price divided by the earnings per share reported in the Financial

            Statements within the company filings or reports).



Get: PERatio1YearLow(self: ValuationRatios) -> Decimal



Set: PERatio1YearLow(self: ValuationRatios) = value

"""

    PERatio3YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The three-year growth in the company's PE ratio on a percentage basis. Morningstar calculates the growth percentage based on

            the adjusted close price divided by the earnings per share reported in the Financial Statements within the company filings or

            reports.



Get: PERatio3YearGrowth(self: ValuationRatios) -> Decimal



Set: PERatio3YearGrowth(self: ValuationRatios) = value

"""

    PERatio3YrAvg = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The three-year average for a company's PE ratio (the adjusted close price divided by the earnings per share reported in the Financial

            Statements within the company filings or reports).



Get: PERatio3YrAvg(self: ValuationRatios) -> Decimal



Set: PERatio3YrAvg(self: ValuationRatios) = value

"""

    PERatio3YrAvgChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the three-year average for a company's PE ratio. Morningstar calculates the growth percentage based on the

            adjusted close price divided by the earnings per share reported in the Financial Statements within the company filings or reports.



Get: PERatio3YrAvgChange(self: ValuationRatios) -> Decimal



Set: PERatio3YrAvgChange(self: ValuationRatios) = value

"""

    PERatio5YearAverage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The five-year average for a company's PE ratio (adjusted close price divided by the earnings per share reported in the Financial

            Statements within the company filings or reports).



Get: PERatio5YearAverage(self: ValuationRatios) -> Decimal



Set: PERatio5YearAverage(self: ValuationRatios) = value

"""

    PERatio5YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The five-year growth in the company's PE ratio on a percentage basis. Morningstar calculates the growth percentage based on the

            adjusted close price divided by the earnings per share reported in the Financial Statements within the company filings or reports.



Get: PERatio5YearGrowth(self: ValuationRatios) -> Decimal



Set: PERatio5YearGrowth(self: ValuationRatios) = value

"""

    PERatio5YearHigh = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The five-year high for a company's PE ratio (adjusted close price divided by the earnings per share reported in the Financial

            Statements within the company filings or reports).



Get: PERatio5YearHigh(self: ValuationRatios) -> Decimal



Set: PERatio5YearHigh(self: ValuationRatios) = value

"""

    PERatio5YearLow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The five-year low for a company's PE ratio (adjusted close price divided by the earnings per share reported in the Financial

            Statements within the company filings or reports).



Get: PERatio5YearLow(self: ValuationRatios) -> Decimal



Set: PERatio5YearLow(self: ValuationRatios) = value

"""

    PFCFRatio10YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ten-year growth in the company's price to free cash flow ratio on a percentage basis. Morningstar calculates the growth

            percentage based on the adjusted close price divided by the free cash flow reported in the Financial Statements within the

            company filings or reports.



Get: PFCFRatio10YearGrowth(self: ValuationRatios) -> Decimal



Set: PFCFRatio10YearGrowth(self: ValuationRatios) = value

"""

    PFCFRatio1YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The one-year growth in the company's price to free cash flow ratio on a percentage basis. Morningstar calculates the growth

            percentage based on the adjusted close price divided by the free cash flow reported in the Financial Statements within the

            company filings or reports.



Get: PFCFRatio1YearGrowth(self: ValuationRatios) -> Decimal



Set: PFCFRatio1YearGrowth(self: ValuationRatios) = value

"""

    PFCFRatio3YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The three-year growth in the company's price to free cash flow ratio on a percentage basis. Morningstar calculates the growth

            percentage based on the adjusted close price divided by the free cash flow reported in the Financial Statements within the

            company filings or reports.



Get: PFCFRatio3YearGrowth(self: ValuationRatios) -> Decimal



Set: PFCFRatio3YearGrowth(self: ValuationRatios) = value

"""

    PFCFRatio3YrAvg = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The three-year average for a company's price to free cash flow ratio (the adjusted close price divided by the free cash flow per

            share reported in the Financial Statements within the company filings or reports).



Get: PFCFRatio3YrAvg(self: ValuationRatios) -> Decimal



Set: PFCFRatio3YrAvg(self: ValuationRatios) = value

"""

    PFCFRatio3YrAvgChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the three-year average for a company's price to free cash flow ratio. Morningstar calculates the growth percentage

            based on the adjusted close price divided by the free cash flow per share reported in the Financial Statements within the company

            filings or reports.



Get: PFCFRatio3YrAvgChange(self: ValuationRatios) -> Decimal



Set: PFCFRatio3YrAvgChange(self: ValuationRatios) = value

"""

    PFCFRatio5YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The five-year growth in the company's price to free cash flow ratio on a percentage basis. Morningstar calculates the growth

            percentage based on the adjusted close price divided by the free cash flow reported in the Financial Statements within the

            company filings or reports.



Get: PFCFRatio5YearGrowth(self: ValuationRatios) -> Decimal



Set: PFCFRatio5YearGrowth(self: ValuationRatios) = value

"""

    PriceChange1M = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Price change this month, expressed as latest price/last month end price.



Get: PriceChange1M(self: ValuationRatios) -> Decimal



Set: PriceChange1M(self: ValuationRatios) = value

"""

    PricetoCashRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ratio of a stock's price to its cash flow per share.



Get: PricetoCashRatio(self: ValuationRatios) -> Decimal



Set: PricetoCashRatio(self: ValuationRatios) = value

"""

    PricetoEBITDA = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Adjusted close price/EBITDA Per Share. If the result is negative or zero, then null.



Get: PricetoEBITDA(self: ValuationRatios) -> Decimal



Set: PricetoEBITDA(self: ValuationRatios) = value

"""

    PSRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Adjusted close price / Sales Per Share. If the result is negative or zero, then null.



Get: PSRatio(self: ValuationRatios) -> Decimal



Set: PSRatio(self: ValuationRatios) = value

"""

    PSRatio10YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ten-year growth in the company's price to sales ratio on a percentage basis. Morningstar calculates the growth percentage

            based on the adjusted close price divided by the sales per share reported in the Financial Statements within the company filings or

            reports.



Get: PSRatio10YearGrowth(self: ValuationRatios) -> Decimal



Set: PSRatio10YearGrowth(self: ValuationRatios) = value

"""

    PSRatio1YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The one-year growth in the company's price to sales ratio on a percentage basis. Morningstar calculates the growth percentage

            based on the adjusted close price divided by the sales per share reported in the Financial Statements within the company filings or

            reports.



Get: PSRatio1YearGrowth(self: ValuationRatios) -> Decimal



Set: PSRatio1YearGrowth(self: ValuationRatios) = value

"""

    PSRatio3YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The three-year growth in the company's price to sales ratio on a percentage basis. Morningstar calculates the growth percentage

            based on the adjusted close price divided by the sales per share reported in the Financial Statements within the company filings or

            reports.



Get: PSRatio3YearGrowth(self: ValuationRatios) -> Decimal



Set: PSRatio3YearGrowth(self: ValuationRatios) = value

"""

    PSRatio3YrAvg = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The three-year average for a company's price to sales ratio (the adjusted close price divided by the total sales per share reported in

            the Financial Statements within the company filings or reports).



Get: PSRatio3YrAvg(self: ValuationRatios) -> Decimal



Set: PSRatio3YrAvg(self: ValuationRatios) = value

"""

    PSRatio3YrAvgChange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The growth in the three-year average for a company's price to sales ratio. Morningstar calculates the growth percentage based on

            the adjusted close price divided by the total sales per share reported in the Financial Statements within the company filings or

            reports.



Get: PSRatio3YrAvgChange(self: ValuationRatios) -> Decimal



Set: PSRatio3YrAvgChange(self: ValuationRatios) = value

"""

    PSRatio5YearGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The five-year growth in the company's price to sales ratio on a percentage basis. Morningstar calculates the growth percentage

            based on the adjusted close price divided by the sales per share reported in the Financial Statements within the company filings or

            reports.



Get: PSRatio5YearGrowth(self: ValuationRatios) -> Decimal



Set: PSRatio5YearGrowth(self: ValuationRatios) = value

"""

    RatioPE5YearAverage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The five-year average of the company's price-to-earnings ratio.



Get: RatioPE5YearAverage(self: ValuationRatios) -> Decimal



Set: RatioPE5YearAverage(self: ValuationRatios) = value

"""

    SalesPerShare = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Sales / Average Diluted Shares Outstanding



Get: SalesPerShare(self: ValuationRatios) -> Decimal



Set: SalesPerShare(self: ValuationRatios) = value

"""

    SalesYield = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """SalesPerShare / Price



Get: SalesYield(self: ValuationRatios) -> Decimal



Set: SalesYield(self: ValuationRatios) = value

"""

    SecondYearEstimatedEPSGrowth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """EPS Growth Ratio: (Estimated EPS Year 2) / (Estimated EPS Year 1)



Get: SecondYearEstimatedEPSGrowth(self: ValuationRatios) -> Decimal



Set: SecondYearEstimatedEPSGrowth(self: ValuationRatios) = value

"""

    SustainableGrowthRate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """ROE * (1 - Payout Ratio)



Get: SustainableGrowthRate(self: ValuationRatios) -> Decimal



Set: SustainableGrowthRate(self: ValuationRatios) = value

"""

    TangibleBookValuePerShare = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The company's total book value less the value of any intangible assets dividend by number of shares.



Get: TangibleBookValuePerShare(self: ValuationRatios) -> Decimal



Set: TangibleBookValuePerShare(self: ValuationRatios) = value

"""

    TangibleBVPerShare3YrAvg = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The three year average for tangible book value per share.



Get: TangibleBVPerShare3YrAvg(self: ValuationRatios) -> Decimal



Set: TangibleBVPerShare3YrAvg(self: ValuationRatios) = value

"""

    TangibleBVPerShare5YrAvg = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The five year average for tangible book value per share.



Get: TangibleBVPerShare5YrAvg(self: ValuationRatios) -> Decimal



Set: TangibleBVPerShare5YrAvg(self: ValuationRatios) = value

"""

    TotalAssetPerShare = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Total Assets / Diluted Shares Outstanding



Get: TotalAssetPerShare(self: ValuationRatios) -> Decimal



Set: TotalAssetPerShare(self: ValuationRatios) = value

"""

    TotalYield = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The total yield that shareholders can expect, by summing Dividend Yield and Buyback Yield.



Get: TotalYield(self: ValuationRatios) -> Decimal



Set: TotalYield(self: ValuationRatios) = value

"""

    TrailingCalculationStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates the method used to calculate Trailing Dividend. There are two options: Look-back and Manual.



Get: TrailingCalculationStyle(self: ValuationRatios) -> str



Set: TrailingCalculationStyle(self: ValuationRatios) = value

"""

    TrailingDividendYield = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Dividends Per Share over the trailing 12 months / Price



Get: TrailingDividendYield(self: ValuationRatios) -> Decimal



Set: TrailingDividendYield(self: ValuationRatios) = value

"""

    TwoYearsForwardEarningYield = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """2 Years Forward Estimated EPS / Adjusted Close Price



Get: TwoYearsForwardEarningYield(self: ValuationRatios) -> Decimal



Set: TwoYearsForwardEarningYield(self: ValuationRatios) = value

"""

    TwoYearsForwardPERatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Adjusted Close Price/2 Years Forward Estimated EPS



Get: TwoYearsForwardPERatio(self: ValuationRatios) -> Decimal



Set: TwoYearsForwardPERatio(self: ValuationRatios) = value

"""

    TwoYrsEVToForwardEBIT = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates what is a company being valued per each dollar of estimated EBIT in year 2.



Get: TwoYrsEVToForwardEBIT(self: ValuationRatios) -> Decimal



Set: TwoYrsEVToForwardEBIT(self: ValuationRatios) = value

"""

    TwoYrsEVToForwardEBITDA = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates what is a company being valued per each dollar of estimated EBITDA in year 2.



Get: TwoYrsEVToForwardEBITDA(self: ValuationRatios) -> Decimal



Set: TwoYrsEVToForwardEBITDA(self: ValuationRatios) = value

"""

    WorkingCapitalPerShare = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """(Current Assets - Current Liabilities)/number of shares



Get: WorkingCapitalPerShare(self: ValuationRatios) -> Decimal



Set: WorkingCapitalPerShare(self: ValuationRatios) = value

"""

    WorkingCapitalPerShare3YrAvg = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The three year average for working capital per share.



Get: WorkingCapitalPerShare3YrAvg(self: ValuationRatios) -> Decimal



Set: WorkingCapitalPerShare3YrAvg(self: ValuationRatios) = value

"""

    WorkingCapitalPerShare5YrAvg = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The five year average for working capital per share.



Get: WorkingCapitalPerShare5YrAvg(self: ValuationRatios) -> Decimal



Set: WorkingCapitalPerShare5YrAvg(self: ValuationRatios) = value

"""


class WagesandSalariesIncomeStatement(MultiPeriodField):
    """
    This is the portion under Staff Costs that represents salary paid to the employees in respect of their work.



    WagesandSalariesIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: WagesandSalariesIncomeStatement) -> Decimal



Set: SixMonths(self: WagesandSalariesIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: WagesandSalariesIncomeStatement) -> Decimal



Set: TwelveMonths(self: WagesandSalariesIncomeStatement) = value

"""

    Store = None


class WaterProductionBalanceSheet(MultiPeriodField):
    """
    The amount for a facility and plant that provides water which might include wells, reservoirs, pumping stations, and control

                facilities; and waste water systems which includes the waste treatment and disposal facility and equipment. This item is usually

                only available for utility industry.



    WaterProductionBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: WaterProductionBalanceSheet) -> Decimal



Set: ThreeMonths(self: WaterProductionBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: WaterProductionBalanceSheet) -> Decimal



Set: TwelveMonths(self: WaterProductionBalanceSheet) = value

"""

    Store = None


class WorkingCapitalBalanceSheet(MultiPeriodField):
    """
    Current Assets minus Current Liabilities.  This item is usually not available for bank and insurance industries.



    WorkingCapitalBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: WorkingCapitalBalanceSheet) -> Decimal



Set: NineMonths(self: WorkingCapitalBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: WorkingCapitalBalanceSheet) -> Decimal



Set: OneMonth(self: WorkingCapitalBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: WorkingCapitalBalanceSheet) -> Decimal



Set: SixMonths(self: WorkingCapitalBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: WorkingCapitalBalanceSheet) -> Decimal



Set: ThreeMonths(self: WorkingCapitalBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: WorkingCapitalBalanceSheet) -> Decimal



Set: TwelveMonths(self: WorkingCapitalBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: WorkingCapitalBalanceSheet) -> Decimal



Set: TwoMonths(self: WorkingCapitalBalanceSheet) = value

"""

    Store = None


class WorkingCapitalTurnoverRatio(MultiPeriodField):
    """
    Total revenue / working capital (current assets minus current liabilities)



    WorkingCapitalTurnoverRatio(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    OneYear = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneYear period value for the field



Get: OneYear(self: WorkingCapitalTurnoverRatio) -> Decimal



Set: OneYear(self: WorkingCapitalTurnoverRatio) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: WorkingCapitalTurnoverRatio) -> Decimal



Set: ThreeMonths(self: WorkingCapitalTurnoverRatio) = value

"""

    Store = None


class WorkInProcessBalanceSheet(MultiPeriodField):
    """
    Work, or goods, in the process of being fabricated or manufactured but not yet completed as finished goods. This item is usually

                available for manufacturing and mining industries.



    WorkInProcessBalanceSheet(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: WorkInProcessBalanceSheet) -> Decimal



Set: NineMonths(self: WorkInProcessBalanceSheet) = value

"""

    OneMonth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the OneMonth period value for the field



Get: OneMonth(self: WorkInProcessBalanceSheet) -> Decimal



Set: OneMonth(self: WorkInProcessBalanceSheet) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: WorkInProcessBalanceSheet) -> Decimal



Set: SixMonths(self: WorkInProcessBalanceSheet) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: WorkInProcessBalanceSheet) -> Decimal



Set: ThreeMonths(self: WorkInProcessBalanceSheet) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: WorkInProcessBalanceSheet) -> Decimal



Set: TwelveMonths(self: WorkInProcessBalanceSheet) = value

"""

    TwoMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwoMonths period value for the field



Get: TwoMonths(self: WorkInProcessBalanceSheet) -> Decimal



Set: TwoMonths(self: WorkInProcessBalanceSheet) = value

"""

    Store = None


class WriteOffIncomeStatement(MultiPeriodField):
    """
    A reduction in the value of an asset or earnings by the amount of an expense or loss.



    WriteOffIncomeStatement(store: IDictionary[str, Decimal])
    """

    def GetPeriodValue(self, period):
        """
        GetPeriodValue(self: MultiPeriodField, period: Byte) -> Decimal



            Internal implementation which gets the value of

             the field for the requested period
        """
        pass

    def SetPeriodValue(self, period, value):
        """
        SetPeriodValue(self: MultiPeriodField, period: Byte, value: Decimal)

            Internal implementation which sets the value of

             the field for the specified period
        """
        pass

    @staticmethod  # known case of __new__
    def __new__(self, store):
        """ __new__(cls: type, store: IDictionary[str, Decimal]) """
        pass

    DefaultPeriod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default period for the field



"""

    NineMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the NineMonths period value for the field



Get: NineMonths(self: WriteOffIncomeStatement) -> Decimal



Set: NineMonths(self: WriteOffIncomeStatement) = value

"""

    SixMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the SixMonths period value for the field



Get: SixMonths(self: WriteOffIncomeStatement) -> Decimal



Set: SixMonths(self: WriteOffIncomeStatement) = value

"""

    ThreeMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the ThreeMonths period value for the field



Get: ThreeMonths(self: WriteOffIncomeStatement) -> Decimal



Set: ThreeMonths(self: WriteOffIncomeStatement) = value

"""

    TwelveMonths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets/sets the TwelveMonths period value for the field



Get: TwelveMonths(self: WriteOffIncomeStatement) -> Decimal



Set: TwelveMonths(self: WriteOffIncomeStatement) = value

"""

    Store = None


