# encoding: utf-8
# module QuantConnect.Orders.Serialization calls itself Serialization
# from QuantConnect.Common, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null
# by generator 1.145
# no doc
# no imports

# no functions
# classes

class OrderEventJsonConverter(TypeChangeJsonConverter[OrderEvent, SerializedOrderEvent]):
    """
    Defines how OrderEvents should be serialized to json
    
    OrderEventJsonConverter(algorithmId: str)
    """
    @staticmethod # known case of __new__
    def __new__(self, algorithmId):
        """ __new__(cls: type, algorithmId: str) """
        pass

    PopulateProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True will populate TResult object returned by QuantConnect.Orders.Serialization.OrderEventJsonConverter.Convert(QuantConnect.Orders.Serialization.SerializedOrderEvent) with json properties

"""



class SerializedOrder(object):
    """
    Data transfer object used for serializing an QuantConnect.Orders.Order that was just generated by an algorithm
    
    SerializedOrder(order: Order, algorithmId: str)
    """
    @staticmethod # known case of __new__
    def __new__(self, order, algorithmId):
        """ __new__(cls: type, order: Order, algorithmId: str) """
        pass

    AlgorithmId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Algorithm Id, BacktestId or DeployId

Get: AlgorithmId(self: SerializedOrder) -> str

Set: AlgorithmId(self: SerializedOrder) = value
"""

    BrokerId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Brokerage Id for this order for when the brokerage splits orders into multiple pieces

Get: BrokerId(self: SerializedOrder) -> List[str]

Set: BrokerId(self: SerializedOrder) = value
"""

    CanceledTime = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the utc time this order was canceled, or null if the order was not canceled.

Get: CanceledTime(self: SerializedOrder) -> Nullable[float]

Set: CanceledTime(self: SerializedOrder) = value
"""

    ContingentId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Order id to process before processing this order.

Get: ContingentId(self: SerializedOrder) -> int

Set: ContingentId(self: SerializedOrder) = value
"""

    CreatedTime = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the utc time this order was created. Alias for QuantConnect.Time

Get: CreatedTime(self: SerializedOrder) -> float

Set: CreatedTime(self: SerializedOrder) = value
"""

    Direction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Order Direction Property based off Quantity.

Get: Direction(self: SerializedOrder) -> OrderDirection

Set: Direction(self: SerializedOrder) = value
"""

    Id = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The unique order id

Get: Id(self: SerializedOrder) -> str

"""

    LastFillTime = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the utc time the last fill was received, or null if no fills have been received

Get: LastFillTime(self: SerializedOrder) -> Nullable[float]

Set: LastFillTime(self: SerializedOrder) = value
"""

    LastUpdateTime = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the utc time this order was last updated, or null if the order has not been updated.

Get: LastUpdateTime(self: SerializedOrder) -> Nullable[float]

Set: LastUpdateTime(self: SerializedOrder) = value
"""

    LimitPrice = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The current limit price

Get: LimitPrice(self: SerializedOrder) -> Nullable[Decimal]

Set: LimitPrice(self: SerializedOrder) = value
"""

    OrderId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Order ID

Get: OrderId(self: SerializedOrder) -> int

Set: OrderId(self: SerializedOrder) = value
"""

    Price = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Price of the Order.

Get: Price(self: SerializedOrder) -> Decimal

Set: Price(self: SerializedOrder) = value
"""

    PriceCurrency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Currency for the order price

Get: PriceCurrency(self: SerializedOrder) -> str

Set: PriceCurrency(self: SerializedOrder) = value
"""

    Quantity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Number of shares to execute.

Get: Quantity(self: SerializedOrder) -> Decimal

Set: Quantity(self: SerializedOrder) = value
"""

    Status = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Status of the Order

Get: Status(self: SerializedOrder) -> OrderStatus

Set: Status(self: SerializedOrder) = value
"""

    StopPrice = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The current stop price

Get: StopPrice(self: SerializedOrder) -> Nullable[Decimal]

Set: StopPrice(self: SerializedOrder) = value
"""

    StopTriggered = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Signal showing the "StopLimitOrder" has been converted into a Limit Order

Get: StopTriggered(self: SerializedOrder) -> Nullable[bool]

Set: StopTriggered(self: SerializedOrder) = value
"""

    SubmissionAskPrice = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ask price at order submission time

Get: SubmissionAskPrice(self: SerializedOrder) -> Decimal

Set: SubmissionAskPrice(self: SerializedOrder) = value
"""

    SubmissionBidPrice = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The bid price at order submission time

Get: SubmissionBidPrice(self: SerializedOrder) -> Decimal

Set: SubmissionBidPrice(self: SerializedOrder) = value
"""

    SubmissionLastPrice = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The current price at order submission time

Get: SubmissionLastPrice(self: SerializedOrder) -> Decimal

Set: SubmissionLastPrice(self: SerializedOrder) = value
"""

    Symbol = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Symbol of the Asset

Get: Symbol(self: SerializedOrder) -> str

Set: Symbol(self: SerializedOrder) = value
"""

    Tag = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Tag the order with some custom data

Get: Tag(self: SerializedOrder) -> str

Set: Tag(self: SerializedOrder) = value
"""

    TimeInForceExpiry = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The time in force expiration time if any

Get: TimeInForceExpiry(self: SerializedOrder) -> Nullable[float]

Set: TimeInForceExpiry(self: SerializedOrder) = value
"""

    TimeInForceType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The time in force type

Get: TimeInForceType(self: SerializedOrder) -> str

Set: TimeInForceType(self: SerializedOrder) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Order Type

Get: Type(self: SerializedOrder) -> OrderType

Set: Type(self: SerializedOrder) = value
"""



class SerializedOrderEvent(object):
    """
    Data transfer object used for serializing an QuantConnect.Orders.OrderEvent that was just generated by an algorithm
    
    SerializedOrderEvent(orderEvent: OrderEvent, algorithmId: str)
    """
    @staticmethod # known case of __new__
    def __new__(self, orderEvent, algorithmId):
        """ __new__(cls: type, orderEvent: OrderEvent, algorithmId: str) """
        pass

    AlgorithmId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Algorithm Id, BacktestId or DeployId

Get: AlgorithmId(self: SerializedOrderEvent) -> str

Set: AlgorithmId(self: SerializedOrderEvent) = value
"""

    Direction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Order direction.

Get: Direction(self: SerializedOrderEvent) -> OrderDirection

Set: Direction(self: SerializedOrderEvent) = value
"""

    FillPrice = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Fill price information about the order

Get: FillPrice(self: SerializedOrderEvent) -> Decimal

Set: FillPrice(self: SerializedOrderEvent) = value
"""

    FillPriceCurrency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Currency for the fill price

Get: FillPriceCurrency(self: SerializedOrderEvent) -> str

Set: FillPriceCurrency(self: SerializedOrderEvent) = value
"""

    FillQuantity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Number of shares of the order that was filled in this event.

Get: FillQuantity(self: SerializedOrderEvent) -> Decimal

Set: FillQuantity(self: SerializedOrderEvent) = value
"""

    Id = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The unique order event id

Get: Id(self: SerializedOrderEvent) -> str

"""

    IsAssignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True if the order event is an assignment

Get: IsAssignment(self: SerializedOrderEvent) -> bool

Set: IsAssignment(self: SerializedOrderEvent) = value
"""

    LimitPrice = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The current limit price

Get: LimitPrice(self: SerializedOrderEvent) -> Nullable[Decimal]

Set: LimitPrice(self: SerializedOrderEvent) = value
"""

    Message = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Any message from the exchange.

Get: Message(self: SerializedOrderEvent) -> str

Set: Message(self: SerializedOrderEvent) = value
"""

    OrderEventId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The unique order event id for each order

Get: OrderEventId(self: SerializedOrderEvent) -> int

Set: OrderEventId(self: SerializedOrderEvent) = value
"""

    OrderFeeAmount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The fee amount associated with the order

Get: OrderFeeAmount(self: SerializedOrderEvent) -> Nullable[Decimal]

Set: OrderFeeAmount(self: SerializedOrderEvent) = value
"""

    OrderFeeCurrency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The fee currency associated with the order

Get: OrderFeeCurrency(self: SerializedOrderEvent) -> str

Set: OrderFeeCurrency(self: SerializedOrderEvent) = value
"""

    OrderId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Id of the order this event comes from.

Get: OrderId(self: SerializedOrderEvent) -> int

Set: OrderId(self: SerializedOrderEvent) = value
"""

    Quantity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The current order quantity

Get: Quantity(self: SerializedOrderEvent) -> Decimal

Set: Quantity(self: SerializedOrderEvent) = value
"""

    Status = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Status message of the order.

Get: Status(self: SerializedOrderEvent) -> OrderStatus

Set: Status(self: SerializedOrderEvent) = value
"""

    StopPrice = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The current stop price

Get: StopPrice(self: SerializedOrderEvent) -> Nullable[Decimal]

Set: StopPrice(self: SerializedOrderEvent) = value
"""

    Symbol = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Easy access to the order symbol associated with this event.

Get: Symbol(self: SerializedOrderEvent) -> str

Set: Symbol(self: SerializedOrderEvent) = value
"""

    Time = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The time of this event in unix timestamp

Get: Time(self: SerializedOrderEvent) -> float

Set: Time(self: SerializedOrderEvent) = value
"""



class SerializedOrderJsonConverter(TypeChangeJsonConverter[Order, SerializedOrder]):
    """
    Defines how Orders should be serialized to json
    
    SerializedOrderJsonConverter(algorithmId: str)
    """
    def CanConvert(self, objectType):
        """
        CanConvert(self: SerializedOrderJsonConverter, objectType: Type) -> bool
        
            Returns true if the provided type can be converted
        """
        pass

    @staticmethod # known case of __new__
    def __new__(self, algorithmId):
        """ __new__(cls: type, algorithmId: str) """
        pass

    PopulateProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True will populate TResult object returned by QuantConnect.Orders.Serialization.SerializedOrderJsonConverter.Convert(QuantConnect.Orders.Serialization.SerializedOrder) with json properties

"""



